{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./ripple",
    "./spinner"
  ],
  "id": "button",
  "file": {
    "name": "button.tsx",
    "content": "\"use client\";\r\n\r\nimport { dataAttr, nextTick, useRipple } from \"@dreamy-ui/react\";\r\nimport {\r\n\tcloneElement,\r\n\tforwardRef,\r\n\tisValidElement,\r\n\tuseCallback,\r\n\tuseMemo\r\n} from \"react\";\r\nimport { css, cx } from \"styled-system/css\";\r\nimport { type ButtonVariantProps, button } from \"styled-system/recipes\";\r\nimport { Box } from \"./box\";\r\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\r\nimport { Ripple } from \"./ripple\";\r\nimport { Spinner } from \"./spinner\";\r\n\r\nexport interface UniversalButtonProps extends ButtonSpinnerOptions {\r\n\t/**\r\n\t * Disables the whole button\r\n\t */\r\n\tisDisabled?: boolean;\r\n\t/**\r\n\t * Transforms the button into a loading state and disables the button\r\n\t */\r\n\tisLoading?: boolean;\r\n\t/**\r\n\t * Disables the ripple effect\r\n\t */\r\n\tdisableRipple?: boolean;\r\n\t/**\r\n\t * The spinner to be displayed instead of the default spinner\r\n\t */\r\n\tspinner?: React.ReactNode;\r\n}\r\n\r\ninterface Props extends UniversalButtonProps {\r\n\t/**\r\n\t * The icon to be displayed on the right side of the button\r\n\t */\r\n\trightIcon?: React.ReactNode;\r\n\t/**\r\n\t * The icon to be displayed on the left side of the button\r\n\t */\r\n\tleftIcon?: React.ReactNode;\r\n\t/**\r\n\t * The loading text to be displayed\r\n\t */\r\n\tloadingText?: React.ReactNode;\r\n}\r\n\r\nexport interface ButtonProps\r\n\textends HTMLDreamyProps<\"button\">,\r\n\t\tButtonVariantProps,\r\n\t\tProps {}\r\n\r\nconst StyledButton = dreamy(\"button\", button);\r\n\r\n/**\r\n * Button component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/button\r\n */\r\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\r\n\t(\r\n\t\t{\r\n\t\t\tisLoading,\r\n\t\t\tloadingText,\r\n\t\t\tisDisabled,\r\n\t\t\trightIcon,\r\n\t\t\tleftIcon,\r\n\t\t\tchildren,\r\n\t\t\tdisableRipple,\r\n\t\t\tspinner,\r\n\t\t\tspinnerPlacement,\r\n\t\t\t...rest\r\n\t\t},\r\n\t\tref\r\n\t) => {\r\n\t\tconst {\r\n\t\t\tonClick: onRippleClickHandler,\r\n\t\t\tonClear: onClearRipple,\r\n\t\t\tripples,\r\n\t\t\tcurrentRipple,\r\n\t\t\tonPointerDown: onPointerDownRipple,\r\n\t\t\tisDisabled: isDisabledRipple\r\n\t\t} = useRipple();\r\n\r\n\t\tconst handleClick = useCallback(\r\n\t\t\t(e: React.MouseEvent<HTMLButtonElement>) => {\r\n\t\t\t\trest.onClick?.(e);\r\n\t\t\t\tif (disableRipple || isDisabled || isDisabledRipple) return;\r\n\r\n\t\t\t\tif (isLoading) return;\r\n\t\t\t\tif (isMobile()) {\r\n\t\t\t\t\tonPointerDownRipple(e);\r\n\t\t\t\t\tnextTick(() => {\r\n\t\t\t\t\t\tnextTick(() => {\r\n\t\t\t\t\t\t\tonRippleClickHandler(e);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tonRippleClickHandler(e);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[\r\n\t\t\t\tdisableRipple,\r\n\t\t\t\tisDisabled,\r\n\t\t\t\tonRippleClickHandler,\r\n\t\t\t\tisDisabledRipple,\r\n\t\t\t\trest.onClick,\r\n\t\t\t\tonPointerDownRipple,\r\n\t\t\t\tisLoading\r\n\t\t\t]\r\n\t\t);\r\n\r\n\t\tconst onPointerDown = useCallback(\r\n\t\t\t(e: React.PointerEvent<HTMLButtonElement>) => {\r\n\t\t\t\trest.onPointerDown?.(e);\r\n\t\t\t\tif (\r\n\t\t\t\t\tdisableRipple ||\r\n\t\t\t\t\tisDisabled ||\r\n\t\t\t\t\tisDisabledRipple ||\r\n\t\t\t\t\tisMobile() ||\r\n\t\t\t\t\tisLoading\r\n\t\t\t\t)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tonPointerDownRipple(e);\r\n\t\t\t},\r\n\t\t\t[\r\n\t\t\t\tdisableRipple,\r\n\t\t\t\tisDisabled,\r\n\t\t\t\tonPointerDownRipple,\r\n\t\t\t\tisDisabledRipple,\r\n\t\t\t\trest.onPointerDown,\r\n\t\t\t\tisLoading\r\n\t\t\t]\r\n\t\t);\r\n\r\n\t\tconst LeftIcon = useMemo(\r\n\t\t\t() =>\r\n\t\t\t\tleftIcon ? (\r\n\t\t\t\t\t<ButtonIcon data-part=\"icon-left\">{leftIcon}</ButtonIcon>\r\n\t\t\t\t) : null,\r\n\t\t\t[leftIcon]\r\n\t\t);\r\n\t\tconst RightIcon = useMemo(\r\n\t\t\t() =>\r\n\t\t\t\trightIcon ? (\r\n\t\t\t\t\t<ButtonIcon data-part=\"icon-right\">{rightIcon}</ButtonIcon>\r\n\t\t\t\t) : null,\r\n\t\t\t[rightIcon]\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<StyledButton\r\n\t\t\t\tref={ref}\r\n\t\t\t\tdata-loading={dataAttr(isLoading)}\r\n\t\t\t\tdata-disabled={dataAttr(isDisabled)}\r\n\t\t\t\tdisabled={isDisabled || isLoading}\r\n\t\t\t\t{...rest}\r\n\t\t\t\ttype={rest.type || \"button\"}\r\n\t\t\t\tonClick={handleClick}\r\n\t\t\t\tonPointerDown={onPointerDown}\r\n\t\t\t>\r\n\t\t\t\t{leftIcon &&\r\n\t\t\t\t\t(isLoading ? (\r\n\t\t\t\t\t\t<span style={{ opacity: 0 }}>{LeftIcon}</span>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\tLeftIcon\r\n\t\t\t\t\t))}\r\n\r\n\t\t\t\t{isLoading && spinnerPlacement !== \"end\" && (\r\n\t\t\t\t\t<ButtonSpinner\r\n\t\t\t\t\t\tloadingText={loadingText}\r\n\t\t\t\t\t\tspinnerPlacement={spinnerPlacement}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{spinner}\r\n\t\t\t\t\t</ButtonSpinner>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{isLoading\r\n\t\t\t\t\t? loadingText || (\r\n\t\t\t\t\t\t\t<span style={{ opacity: 0 }}>{children}</span>\r\n\t\t\t\t\t  )\r\n\t\t\t\t\t: children}\r\n\r\n\t\t\t\t{isLoading && spinnerPlacement === \"end\" && (\r\n\t\t\t\t\t<ButtonSpinner\r\n\t\t\t\t\t\tloadingText={loadingText}\r\n\t\t\t\t\t\tspinnerPlacement={\"end\"}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{spinner}\r\n\t\t\t\t\t</ButtonSpinner>\r\n\t\t\t\t)}\r\n\t\t\t\t{rightIcon &&\r\n\t\t\t\t\t(isLoading ? (\r\n\t\t\t\t\t\t<span style={{ opacity: 0 }}>{RightIcon}</span>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\tRightIcon\r\n\t\t\t\t\t))}\r\n\r\n\t\t\t\t{!disableRipple && !isDisabled && (\r\n\t\t\t\t\t<div data-part=\"ripple-container\">\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\t\t\t\tposition: \"relative\"\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Ripple\r\n\t\t\t\t\t\t\t\tonClear={onClearRipple}\r\n\t\t\t\t\t\t\t\tcurrentRipple={currentRipple}\r\n\t\t\t\t\t\t\t\tripples={ripples}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</StyledButton>\r\n\t\t);\r\n\t}\r\n);\r\n\r\nfunction isMobile() {\r\n\tconst result = navigator.userAgent.match(\r\n\t\t/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i\r\n\t);\r\n\r\n\treturn result !== null;\r\n}\r\n\r\ninterface ButtonSpinnerOptions {\r\n\tloadingText?: React.ReactNode;\r\n\tspinnerPlacement?: \"start\" | \"end\";\r\n}\r\n\r\ninterface ButtonSpinnerProps\r\n\textends HTMLDreamyProps<\"div\">,\r\n\t\tButtonSpinnerOptions {}\r\n\r\nfunction ButtonSpinner(props: ButtonSpinnerProps) {\r\n\tconst {\r\n\t\tloadingText,\r\n\t\tspinnerPlacement,\r\n\t\tchildren = <Spinner color=\"currentColor\" size={\"sm\"} />,\r\n\t\t...rest\r\n\t} = props;\r\n\r\n\treturn (\r\n\t\t<Box\r\n\t\t\t{...rest}\r\n\t\t\tdata-part={\r\n\t\t\t\tspinnerPlacement === \"start\"\r\n\t\t\t\t\t? \"icon-left\"\r\n\t\t\t\t\t: spinnerPlacement === \"end\"\r\n\t\t\t\t\t? \"icon-right\"\r\n\t\t\t\t\t: undefined\r\n\t\t\t}\r\n\t\t\tclassName={cx(\r\n\t\t\t\tcss({\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\talignItems: \"center\",\r\n\t\t\t\t\tposition: loadingText ? \"relative\" : \"absolute\",\r\n\t\t\t\t\tlineHeight: \"normal\"\r\n\t\t\t\t}),\r\n\t\t\t\trest.className\r\n\t\t\t)}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</Box>\r\n\t);\r\n}\r\n\r\nButtonSpinner.displayName = \"ButtonSpinner\";\r\n\r\ninterface ButtonIconProps extends HTMLDreamyProps<\"span\"> {}\r\n\r\nfunction ButtonIcon(props: ButtonIconProps) {\r\n\tconst { children, className, ...rest } = props;\r\n\r\n\tconst _children = isValidElement(children)\r\n\t\t? cloneElement<any>(children, {\r\n\t\t\t\t\"aria-hidden\": true,\r\n\t\t\t\tfocusable: false\r\n\t\t  })\r\n\t\t: children;\r\n\r\n\treturn (\r\n\t\t<Box as={\"span\"} {...rest}>\r\n\t\t\t{_children}\r\n\t\t</Box>\r\n\t);\r\n}\r\n\r\nButtonIcon.displayName = \"ButtonIcon\";\r\n"
  },
  "component": "Button",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "button"
  ]
}