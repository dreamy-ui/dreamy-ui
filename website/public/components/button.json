{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./ripple",
    "./spinner"
  ],
  "id": "button",
  "file": {
    "name": "button.tsx",
    "content": "\"use client\";\n\nimport { dataAttr, nextTick, useRipple } from \"@dreamy-ui/react\";\nimport {\n\tcloneElement,\n\tforwardRef,\n\tisValidElement,\n\tuseCallback,\n\tuseMemo\n} from \"react\";\nimport { css, cx } from \"styled-system/css\";\nimport { type ButtonVariantProps, button } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\nimport { Ripple } from \"./ripple\";\nimport { Spinner } from \"./spinner\";\n\nexport interface UniversalButtonProps extends ButtonSpinnerOptions {\n\t/**\n\t * Disables the whole button\n\t */\n\tisDisabled?: boolean;\n\t/**\n\t * Transforms the button into a loading state and disables the button\n\t */\n\tisLoading?: boolean;\n\t/**\n\t * Disables the ripple effect\n\t */\n\tdisableRipple?: boolean;\n\t/**\n\t * The spinner to be displayed instead of the default spinner\n\t */\n\tspinner?: React.ReactNode;\n}\n\ninterface Props extends UniversalButtonProps {\n\t/**\n\t * The icon to be displayed on the right side of the button\n\t */\n\trightIcon?: React.ReactNode;\n\t/**\n\t * The icon to be displayed on the left side of the button\n\t */\n\tleftIcon?: React.ReactNode;\n\t/**\n\t * The loading text to be displayed\n\t */\n\tloadingText?: React.ReactNode;\n}\n\nexport interface ButtonProps\n\textends HTMLDreamyProps<\"button\">,\n\t\tButtonVariantProps,\n\t\tProps {}\n\nconst StyledButton = dreamy(\"button\", button);\n\n/**\n * Button component\n *\n * @See Docs https://dreamy-ui.com/docs/components/button\n */\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n\t(\n\t\t{\n\t\t\tisLoading,\n\t\t\tloadingText,\n\t\t\tisDisabled,\n\t\t\trightIcon,\n\t\t\tleftIcon,\n\t\t\tchildren,\n\t\t\tdisableRipple,\n\t\t\tspinner,\n\t\t\tspinnerPlacement,\n\t\t\t...rest\n\t\t},\n\t\tref\n\t) => {\n\t\tconst {\n\t\t\tonClick: onRippleClickHandler,\n\t\t\tonClear: onClearRipple,\n\t\t\tripples,\n\t\t\tcurrentRipple,\n\t\t\tonPointerDown: onPointerDownRipple,\n\t\t\tisDisabled: isDisabledRipple\n\t\t} = useRipple();\n\n\t\tconst handleClick = useCallback(\n\t\t\t(e: React.MouseEvent<HTMLButtonElement>) => {\n\t\t\t\trest.onClick?.(e);\n\t\t\t\tif (disableRipple || isDisabled || isDisabledRipple) return;\n\n\t\t\t\tif (isLoading) return;\n\t\t\t\tif (isMobile()) {\n\t\t\t\t\tonPointerDownRipple(e);\n\t\t\t\t\tnextTick(() => {\n\t\t\t\t\t\tnextTick(() => {\n\t\t\t\t\t\t\tonRippleClickHandler(e);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tonRippleClickHandler(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[\n\t\t\t\tdisableRipple,\n\t\t\t\tisDisabled,\n\t\t\t\tonRippleClickHandler,\n\t\t\t\tisDisabledRipple,\n\t\t\t\trest.onClick,\n\t\t\t\tonPointerDownRipple,\n\t\t\t\tisLoading\n\t\t\t]\n\t\t);\n\n\t\tconst onPointerDown = useCallback(\n\t\t\t(e: React.PointerEvent<HTMLButtonElement>) => {\n\t\t\t\trest.onPointerDown?.(e);\n\t\t\t\tif (\n\t\t\t\t\tdisableRipple ||\n\t\t\t\t\tisDisabled ||\n\t\t\t\t\tisDisabledRipple ||\n\t\t\t\t\tisMobile() ||\n\t\t\t\t\tisLoading\n\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tonPointerDownRipple(e);\n\t\t\t},\n\t\t\t[\n\t\t\t\tdisableRipple,\n\t\t\t\tisDisabled,\n\t\t\t\tonPointerDownRipple,\n\t\t\t\tisDisabledRipple,\n\t\t\t\trest.onPointerDown,\n\t\t\t\tisLoading\n\t\t\t]\n\t\t);\n\n\t\tconst LeftIcon = useMemo(\n\t\t\t() =>\n\t\t\t\tleftIcon ? (\n\t\t\t\t\t<ButtonIcon data-part=\"icon-left\">{leftIcon}</ButtonIcon>\n\t\t\t\t) : null,\n\t\t\t[leftIcon]\n\t\t);\n\t\tconst RightIcon = useMemo(\n\t\t\t() =>\n\t\t\t\trightIcon ? (\n\t\t\t\t\t<ButtonIcon data-part=\"icon-right\">{rightIcon}</ButtonIcon>\n\t\t\t\t) : null,\n\t\t\t[rightIcon]\n\t\t);\n\n\t\treturn (\n\t\t\t<StyledButton\n\t\t\t\tref={ref}\n\t\t\t\tdata-loading={dataAttr(isLoading)}\n\t\t\t\tdata-disabled={dataAttr(isDisabled)}\n\t\t\t\tdisabled={isDisabled || isLoading}\n\t\t\t\t{...rest}\n\t\t\t\ttype={rest.type || \"button\"}\n\t\t\t\tonClick={handleClick}\n\t\t\t\tonPointerDown={onPointerDown}\n\t\t\t>\n\t\t\t\t{leftIcon &&\n\t\t\t\t\t(isLoading ? (\n\t\t\t\t\t\t<span style={{ opacity: 0 }}>{LeftIcon}</span>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tLeftIcon\n\t\t\t\t\t))}\n\n\t\t\t\t{isLoading && spinnerPlacement !== \"end\" && (\n\t\t\t\t\t<ButtonSpinner\n\t\t\t\t\t\tloadingText={loadingText}\n\t\t\t\t\t\tspinnerPlacement={spinnerPlacement}\n\t\t\t\t\t>\n\t\t\t\t\t\t{spinner}\n\t\t\t\t\t</ButtonSpinner>\n\t\t\t\t)}\n\n\t\t\t\t{isLoading\n\t\t\t\t\t? loadingText || (\n\t\t\t\t\t\t\t<span style={{ opacity: 0 }}>{children}</span>\n\t\t\t\t\t  )\n\t\t\t\t\t: children}\n\n\t\t\t\t{isLoading && spinnerPlacement === \"end\" && (\n\t\t\t\t\t<ButtonSpinner\n\t\t\t\t\t\tloadingText={loadingText}\n\t\t\t\t\t\tspinnerPlacement={\"end\"}\n\t\t\t\t\t>\n\t\t\t\t\t\t{spinner}\n\t\t\t\t\t</ButtonSpinner>\n\t\t\t\t)}\n\t\t\t\t{rightIcon &&\n\t\t\t\t\t(isLoading ? (\n\t\t\t\t\t\t<span style={{ opacity: 0 }}>{RightIcon}</span>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tRightIcon\n\t\t\t\t\t))}\n\n\t\t\t\t{!disableRipple && !isDisabled && (\n\t\t\t\t\t<div data-part=\"ripple-container\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\t\t\t\theight: \"100%\",\n\t\t\t\t\t\t\t\tposition: \"relative\"\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Ripple\n\t\t\t\t\t\t\t\tonClear={onClearRipple}\n\t\t\t\t\t\t\t\tcurrentRipple={currentRipple}\n\t\t\t\t\t\t\t\tripples={ripples}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</StyledButton>\n\t\t);\n\t}\n);\n\nfunction isMobile() {\n\tconst result = navigator.userAgent.match(\n\t\t/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i\n\t);\n\n\treturn result !== null;\n}\n\ninterface ButtonSpinnerOptions {\n\tloadingText?: React.ReactNode;\n\tspinnerPlacement?: \"start\" | \"end\";\n}\n\ninterface ButtonSpinnerProps\n\textends HTMLDreamyProps<\"div\">,\n\t\tButtonSpinnerOptions {}\n\nfunction ButtonSpinner(props: ButtonSpinnerProps) {\n\tconst {\n\t\tloadingText,\n\t\tspinnerPlacement,\n\t\tchildren = <Spinner color=\"currentColor\" size={\"sm\"} />,\n\t\t...rest\n\t} = props;\n\n\treturn (\n\t\t<Box\n\t\t\t{...rest}\n\t\t\tdata-part={\n\t\t\t\tspinnerPlacement === \"start\"\n\t\t\t\t\t? \"icon-left\"\n\t\t\t\t\t: spinnerPlacement === \"end\"\n\t\t\t\t\t? \"icon-right\"\n\t\t\t\t\t: undefined\n\t\t\t}\n\t\t\tclassName={cx(\n\t\t\t\tcss({\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\tposition: loadingText ? \"relative\" : \"absolute\",\n\t\t\t\t\tlineHeight: \"normal\"\n\t\t\t\t}),\n\t\t\t\trest.className\n\t\t\t)}\n\t\t>\n\t\t\t{children}\n\t\t</Box>\n\t);\n}\n\nButtonSpinner.displayName = \"ButtonSpinner\";\n\ninterface ButtonIconProps extends HTMLDreamyProps<\"span\"> {}\n\nfunction ButtonIcon(props: ButtonIconProps) {\n\tconst { children, className, ...rest } = props;\n\n\tconst _children = isValidElement(children)\n\t\t? cloneElement<any>(children, {\n\t\t\t\t\"aria-hidden\": true,\n\t\t\t\tfocusable: false\n\t\t  })\n\t\t: children;\n\n\treturn (\n\t\t<Box as={\"span\"} {...rest}>\n\t\t\t{_children}\n\t\t</Box>\n\t);\n}\n\nButtonIcon.displayName = \"ButtonIcon\";\n"
  },
  "component": "Button",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "button"
  ]
}