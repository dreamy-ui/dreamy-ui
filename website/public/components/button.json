{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./ripple",
    "./spinner"
  ],
  "id": "button",
  "file": {
    "name": "button.tsx",
    "content": "\"use client\";\n\nimport { dataAttr, nextTick, useRipple } from \"@dreamy-ui/react\";\nimport { dreamy } from \"@dreamy-ui/react/rsc\";\nimport { cloneElement, forwardRef, isValidElement, useCallback, useMemo } from \"react\";\nimport { css, cx } from \"styled-system/css\";\nimport { type ButtonVariantProps, button } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport type { HTMLDreamyProps } from \"./factory\";\nimport { Ripple } from \"./ripple\";\nimport { Spinner } from \"./spinner\";\n\nexport interface UniversalButtonProps extends ButtonSpinnerOptions {\n    /**\n     * Disables the whole button\n     */\n    isDisabled?: boolean;\n    /**\n     * Transforms the button into a loading state and disables the button\n     */\n    isLoading?: boolean;\n    /**\n     * Disables the ripple effect\n     */\n    disableRipple?: boolean;\n    /**\n     * The spinner to be displayed instead of the default spinner\n     */\n    spinner?: React.ReactNode;\n}\n\ninterface Props extends UniversalButtonProps {\n    /**\n     * The icon to be displayed on the right side of the button\n     */\n    rightIcon?: React.ReactNode;\n    /**\n     * The icon to be displayed on the left side of the button\n     */\n    leftIcon?: React.ReactNode;\n    /**\n     * The loading text to be displayed\n     */\n    loadingText?: React.ReactNode;\n}\n\nexport interface ButtonProps extends HTMLDreamyProps<\"button\">, ButtonVariantProps, Props {}\n\nconst StyledButton = dreamy(\"button\", button);\n\n/**\n * Button component\n *\n * @See Docs https://dreamy-ui.com/docs/components/button\n */\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n    (\n        {\n            isLoading,\n            loadingText,\n            isDisabled,\n            rightIcon,\n            leftIcon,\n            children,\n            disableRipple,\n            spinner,\n            spinnerPlacement,\n            ...rest\n        },\n        ref\n    ) => {\n        const {\n            onClick: onRippleClickHandler,\n            onClear: onClearRipple,\n            ripples,\n            currentRipple,\n            onPointerDown: onPointerDownRipple,\n            isDisabled: isDisabledRipple\n        } = useRipple();\n\n        const handleClick = useCallback(\n            (e: React.MouseEvent<HTMLButtonElement>) => {\n                rest.onClick?.(e);\n                if (disableRipple || isDisabled || isDisabledRipple) return;\n\n                if (isLoading) return;\n                if (isMobile()) {\n                    onPointerDownRipple(e);\n                    nextTick(() => {\n                        nextTick(() => {\n                            onRippleClickHandler(e);\n                        });\n                    });\n                } else {\n                    onRippleClickHandler(e);\n                }\n            },\n            [\n                disableRipple,\n                isDisabled,\n                onRippleClickHandler,\n                isDisabledRipple,\n                rest.onClick,\n                onPointerDownRipple,\n                isLoading\n            ]\n        );\n\n        const onPointerDown = useCallback(\n            (e: React.PointerEvent<HTMLButtonElement>) => {\n                rest.onPointerDown?.(e);\n                if (disableRipple || isDisabled || isDisabledRipple || isMobile() || isLoading)\n                    return;\n                onPointerDownRipple(e);\n            },\n            [\n                disableRipple,\n                isDisabled,\n                onPointerDownRipple,\n                isDisabledRipple,\n                rest.onPointerDown,\n                isLoading\n            ]\n        );\n\n        const LeftIcon = useMemo(\n            () => (leftIcon ? <ButtonIcon data-part=\"icon-left\">{leftIcon}</ButtonIcon> : null),\n            [leftIcon]\n        );\n        const RightIcon = useMemo(\n            () => (rightIcon ? <ButtonIcon data-part=\"icon-right\">{rightIcon}</ButtonIcon> : null),\n            [rightIcon]\n        );\n\n        return (\n            <StyledButton\n                ref={ref}\n                data-loading={dataAttr(isLoading)}\n                data-disabled={dataAttr(isDisabled)}\n                disabled={isDisabled || isLoading}\n                {...rest}\n                type={rest.type || \"button\"}\n                onClick={handleClick}\n                onPointerDown={onPointerDown}\n            >\n                {leftIcon &&\n                    (isLoading ? <span style={{ opacity: 0 }}>{LeftIcon}</span> : LeftIcon)}\n\n                {isLoading && spinnerPlacement !== \"end\" && (\n                    <ButtonSpinner\n                        loadingText={loadingText}\n                        spinnerPlacement={spinnerPlacement}\n                    >\n                        {spinner}\n                    </ButtonSpinner>\n                )}\n\n                {isLoading\n                    ? loadingText || <span style={{ opacity: 0 }}>{children}</span>\n                    : children}\n\n                {isLoading && spinnerPlacement === \"end\" && (\n                    <ButtonSpinner\n                        loadingText={loadingText}\n                        spinnerPlacement={\"end\"}\n                    >\n                        {spinner}\n                    </ButtonSpinner>\n                )}\n                {rightIcon &&\n                    (isLoading ? <span style={{ opacity: 0 }}>{RightIcon}</span> : RightIcon)}\n\n                {!disableRipple && !isDisabled && (\n                    <div data-part=\"ripple-container\">\n                        <div\n                            style={{\n                                width: \"100%\",\n                                height: \"100%\",\n                                position: \"relative\"\n                            }}\n                        >\n                            <Ripple\n                                onClear={onClearRipple}\n                                currentRipple={currentRipple}\n                                ripples={ripples}\n                            />\n                        </div>\n                    </div>\n                )}\n            </StyledButton>\n        );\n    }\n);\n\nfunction isMobile() {\n    const result = navigator.userAgent.match(\n        /(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i\n    );\n\n    return result !== null;\n}\n\ninterface ButtonSpinnerOptions {\n    loadingText?: React.ReactNode;\n    spinnerPlacement?: \"start\" | \"end\";\n}\n\ninterface ButtonSpinnerProps extends HTMLDreamyProps<\"div\">, ButtonSpinnerOptions {}\n\nfunction ButtonSpinner(props: ButtonSpinnerProps) {\n    const {\n        loadingText,\n        spinnerPlacement,\n        children = (\n            <Spinner\n                color=\"currentColor\"\n                size={\"sm\"}\n            />\n        ),\n        ...rest\n    } = props;\n\n    return (\n        <Box\n            {...rest}\n            data-part={\n                spinnerPlacement === \"start\"\n                    ? \"icon-left\"\n                    : spinnerPlacement === \"end\"\n                      ? \"icon-right\"\n                      : undefined\n            }\n            className={cx(\n                css({\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    position: loadingText ? \"relative\" : \"absolute\",\n                    lineHeight: \"normal\"\n                }),\n                rest.className\n            )}\n        >\n            {children}\n        </Box>\n    );\n}\n\nButtonSpinner.displayName = \"ButtonSpinner\";\n\ninterface ButtonIconProps extends HTMLDreamyProps<\"span\"> {}\n\nfunction ButtonIcon(props: ButtonIconProps) {\n    const { children, className, ...rest } = props;\n\n    const _children = isValidElement(children)\n        ? cloneElement<any>(children, {\n              \"aria-hidden\": true,\n              focusable: false\n          })\n        : children;\n\n    return (\n        <Box\n            as={\"span\"}\n            {...rest}\n        >\n            {_children}\n        </Box>\n    );\n}\n\nButtonIcon.displayName = \"ButtonIcon\";\n"
  },
  "component": "Button",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "button"
  ]
}