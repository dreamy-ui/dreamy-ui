{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./text",
    "./visually-hidden"
  ],
  "id": "radio-card",
  "file": {
    "name": "radio-card.tsx",
    "content": "import { type UseRadioProps, createContext, dataAttr, useRadio } from \"@dreamy-ui/react\";\r\nimport { type ElementType, forwardRef, useMemo } from \"react\";\r\nimport { type RadioCardVariantProps, radioCard } from \"styled-system/recipes\";\r\nimport { Box } from \"./box\";\r\nimport { dreamy } from \"./factory\";\r\nimport { Text, type TextProps } from \"./text\";\r\nimport { VisuallyHiddenInput } from \"./visually-hidden\";\r\n\r\nexport const [RadioProvider, useRadioCardContext] = createContext<UseRadioProps>({\r\n    strict: false\r\n});\r\n\r\nexport interface RadioCardProps\r\n    extends Omit<UseRadioProps, \"children\" | \"title\">,\r\n        RadioCardVariantProps {\r\n    /**\r\n     * The title of the radio card\r\n     */\r\n    title?: React.ReactNode;\r\n    /**\r\n     * The description of the radio card\r\n     */\r\n    description?: React.ReactNode;\r\n    /**\r\n     * The tag of the title\r\n     */\r\n    titleTag?: ElementType;\r\n    /**\r\n     * The props of the title\r\n     */\r\n    titleProps?: TextProps;\r\n    /**\r\n     * The props of the description\r\n     */\r\n    descriptionProps?: TextProps;\r\n    /**\r\n     * Should hide the radio indicator\r\n     */\r\n    hideRadio?: boolean;\r\n}\r\n\r\nconst StyledRadio = dreamy(\"div\", radioCard);\r\n\r\n/**\r\n * RadioCard component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/radio-card\r\n */\r\nexport const RadioCard = forwardRef<HTMLInputElement, RadioCardProps>((props, ref) => {\r\n    const {\r\n        title,\r\n        description,\r\n        titleTag = \"p\",\r\n        titleProps,\r\n        descriptionProps,\r\n        hideRadio,\r\n        ...rest\r\n    } = props;\r\n    const {\r\n        children,\r\n        isChecked,\r\n        isDisabled,\r\n        isInvalid,\r\n        getRootProps,\r\n        getWrapperProps,\r\n        getInputProps,\r\n        getControlProps,\r\n        getLabelProps\r\n    } = useRadio({ ...rest, isCard: true, ref });\r\n\r\n    const ctx = useMemo(() => {\r\n        return {\r\n            children,\r\n            isChecked,\r\n            isDisabled,\r\n            isInvalid,\r\n            getRootProps,\r\n            getWrapperProps,\r\n            getInputProps,\r\n            getControlProps,\r\n            getLabelProps\r\n        };\r\n    }, [\r\n        children,\r\n        isChecked,\r\n        isDisabled,\r\n        isInvalid,\r\n        getRootProps,\r\n        getWrapperProps,\r\n        getInputProps,\r\n        getControlProps,\r\n        getLabelProps\r\n    ]);\r\n\r\n    return (\r\n        <RadioProvider value={ctx}>\r\n            <StyledRadio\r\n                {...(getRootProps() as any)}\r\n                data-center={dataAttr(!description)}\r\n            >\r\n                <Box data-part={\"header\"}>\r\n                    <Text\r\n                        as={titleTag}\r\n                        data-part={\"title\"}\r\n                        {...titleProps}\r\n                    >\r\n                        {title}\r\n                    </Text>\r\n                    <VisuallyHiddenInput {...(getInputProps() as any)} />\r\n                    {!hideRadio && (\r\n                        <Box data-part={\"radio-root\"}>\r\n                            <span {...getWrapperProps()}>\r\n                                <span {...getControlProps()} />\r\n                            </span>\r\n                        </Box>\r\n                    )}\r\n                </Box>\r\n                {description && (\r\n                    <Text\r\n                        data-part={\"description\"}\r\n                        {...descriptionProps}\r\n                    >\r\n                        {description}\r\n                    </Text>\r\n                )}\r\n            </StyledRadio>\r\n        </RadioProvider>\r\n    );\r\n});\r\n\r\nRadioCard.displayName = \"RadioCard\";\r\n"
  },
  "component": "RadioCard",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "radio-card"
  ]
}