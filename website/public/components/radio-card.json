{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./text",
    "./visually-hidden"
  ],
  "id": "radio-card",
  "file": {
    "name": "radio-card.tsx",
    "content": "import { type UseRadioProps, createContext, dataAttr, useRadio } from \"@dreamy-ui/react\";\nimport { type ElementType, forwardRef, useMemo } from \"react\";\nimport { type RadioCardVariantProps, radioCard } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { dreamy } from \"./factory\";\nimport { Text, type TextProps } from \"./text\";\nimport { VisuallyHiddenInput } from \"./visually-hidden\";\n\nexport const [RadioProvider, useRadioCardContext] = createContext<UseRadioProps>({\n    strict: false\n});\n\nexport interface RadioCardProps\n    extends Omit<UseRadioProps, \"children\" | \"title\">,\n        RadioCardVariantProps {\n    /**\n     * The title of the radio card\n     */\n    title?: React.ReactNode;\n    /**\n     * The description of the radio card\n     */\n    description?: React.ReactNode;\n    /**\n     * The tag of the title\n     */\n    titleTag?: ElementType;\n    /**\n     * The props of the title\n     */\n    titleProps?: TextProps;\n    /**\n     * The props of the description\n     */\n    descriptionProps?: TextProps;\n    /**\n     * Should hide the radio indicator\n     */\n    hideRadio?: boolean;\n}\n\nconst StyledRadio = dreamy(\"div\", radioCard);\n\n/**\n * RadioCard component\n *\n * @See Docs https://dreamy-ui.com/docs/components/radio-card\n */\nexport const RadioCard = forwardRef<HTMLInputElement, RadioCardProps>((props, ref) => {\n    const {\n        title,\n        description,\n        titleTag = \"p\",\n        titleProps,\n        descriptionProps,\n        hideRadio,\n        ...rest\n    } = props;\n    const {\n        children,\n        isChecked,\n        isDisabled,\n        isInvalid,\n        getRootProps,\n        getWrapperProps,\n        getInputProps,\n        getControlProps,\n        getLabelProps\n    } = useRadio({ ...rest, isCard: true, ref });\n\n    const ctx = useMemo(() => {\n        return {\n            children,\n            isChecked,\n            isDisabled,\n            isInvalid,\n            getRootProps,\n            getWrapperProps,\n            getInputProps,\n            getControlProps,\n            getLabelProps\n        };\n    }, [\n        children,\n        isChecked,\n        isDisabled,\n        isInvalid,\n        getRootProps,\n        getWrapperProps,\n        getInputProps,\n        getControlProps,\n        getLabelProps\n    ]);\n\n    return (\n        <RadioProvider value={ctx}>\n            <StyledRadio\n                {...(getRootProps() as any)}\n                data-center={dataAttr(!description)}\n            >\n                <Box data-part={\"header\"}>\n                    <Text\n                        as={titleTag}\n                        data-part={\"title\"}\n                        {...titleProps}\n                    >\n                        {title}\n                    </Text>\n                    <VisuallyHiddenInput {...(getInputProps() as any)} />\n                    {!hideRadio && (\n                        <Box data-part={\"radio-root\"}>\n                            <span {...getWrapperProps()}>\n                                <span {...getControlProps()} />\n                            </span>\n                        </Box>\n                    )}\n                </Box>\n                {description && (\n                    <Text\n                        data-part={\"description\"}\n                        {...descriptionProps}\n                    >\n                        {description}\n                    </Text>\n                )}\n            </StyledRadio>\n        </RadioProvider>\n    );\n});\n\nRadioCard.displayName = \"RadioCard\";\n"
  },
  "component": "RadioCard",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "radio-card"
  ]
}