{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory"
  ],
  "id": "image",
  "file": {
    "name": "image.tsx",
    "content": "\"use client\";\n\nimport { ariaAttr, callAllHandlers, objectToDeps, omit } from \"@dreamy-ui/react\";\nimport { cloneElement, forwardRef, useMemo, useRef } from \"react\";\nimport { image } from \"styled-system/recipes\";\nimport type { SystemProperties } from \"styled-system/types\";\nimport { Box } from \"./box\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\n\nexport interface ImageProps extends HTMLDreamyProps<\"img\">, SystemProperties {\n    /**\n     * Fallback image `src` to show if image fails.\n     */\n    fallbackSrc?: string;\n    /**\n     * If `true`, image will zoom in on hover\n     *\n     * @default false\n     */\n    zoomOnHover?: boolean;\n    /**\n     * If `true`, 2nd image will be placed behind with a blur effect\n     *\n     * @default false\n     */\n    blurShadow?: boolean;\n}\n\nconst StyledImage = dreamy(\"img\", image);\n\n/**\n * Native image with useful helpers.\n *\n * @See Docs https://dreamy-ui.com/docs/components/image\n */\nexport const Image = forwardRef<HTMLImageElement, ImageProps>(function Image(props, ref) {\n    const {\n        fallbackSrc,\n        src,\n        srcSet,\n        loading,\n        crossOrigin,\n        referrerPolicy,\n        zoomOnHover,\n        blurShadow,\n        ...rest\n    } = props;\n\n    const hasErrored = useRef(false);\n\n    const shared = useMemo(() => {\n        return {\n            ref,\n            \"data-zoomed\": zoomOnHover,\n            ...omit(rest, [\"onError\", \"onLoad\"])\n        };\n    }, [zoomOnHover, ref, ...objectToDeps(rest)]);\n\n    const img = useMemo(\n        () => (\n            <StyledImage\n                src={src}\n                srcSet={srcSet}\n                crossOrigin={crossOrigin}\n                loading={loading}\n                referrerPolicy={referrerPolicy}\n                {...shared}\n                onError={callAllHandlers((e: any) => {\n                    if (fallbackSrc && !hasErrored.current) {\n                        hasErrored.current = true;\n                        e.target.src = fallbackSrc;\n                    }\n                }, rest.onError)}\n            />\n        ),\n        [shared, src, srcSet, crossOrigin, loading, referrerPolicy, rest.onError, fallbackSrc]\n    );\n\n    const zoomed = useMemo(() => {\n        if (!zoomOnHover) return null;\n\n        return (\n            <Box\n                as={\"div\"}\n                data-part={\"wrapper-zoomed\"}\n                {...shared}\n            >\n                {img}\n            </Box>\n        );\n    }, [img, zoomOnHover, shared]);\n\n    if (blurShadow || zoomOnHover) {\n        return (\n            <Box\n                as={\"div\"}\n                data-part={\"wrapper\"}\n            >\n                {zoomOnHover ? zoomed : img}\n                {blurShadow &&\n                    cloneElement(img, {\n                        \"data-part\": \"blurred\",\n                        className: shared.className?.replace(\"dreamy-image\", \"\"),\n                        \"aria-hidden\": ariaAttr(true)\n                    })}\n            </Box>\n        );\n    }\n\n    return img;\n});\n"
  },
  "component": "Image",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "image"
  ]
}