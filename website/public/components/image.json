{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory"
  ],
  "id": "image",
  "file": {
    "name": "image.tsx",
    "content": "\"use client\";\r\n\r\nimport { ariaAttr, callAllHandlers, objectToDeps, omit } from \"@dreamy-ui/react\";\r\nimport { cloneElement, forwardRef, useMemo, useRef } from \"react\";\r\nimport { image } from \"styled-system/recipes\";\r\nimport type { SystemProperties } from \"styled-system/types\";\r\nimport { Box } from \"./box\";\r\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\r\n\r\nexport interface ImageProps extends HTMLDreamyProps<\"img\">, SystemProperties {\r\n    /**\r\n     * Fallback image `src` to show if image fails.\r\n     */\r\n    fallbackSrc?: string;\r\n    /**\r\n     * If `true`, image will zoom in on hover\r\n     *\r\n     * @default false\r\n     */\r\n    zoomOnHover?: boolean;\r\n    /**\r\n     * If `true`, 2nd image will be placed behind with a blur effect\r\n     *\r\n     * @default false\r\n     */\r\n    blurShadow?: boolean;\r\n}\r\n\r\nconst StyledImage = dreamy(\"img\", image);\r\n\r\n/**\r\n * Native image with useful helpers.\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/image\r\n */\r\nexport const Image = forwardRef<HTMLImageElement, ImageProps>(function Image(props, ref) {\r\n    const {\r\n        fallbackSrc,\r\n        src,\r\n        srcSet,\r\n        loading,\r\n        crossOrigin,\r\n        referrerPolicy,\r\n        zoomOnHover,\r\n        blurShadow,\r\n        ...rest\r\n    } = props;\r\n\r\n    const hasErrored = useRef(false);\r\n\r\n    // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\r\n    const shared = useMemo(() => {\r\n        return {\r\n            ref,\r\n            \"data-zoomed\": zoomOnHover,\r\n            ...omit(rest, [\"onError\", \"onLoad\"])\r\n        };\r\n    }, [zoomOnHover, ref, ...objectToDeps(rest)]);\r\n\r\n    const img = useMemo(\r\n        () => (\r\n            <StyledImage\r\n                src={src}\r\n                srcSet={srcSet}\r\n                crossOrigin={crossOrigin}\r\n                loading={loading}\r\n                referrerPolicy={referrerPolicy}\r\n                {...shared}\r\n                onError={callAllHandlers((e: any) => {\r\n                    if (fallbackSrc && !hasErrored.current) {\r\n                        hasErrored.current = true;\r\n                        e.target.src = fallbackSrc;\r\n                    }\r\n                }, rest.onError)}\r\n            />\r\n        ),\r\n        [shared, src, srcSet, crossOrigin, loading, referrerPolicy, rest.onError, fallbackSrc]\r\n    );\r\n\r\n    const zoomed = useMemo(() => {\r\n        if (!zoomOnHover) return null;\r\n\r\n        return (\r\n            <Box\r\n                as={\"div\"}\r\n                data-part={\"wrapper-zoomed\"}\r\n                {...shared}\r\n            >\r\n                {img}\r\n            </Box>\r\n        );\r\n    }, [img, zoomOnHover, shared]);\r\n\r\n    if (blurShadow || zoomOnHover) {\r\n        return (\r\n            <Box\r\n                as={\"div\"}\r\n                data-part={\"wrapper\"}\r\n            >\r\n                {zoomOnHover ? zoomed : img}\r\n                {blurShadow &&\r\n                    cloneElement(img, {\r\n                        \"data-part\": \"blurred\",\r\n                        className: shared.className?.replace(\"dreamy-image\", \"\"),\r\n                        \"aria-hidden\": ariaAttr(true)\r\n                    })}\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    return img;\r\n});\r\n"
  },
  "component": "Image",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeId": "image"
}