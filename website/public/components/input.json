{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./flex"
  ],
  "id": "input",
  "file": {
    "name": "input.tsx",
    "content": "\"use client\";\r\n\r\nimport {\r\n    InputGroupProvider,\r\n    callAllHandlers,\r\n    copyObjectWithoutKeys,\r\n    useField,\r\n    useInputGroup\r\n} from \"@dreamy-ui/react\";\r\nimport type React from \"react\";\r\nimport { forwardRef, useMemo } from \"react\";\r\nimport { splitCssProps } from \"styled-system/jsx\";\r\nimport { type InputVariantProps, input } from \"styled-system/recipes\";\r\nimport { Box, type BoxProps } from \"./box\";\r\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\r\nimport { Flex, type FlexProps } from \"./flex\";\r\n\r\nexport interface UserFeedbackProps {\r\n    /**\r\n     * If `true`, the form control will be required. This has 2 side effects:\r\n     * - The `FormLabel` will show a required indicator\r\n     * - The form element (e.g, Input) will have `aria-required` set to `true`\r\n     *\r\n     * @default false\r\n     */\r\n    isRequired?: boolean;\r\n    /**\r\n     * If `true`, the form control will be disabled. This has 2 side effects:\r\n     * - The `FormLabel` will have `data-disabled` attribute\r\n     * - The form element (e.g, Input) will be disabled\r\n     *\r\n     * @default false\r\n     */\r\n    isDisabled?: boolean;\r\n    /**\r\n     * If `true`, the form control will be invalid. This has 2 side effects:\r\n     * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\r\n     * - The form element (e.g, Input) will have `aria-invalid` set to `true`\r\n     *\r\n     * @default false\r\n     */\r\n    isInvalid?: boolean;\r\n    /**\r\n     * If `true`, the form control will be readonly\r\n     *\r\n     * @default false\r\n     */\r\n    isReadOnly?: boolean;\r\n}\r\n\r\nexport interface InputProps extends HTMLDreamyProps<\"input\">, InputVariantProps, UserFeedbackProps {\r\n    /**\r\n     * The callback function that is called when the input value changes.\r\n     */\r\n    onChangeValue?: (value: string) => void;\r\n}\r\n\r\nconst StyledInput = dreamy(\"input\", input);\r\n\r\n/**\r\n * Input component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/input\r\n */\r\nexport const Input = forwardRef<HTMLInputElement, InputProps>((props, ref) => {\r\n    const inputGroup = useInputGroup();\r\n    const field = useField(\r\n        useMemo(() => {\r\n            return {\r\n                ...inputGroup,\r\n                ...props\r\n            };\r\n        }, [inputGroup, props])\r\n    );\r\n\r\n    return (\r\n        <StyledInput\r\n            ref={ref}\r\n            {...field}\r\n            onChange={callAllHandlers(props.onChange, (e: React.ChangeEvent<HTMLInputElement>) =>\r\n                props.onChangeValue?.(e.target.value)\r\n            )}\r\n        />\r\n    );\r\n});\r\n\r\ninterface InputGroupProviderContext extends InputVariantProps, UserFeedbackProps {}\r\n\r\nexport interface InputGroupProps extends InputGroupProviderContext, BoxProps {}\r\n\r\nexport const InputGroup = forwardRef<HTMLDivElement, InputGroupProps>(\r\n    function InputGroup(props, ref) {\r\n        const [cssProps, rest] = splitCssProps(props);\r\n\r\n        return (\r\n            <InputGroupProvider value={copyObjectWithoutKeys(rest, [\"children\"])}>\r\n                <Box\r\n                    data-input-group={\"true\"}\r\n                    ref={ref}\r\n                    {...cssProps}\r\n                >\r\n                    {props.children}\r\n                </Box>\r\n            </InputGroupProvider>\r\n        );\r\n    }\r\n);\r\n\r\nexport interface InputAddonProps extends FlexProps {}\r\n\r\nconst InputAddon = forwardRef<HTMLDivElement, InputAddonProps>(function InputAddon(props, ref) {\r\n    return (\r\n        <Flex\r\n            ref={ref}\r\n            style={{\r\n                position: \"absolute\",\r\n                top: \"50%\",\r\n                transform: \"translateY(-50%)\",\r\n                flex: \"0 0 auto\",\r\n                width: \"2.5rem\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                whiteSpace: \"nowrap\"\r\n            }}\r\n            {...props}\r\n        />\r\n    );\r\n});\r\n\r\nexport const InputLeftAddon = forwardRef<HTMLDivElement, InputAddonProps>(\r\n    function InputLeftAddon(props, ref) {\r\n        return (\r\n            <InputAddon\r\n                ref={ref}\r\n                left={0}\r\n                {...props}\r\n            />\r\n        );\r\n    }\r\n);\r\n\r\nexport const InputRightAddon = forwardRef<HTMLDivElement, InputAddonProps>(\r\n    function InputRightAddon(props, ref) {\r\n        return (\r\n            <InputAddon\r\n                ref={ref}\r\n                right={0}\r\n                {...props}\r\n            />\r\n        );\r\n    }\r\n);\r\n"
  },
  "component": "Input",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "input"
  ]
}