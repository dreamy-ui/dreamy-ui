{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./flex"
  ],
  "id": "input",
  "file": {
    "name": "input.tsx",
    "content": "\"use client\";\n\nimport {\n    InputGroupProvider,\n    callAllHandlers,\n    copyObjectWithoutKeys,\n    useField,\n    useInputGroup\n} from \"@dreamy-ui/react\";\nimport type React from \"react\";\nimport { forwardRef, useMemo } from \"react\";\nimport { splitCssProps } from \"styled-system/jsx\";\nimport { type InputVariantProps, input } from \"styled-system/recipes\";\nimport { Box, type BoxProps } from \"./box\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\nimport { Flex, type FlexProps } from \"./flex\";\n\nexport interface UserFeedbackProps {\n    /**\n     * If `true`, the form control will be required. This has 2 side effects:\n     * - The `FormLabel` will show a required indicator\n     * - The form element (e.g, Input) will have `aria-required` set to `true`\n     *\n     * @default false\n     */\n    isRequired?: boolean;\n    /**\n     * If `true`, the form control will be disabled. This has 2 side effects:\n     * - The `FormLabel` will have `data-disabled` attribute\n     * - The form element (e.g, Input) will be disabled\n     *\n     * @default false\n     */\n    isDisabled?: boolean;\n    /**\n     * If `true`, the form control will be invalid. This has 2 side effects:\n     * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n     * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n     *\n     * @default false\n     */\n    isInvalid?: boolean;\n    /**\n     * If `true`, the form control will be readonly\n     *\n     * @default false\n     */\n    isReadOnly?: boolean;\n}\n\nexport interface InputProps extends HTMLDreamyProps<\"input\">, InputVariantProps, UserFeedbackProps {\n    /**\n     * The callback function that is called when the input value changes.\n     */\n    onChangeValue?: (value: string) => void;\n}\n\nconst StyledInput = dreamy(\"input\", input);\n\n/**\n * Input component\n *\n * @See Docs https://dreamy-ui.com/docs/components/input\n */\nexport const Input = forwardRef<HTMLInputElement, InputProps>((props, ref) => {\n    const inputGroup = useInputGroup();\n    const field = useField(\n        useMemo(() => {\n            return {\n                ...inputGroup,\n                ...props\n            };\n        }, [inputGroup, props])\n    );\n\n    return (\n        <StyledInput\n            ref={ref}\n            {...field}\n            onChange={callAllHandlers(props.onChange, (e: React.ChangeEvent<HTMLInputElement>) =>\n                props.onChangeValue?.(e.target.value)\n            )}\n        />\n    );\n});\n\ninterface InputGroupProviderContext extends InputVariantProps, UserFeedbackProps {}\n\nexport interface InputGroupProps extends InputGroupProviderContext, BoxProps {}\n\nexport const InputGroup = forwardRef<HTMLDivElement, InputGroupProps>(\n    function InputGroup(props, ref) {\n        const [cssProps, rest] = splitCssProps(props);\n\n        return (\n            <InputGroupProvider value={copyObjectWithoutKeys(rest, [\"children\"])}>\n                <Box\n                    data-input-group={\"true\"}\n                    ref={ref}\n                    {...cssProps}\n                >\n                    {props.children}\n                </Box>\n            </InputGroupProvider>\n        );\n    }\n);\n\nexport interface InputAddonProps extends FlexProps {}\n\nconst InputAddon = forwardRef<HTMLDivElement, InputAddonProps>(function InputAddon(props, ref) {\n    return (\n        <Flex\n            ref={ref}\n            style={{\n                position: \"absolute\",\n                top: \"50%\",\n                transform: \"translateY(-50%)\",\n                flex: \"0 0 auto\",\n                width: \"2.5rem\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                whiteSpace: \"nowrap\"\n            }}\n            {...props}\n        />\n    );\n});\n\nexport const InputLeftAddon = forwardRef<HTMLDivElement, InputAddonProps>(\n    function InputLeftAddon(props, ref) {\n        return (\n            <InputAddon\n                ref={ref}\n                left={0}\n                {...props}\n            />\n        );\n    }\n);\n\nexport const InputRightAddon = forwardRef<HTMLDivElement, InputAddonProps>(\n    function InputRightAddon(props, ref) {\n        return (\n            <InputAddon\n                ref={ref}\n                right={0}\n                {...props}\n            />\n        );\n    }\n);\n"
  },
  "component": "Input",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "input"
  ]
}