{
  "type": "component",
  "fileDependencies": [
    "./alert",
    "./close-button",
    "./factory",
    "./icon",
    "./spinner",
    "./text"
  ],
  "id": "toast",
  "file": {
    "name": "toast.tsx",
    "content": "\"use client\";\n\nimport { TRANSITION_EASINGS, type Toast, dataAttr, useToast } from \"@dreamy-ui/react\";\nimport { isValidMotionProp, m } from \"motion/react\";\nimport { useCallback } from \"react\";\nimport { isCssProperty } from \"styled-system/jsx\";\nimport { toast } from \"styled-system/recipes\";\nimport { useStatusIcon } from \"./alert\";\nimport { CloseButton } from \"./close-button\";\nimport { type Status, dreamy } from \"./factory\";\nimport { Icon } from \"./icon\";\nimport { Spinner } from \"./spinner\";\nimport { Text } from \"./text\";\n\nconst StyledToast = dreamy(m.div, toast, {\n    shouldForwardProp: (prop, variantKeys) =>\n        isValidMotionProp(prop) || (!variantKeys.includes(prop) && !isCssProperty(prop))\n});\n\nfunction ToastIcon({ status }: { status: Status }) {\n    const statusIcon = useStatusIcon(status);\n    return (\n        <Icon\n            role=\"img\"\n            data-part={\"icon\"}\n            asChild\n        >\n            {statusIcon}\n        </Icon>\n    );\n}\n\nexport function ToastComponent({ toast }: { toast: Toast }) {\n    const { removeToast } = useToast();\n\n    const handleClose = useCallback(() => {\n        removeToast(toast.id);\n    }, [removeToast, toast.id]);\n\n    if (toast.render) {\n        return (\n            <m.div\n                style={{\n                    zIndex: \"var(--z-index-toast)\",\n                    pointerEvents: \"auto\"\n                }}\n                {...{\n                    layout: \"position\",\n                    layoutId: toast.id,\n                    initial: { opacity: 0, scale: 0.95 },\n                    animate: { opacity: 1, scale: 1 },\n                    exit: { opacity: 0, scale: 0.95 },\n                    transition: {\n                        duration: 0.3,\n                        ease: TRANSITION_EASINGS.easeInOut\n                    }\n                }}\n                {...(toast.containerProps as any)}\n            >\n                {toast.render(toast)}\n            </m.div>\n        );\n    }\n\n    return (\n        <StyledToast\n            {...{\n                layout: true,\n                layoutId: toast.id,\n                initial: { opacity: 0, scale: 0.95 },\n                animate: { opacity: 1, scale: 1 },\n                exit: { opacity: 0, scale: 0.95 },\n                transition: {\n                    duration: 0.3,\n                    ease: TRANSITION_EASINGS.easeInOut\n                }\n            }}\n            key={`${toast.id}-toast`}\n            id={toast.id}\n            data-status={toast.status}\n            data-variant={\"default\"}\n            data-closable={dataAttr(toast.isClosable)}\n            {...(toast.containerProps as any)}\n        >\n            <m.div\n                layout=\"position\"\n                data-part={\"container\"}\n            >\n                <Text\n                    data-part={\"title\"}\n                    as={\"h4\"}\n                >\n                    {toast.status === \"loading\" ? (\n                        <Spinner\n                            color={\"info\"}\n                            size={\"sm\"}\n                        />\n                    ) : (\n                        <ToastIcon status={toast.status} />\n                    )}\n                    {toast.title}\n                </Text>\n                {toast.description && <Text data-part={\"description\"}>{toast.description}</Text>}\n            </m.div>\n            {toast.rightContent}\n            {toast.isClosable && (\n                <CloseButton\n                    data-part={\"close\"}\n                    size={\"xs\"}\n                    onClick={handleClose}\n                />\n            )}\n        </StyledToast>\n    );\n}\n"
  },
  "component": "Toast",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "toast"
  ]
}