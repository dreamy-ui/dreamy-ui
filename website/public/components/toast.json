{
  "type": "component",
  "fileDependencies": [
    "./alert",
    "./close-button",
    "./factory",
    "./icon",
    "./spinner",
    "./text"
  ],
  "id": "toast",
  "file": {
    "name": "toast.tsx",
    "content": "import { TRANSITION_EASINGS, type Toast, dataAttr, useToast } from \"@dreamy-ui/react\";\r\nimport { isValidMotionProp, m } from \"motion/react\";\r\nimport { useCallback } from \"react\";\r\nimport { isCssProperty } from \"styled-system/jsx\";\r\nimport { toast } from \"styled-system/recipes\";\r\nimport { useStatusIcon } from \"./alert\";\r\nimport { CloseButton } from \"./close-button\";\r\nimport { type Status, dreamy } from \"./factory\";\r\nimport { Icon } from \"./icon\";\r\nimport { Spinner } from \"./spinner\";\r\nimport { Text } from \"./text\";\r\n\r\nconst StyledToast = dreamy(m.div, toast, {\r\n    shouldForwardProp: (prop, variantKeys) =>\r\n        isValidMotionProp(prop) || (!variantKeys.includes(prop) && !isCssProperty(prop))\r\n});\r\n\r\nfunction ToastIcon({ status }: { status: Status }) {\r\n    const statusIcon = useStatusIcon(status);\r\n    return (\r\n        <Icon\r\n            role=\"img\"\r\n            data-part={\"icon\"}\r\n            asChild\r\n        >\r\n            {statusIcon}\r\n        </Icon>\r\n    );\r\n}\r\n\r\nexport function ToastComponent({ toast }: { toast: Toast }) {\r\n    const { removeToast } = useToast();\r\n\r\n    const handleClose = useCallback(() => {\r\n        removeToast(toast.id);\r\n    }, [removeToast, toast.id]);\r\n\r\n    if (toast.render) {\r\n        return (\r\n            <m.div\r\n                style={{\r\n                    zIndex: \"var(--z-index-toast)\",\r\n                    pointerEvents: \"auto\"\r\n                }}\r\n                {...{\r\n                    layout: \"position\",\r\n                    layoutId: toast.id,\r\n                    initial: { opacity: 0, scale: 0.95 },\r\n                    animate: { opacity: 1, scale: 1 },\r\n                    exit: { opacity: 0, scale: 0.95 },\r\n                    transition: {\r\n                        duration: 0.3,\r\n                        ease: TRANSITION_EASINGS.easeInOut\r\n                    }\r\n                }}\r\n                {...(toast.containerProps as any)}\r\n            >\r\n                {toast.render(toast)}\r\n            </m.div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <StyledToast\r\n            {...{\r\n                layout: true,\r\n                layoutId: toast.id,\r\n                initial: { opacity: 0, scale: 0.95 },\r\n                animate: { opacity: 1, scale: 1 },\r\n                exit: { opacity: 0, scale: 0.95 },\r\n                transition: {\r\n                    duration: 0.3,\r\n                    ease: TRANSITION_EASINGS.easeInOut\r\n                }\r\n            }}\r\n            key={`${toast.id}-toast`}\r\n            id={toast.id}\r\n            data-status={toast.status}\r\n            data-variant={\"default\"}\r\n            data-closable={dataAttr(toast.isClosable)}\r\n            {...(toast.containerProps as any)}\r\n        >\r\n            <m.div\r\n                layout=\"position\"\r\n                data-part={\"container\"}\r\n            >\r\n                <Text\r\n                    data-part={\"title\"}\r\n                    as={\"h4\"}\r\n                >\r\n                    {toast.status === \"loading\" ? (\r\n                        <Spinner\r\n                            color={\"info\"}\r\n                            size={\"sm\"}\r\n                        />\r\n                    ) : (\r\n                        <ToastIcon status={toast.status} />\r\n                    )}\r\n                    {toast.title}\r\n                </Text>\r\n                {toast.description && <Text data-part={\"description\"}>{toast.description}</Text>}\r\n            </m.div>\r\n            {toast.rightContent}\r\n            {toast.isClosable && (\r\n                <CloseButton\r\n                    data-part={\"close\"}\r\n                    size={\"xs\"}\r\n                    onClick={handleClose}\r\n                />\r\n            )}\r\n        </StyledToast>\r\n    );\r\n}\r\n"
  },
  "component": "Toast",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeId": "toast"
}