{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory"
  ],
  "id": "progress",
  "file": {
    "name": "progress.tsx",
    "content": "import { forwardRef, useMemo } from \"react\";\r\nimport { type ProgressVariantProps, progress } from \"styled-system/recipes\";\r\nimport { Box } from \"./box\";\r\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\r\n\r\ninterface ProgressFilledTrackProps extends HTMLDreamyProps<\"div\">, GetProgressPropsOptions {}\r\n\r\nconst ProgressFilledTrack = forwardRef<HTMLDivElement, ProgressFilledTrackProps>((props, ref) => {\r\n    const { min, max, value, isIndeterminate, role, ...rest } = props;\r\n    const progress = useMemo(\r\n        () => getProgressProps({ value, min, max, isIndeterminate, role }),\r\n        [value, min, max, isIndeterminate, role]\r\n    );\r\n\r\n    return (\r\n        <Box\r\n            data-part=\"filled-track\"\r\n            ref={ref}\r\n            {...rest}\r\n            style={{ width: `${progress.percent}%`, ...rest.style }}\r\n            {...progress.bind}\r\n        />\r\n    );\r\n});\r\n\r\ninterface ProgressOptions {\r\n    /**\r\n     * The `value` of the progress indicator.\r\n     * If `undefined` the progress bar will be in `indeterminate` state\r\n     */\r\n    value?: number;\r\n    /**\r\n     * The minimum value of the progress\r\n     * @default 0\r\n     */\r\n    min?: number;\r\n    /**\r\n     * The maximum value of the progress\r\n     * @default 100\r\n     */\r\n    max?: number;\r\n    /**\r\n     * The speed of indeterminate progress\r\n     * @default 1s\r\n     */\r\n    speed?: string;\r\n}\r\n\r\nexport interface ProgressProps\r\n    extends ProgressOptions,\r\n        ProgressVariantProps,\r\n        HTMLDreamyProps<\"div\"> {\r\n    \"aria-label\": string;\r\n}\r\n\r\nconst StyledProgress = dreamy(\"div\", progress);\r\n\r\n/**\r\n * Progress component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/progress\r\n */\r\nexport const Progress = forwardRef<HTMLDivElement, ProgressProps>((props, ref) => {\r\n    const {\r\n        value,\r\n        min = 0,\r\n        max = 100,\r\n        children,\r\n        \"aria-label\": ariaLabel,\r\n        \"aria-labelledby\": ariaLabelledBy,\r\n        \"aria-valuetext\": ariaValueText,\r\n        title,\r\n        role,\r\n        style,\r\n        speed = \"1s\",\r\n        ...rest\r\n    } = props;\r\n\r\n    return (\r\n        <StyledProgress\r\n            ref={ref}\r\n            {...rest}\r\n            data-speed={speed}\r\n            style={{\r\n                // @ts-expect-error\r\n                \"--speed\": speed,\r\n                ...style\r\n            }}\r\n        >\r\n            <ProgressFilledTrack\r\n                aria-label={ariaLabel}\r\n                aria-labelledby={ariaLabelledBy}\r\n                aria-valuetext={ariaValueText}\r\n                min={min}\r\n                max={max}\r\n                value={value}\r\n                title={title}\r\n                role={role}\r\n            />\r\n            {children}\r\n        </StyledProgress>\r\n    );\r\n});\r\n\r\nProgress.displayName = \"Progress\";\r\n\r\nfunction valueToPercent(value: number, min: number, max: number) {\r\n    return ((value - min) * 100) / (max - min);\r\n}\r\n\r\ninterface GetProgressPropsOptions {\r\n    value?: number;\r\n    min: number;\r\n    max: number;\r\n    valueText?: string;\r\n    getValueText?(value: number, percent: number): string;\r\n    isIndeterminate?: boolean;\r\n    role?: React.AriaRole;\r\n}\r\n\r\nfunction getProgressProps(options: GetProgressPropsOptions) {\r\n    const {\r\n        value = 0,\r\n        min,\r\n        max,\r\n        valueText,\r\n        getValueText,\r\n        isIndeterminate,\r\n        role = \"progressbar\"\r\n    } = options;\r\n\r\n    const percent = valueToPercent(value, min, max);\r\n\r\n    const getAriaValueText = () => {\r\n        if (value == null) return undefined;\r\n        return typeof getValueText === \"function\" ? getValueText(value, percent) : valueText;\r\n    };\r\n\r\n    return {\r\n        bind: {\r\n            \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\r\n            \"aria-valuemax\": max,\r\n            \"aria-valuemin\": min,\r\n            \"aria-valuenow\": isIndeterminate ? undefined : value,\r\n            \"aria-valuetext\": getAriaValueText(),\r\n            role\r\n        },\r\n        percent,\r\n        value\r\n    };\r\n}\r\n"
  },
  "component": "Progress",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeId": "progress"
}