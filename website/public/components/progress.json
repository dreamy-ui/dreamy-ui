{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory"
  ],
  "id": "progress",
  "file": {
    "name": "progress.tsx",
    "content": "import { forwardRef, useMemo } from \"react\";\nimport { type ProgressVariantProps, progress } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\n\ninterface ProgressFilledTrackProps extends HTMLDreamyProps<\"div\">, GetProgressPropsOptions {}\n\nconst ProgressFilledTrack = forwardRef<HTMLDivElement, ProgressFilledTrackProps>((props, ref) => {\n    const { min, max, value, isIndeterminate, role, ...rest } = props;\n    const progress = useMemo(\n        () => getProgressProps({ value, min, max, isIndeterminate, role }),\n        [value, min, max, isIndeterminate, role]\n    );\n\n    return (\n        <Box\n            data-part=\"filled-track\"\n            ref={ref}\n            {...rest}\n            style={{ width: `${progress.percent}%`, ...rest.style }}\n            {...progress.bind}\n        />\n    );\n});\n\ninterface ProgressOptions {\n    /**\n     * The `value` of the progress indicator.\n     * If `undefined` the progress bar will be in `indeterminate` state\n     */\n    value?: number;\n    /**\n     * The minimum value of the progress\n     * @default 0\n     */\n    min?: number;\n    /**\n     * The maximum value of the progress\n     * @default 100\n     */\n    max?: number;\n    /**\n     * The speed of indeterminate progress\n     * @default 1s\n     */\n    speed?: string;\n}\n\nexport interface ProgressProps\n    extends ProgressOptions,\n        ProgressVariantProps,\n        HTMLDreamyProps<\"div\"> {\n    \"aria-label\": string;\n}\n\nconst StyledProgress = dreamy(\"div\", progress);\n\n/**\n * Progress component\n *\n * @See Docs https://dreamy-ui.com/docs/components/progress\n */\nexport const Progress = forwardRef<HTMLDivElement, ProgressProps>((props, ref) => {\n    const {\n        value,\n        min = 0,\n        max = 100,\n        children,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-valuetext\": ariaValueText,\n        title,\n        role,\n        style,\n        speed = \"1s\",\n        ...rest\n    } = props;\n\n    return (\n        <StyledProgress\n            ref={ref}\n            {...rest}\n            data-speed={speed}\n            style={{\n                // @ts-expect-error\n                \"--speed\": speed,\n                ...style\n            }}\n        >\n            <ProgressFilledTrack\n                aria-label={ariaLabel}\n                aria-labelledby={ariaLabelledBy}\n                aria-valuetext={ariaValueText}\n                min={min}\n                max={max}\n                value={value}\n                title={title}\n                role={role}\n            />\n            {children}\n        </StyledProgress>\n    );\n});\n\nProgress.displayName = \"Progress\";\n\nfunction valueToPercent(value: number, min: number, max: number) {\n    return ((value - min) * 100) / (max - min);\n}\n\ninterface GetProgressPropsOptions {\n    value?: number;\n    min: number;\n    max: number;\n    valueText?: string;\n    getValueText?(value: number, percent: number): string;\n    isIndeterminate?: boolean;\n    role?: React.AriaRole;\n}\n\nfunction getProgressProps(options: GetProgressPropsOptions) {\n    const {\n        value = 0,\n        min,\n        max,\n        valueText,\n        getValueText,\n        isIndeterminate,\n        role = \"progressbar\"\n    } = options;\n\n    const percent = valueToPercent(value, min, max);\n\n    const getAriaValueText = () => {\n        if (value == null) return undefined;\n        return typeof getValueText === \"function\" ? getValueText(value, percent) : valueText;\n    };\n\n    return {\n        bind: {\n            \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n            \"aria-valuemax\": max,\n            \"aria-valuemin\": min,\n            \"aria-valuenow\": isIndeterminate ? undefined : value,\n            \"aria-valuetext\": getAriaValueText(),\n            role\n        },\n        percent,\n        value\n    };\n}\n"
  },
  "component": "Progress",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "progress"
  ]
}