{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory"
  ],
  "id": "tooltip",
  "file": {
    "name": "tooltip.tsx",
    "content": "import {\n    Portal,\n    type PortalProps,\n    type UseTooltipProps,\n    omit,\n    pick,\n    useMotionVariants,\n    useTooltip\n} from \"@dreamy-ui/react\";\nimport { AnimatePresence, type HTMLMotionProps, isValidMotionProp, m } from \"motion/react\";\nimport { Children, Fragment, cloneElement, forwardRef, useMemo } from \"react\";\nimport { isCssProperty, styled } from \"styled-system/jsx\";\nimport { tooltip } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport type { HTMLDreamyProps } from \"./factory\";\n\nexport interface TooltipProps\n    extends Omit<HTMLDreamyProps<\"div\">, \"direction\" | \"offset\" | \"content\">,\n        Partial<UseTooltipProps> {\n    /**\n     * The React component to use as the\n     * trigger for the tooltip\n     */\n    children: React.ReactNode;\n    /**\n     * The label of the tooltip\n     */\n    content?: React.ReactNode;\n    /**\n     * The accessible, human friendly label to use for\n     * screen readers.\n     *\n     * If passed, tooltip will show the content `label`\n     * but expose only `aria-label` to assistive technologies\n     */\n    \"aria-label\"?: string;\n    /**\n     * If `true`, the tooltip will wrap its children\n     * in a `<span/>` with `tabIndex=0`\n     * @default false\n     */\n    shouldWrapChildren?: boolean;\n    /**\n     * If `true`, the tooltip will show an arrow tip\n     * @default false\n     */\n    hasArrow?: boolean;\n    /**\n     * Props to be forwarded to the portal component\n     */\n    portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">;\n    /**\n     * If `true`, the tooltip will not be rendered inside a portal\n     * @default false\n     */\n    disablePortal?: boolean;\n    /**\n     * Props to be forwarded to the motion component\n     */\n    motionProps?: HTMLMotionProps<\"div\">;\n}\n\nconst StyledTooltip = styled(m.div, tooltip, {\n    shouldForwardProp: (prop, variantKeys) =>\n        isValidMotionProp(prop) || (!variantKeys.includes(prop) && !isCssProperty(prop))\n});\n\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs https://dreamy-ui.com/docs/components/tooltip\n */\nexport const Tooltip = forwardRef<HTMLDivElement, TooltipProps>((props, ref) => {\n    const {\n        children,\n        content,\n        shouldWrapChildren,\n        \"aria-label\": ariaLabel,\n        hasArrow = true,\n        isDisabled,\n        portalProps,\n        direction,\n        motionProps,\n        disablePortal = false,\n        ...rest\n    } = props;\n\n    const tooltip = useTooltip({ ...rest, direction: direction ?? \"ltr\" });\n\n    const shouldWrap = shouldWrapChildren || typeof children === \"string\";\n\n    const trigger = useMemo(() => {\n        if (shouldWrap) {\n            return (\n                <Box\n                    as={\"span\"}\n                    display=\"inline-block\"\n                    tabIndex={0}\n                    {...tooltip.getTriggerProps()}\n                >\n                    {children}\n                </Box>\n            );\n        }\n        /**\n         * Ensure tooltip has only one child node\n         */\n        const child = Children.only(children) as React.ReactElement & {\n            ref?: React.Ref<any>;\n        };\n        return cloneElement(child, tooltip.getTriggerProps(child.props as object, child.ref));\n    }, [shouldWrap, children, tooltip.getTriggerProps]);\n\n    const hasAriaLabel = !!ariaLabel;\n\n    const _tooltipProps = useMemo(\n        () => tooltip.getTooltipProps(undefined, ref),\n        [tooltip.getTooltipProps, ref]\n    );\n\n    const tooltipProps = useMemo(\n        () => (hasAriaLabel ? omit(_tooltipProps, [\"role\", \"id\"]) : _tooltipProps),\n        [hasAriaLabel, _tooltipProps]\n    );\n\n    const srOnlyProps = useMemo(() => pick(_tooltipProps, [\"role\", \"id\"]), [_tooltipProps]);\n\n    const {\n        tooltip: { default: variants }\n    } = useMotionVariants();\n\n    const PortalComponent = useMemo(() => (disablePortal ? Fragment : Portal), [disablePortal]);\n\n    /**\n     * If the `label` is empty, there's no point showing the tooltip.\n     * Let's simply return the children\n     */\n    if (!content) {\n        return <>{children}</>;\n    }\n\n    return (\n        <>\n            {trigger}\n            <AnimatePresence>\n                {tooltip.isOpen && !isDisabled && (\n                    <PortalComponent {...(disablePortal ? {} : (portalProps as any))}>\n                        <Box {...tooltip.getTooltipPositionerProps()}>\n                            <StyledTooltip\n                                variants={variants}\n                                initial=\"exit\"\n                                animate=\"initial\"\n                                exit=\"exit\"\n                                {...motionProps}\n                                {...(tooltipProps as any)}\n                            >\n                                {content}\n                                {hasAriaLabel && (\n                                    <Box\n                                        as={\"span\"}\n                                        srOnly\n                                        {...srOnlyProps}\n                                    >\n                                        {ariaLabel}\n                                    </Box>\n                                )}\n                                {hasArrow && (\n                                    <Box data-popper-arrow>\n                                        <Box data-popper-arrow-inner />\n                                    </Box>\n                                )}\n                            </StyledTooltip>\n                        </Box>\n                    </PortalComponent>\n                )}\n            </AnimatePresence>\n        </>\n    );\n});\n\nTooltip.displayName = \"Tooltip\";\n"
  },
  "component": "Tooltip",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "tooltip"
  ]
}