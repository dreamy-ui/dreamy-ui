{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory"
  ],
  "id": "tooltip",
  "file": {
    "name": "tooltip.tsx",
    "content": "import {\r\n    Portal,\r\n    type PortalProps,\r\n    type UseTooltipProps,\r\n    omit,\r\n    pick,\r\n    useMotionVariants,\r\n    useTooltip\r\n} from \"@dreamy-ui/react\";\r\nimport { AnimatePresence, type HTMLMotionProps, isValidMotionProp, m } from \"motion/react\";\r\nimport { Children, Fragment, cloneElement, forwardRef, useMemo } from \"react\";\r\nimport { isCssProperty, styled } from \"styled-system/jsx\";\r\nimport { tooltip } from \"styled-system/recipes\";\r\nimport { Box } from \"./box\";\r\nimport type { HTMLDreamyProps } from \"./factory\";\r\n\r\nexport interface TooltipProps\r\n    extends Omit<HTMLDreamyProps<\"div\">, \"direction\" | \"offset\" | \"content\">,\r\n        Partial<UseTooltipProps> {\r\n    /**\r\n     * The React component to use as the\r\n     * trigger for the tooltip\r\n     */\r\n    children: React.ReactNode;\r\n    /**\r\n     * The label of the tooltip\r\n     */\r\n    content?: React.ReactNode;\r\n    /**\r\n     * The accessible, human friendly label to use for\r\n     * screen readers.\r\n     *\r\n     * If passed, tooltip will show the content `label`\r\n     * but expose only `aria-label` to assistive technologies\r\n     */\r\n    \"aria-label\"?: string;\r\n    /**\r\n     * If `true`, the tooltip will wrap its children\r\n     * in a `<span/>` with `tabIndex=0`\r\n     * @default false\r\n     */\r\n    shouldWrapChildren?: boolean;\r\n    /**\r\n     * If `true`, the tooltip will show an arrow tip\r\n     * @default false\r\n     */\r\n    hasArrow?: boolean;\r\n    /**\r\n     * Props to be forwarded to the portal component\r\n     */\r\n    portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">;\r\n    /**\r\n     * If `true`, the tooltip will not be rendered inside a portal\r\n     * @default false\r\n     */\r\n    disablePortal?: boolean;\r\n    /**\r\n     * Props to be forwarded to the motion component\r\n     */\r\n    motionProps?: HTMLMotionProps<\"div\">;\r\n}\r\n\r\nconst StyledTooltip = styled(m.div, tooltip, {\r\n    shouldForwardProp: (prop, variantKeys) =>\r\n        isValidMotionProp(prop) || (!variantKeys.includes(prop) && !isCssProperty(prop))\r\n});\r\n\r\n/**\r\n * Tooltips display informative text when users hover, focus on, or tap an element.\r\n *\r\n * @see Docs https://dreamy-ui.com/docs/components/tooltip\r\n */\r\nexport const Tooltip = forwardRef<HTMLDivElement, TooltipProps>((props, ref) => {\r\n    const {\r\n        children,\r\n        content,\r\n        shouldWrapChildren,\r\n        \"aria-label\": ariaLabel,\r\n        hasArrow = true,\r\n        isDisabled,\r\n        portalProps,\r\n        direction,\r\n        motionProps,\r\n        disablePortal = false,\r\n        ...rest\r\n    } = props;\r\n\r\n    const tooltip = useTooltip({ ...rest, direction: direction ?? \"ltr\" });\r\n\r\n    const shouldWrap = shouldWrapChildren || typeof children === \"string\";\r\n\r\n    const trigger = useMemo(() => {\r\n        if (shouldWrap) {\r\n            return (\r\n                <Box\r\n                    as={\"span\"}\r\n                    display=\"inline-block\"\r\n                    tabIndex={0}\r\n                    {...tooltip.getTriggerProps()}\r\n                >\r\n                    {children}\r\n                </Box>\r\n            );\r\n        }\r\n        /**\r\n         * Ensure tooltip has only one child node\r\n         */\r\n        const child = Children.only(children) as React.ReactElement & {\r\n            ref?: React.Ref<any>;\r\n        };\r\n        return cloneElement(child, tooltip.getTriggerProps(child.props as object, child.ref));\r\n    }, [shouldWrap, children, tooltip.getTriggerProps]);\r\n\r\n    const hasAriaLabel = !!ariaLabel;\r\n\r\n    const _tooltipProps = useMemo(\r\n        () => tooltip.getTooltipProps(undefined, ref),\r\n        [tooltip.getTooltipProps, ref]\r\n    );\r\n\r\n    const tooltipProps = useMemo(\r\n        () => (hasAriaLabel ? omit(_tooltipProps, [\"role\", \"id\"]) : _tooltipProps),\r\n        [hasAriaLabel, _tooltipProps]\r\n    );\r\n\r\n    const srOnlyProps = useMemo(() => pick(_tooltipProps, [\"role\", \"id\"]), [_tooltipProps]);\r\n\r\n    const {\r\n        tooltip: { default: variants }\r\n    } = useMotionVariants();\r\n\r\n    const PortalComponent = useMemo(() => (disablePortal ? Fragment : Portal), [disablePortal]);\r\n\r\n    /**\r\n     * If the `label` is empty, there's no point showing the tooltip.\r\n     * Let's simply return the children\r\n     */\r\n    if (!content) {\r\n        return <>{children}</>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {trigger}\r\n            <AnimatePresence>\r\n                {tooltip.isOpen && !isDisabled && (\r\n                    <PortalComponent {...(disablePortal ? {} : (portalProps as any))}>\r\n                        <Box {...tooltip.getTooltipPositionerProps()}>\r\n                            <StyledTooltip\r\n                                variants={variants}\r\n                                initial=\"exit\"\r\n                                animate=\"initial\"\r\n                                exit=\"exit\"\r\n                                {...motionProps}\r\n                                {...(tooltipProps as any)}\r\n                            >\r\n                                {content}\r\n                                {hasAriaLabel && (\r\n                                    <Box\r\n                                        as={\"span\"}\r\n                                        srOnly\r\n                                        {...srOnlyProps}\r\n                                    >\r\n                                        {ariaLabel}\r\n                                    </Box>\r\n                                )}\r\n                                {hasArrow && (\r\n                                    <Box data-popper-arrow>\r\n                                        <Box data-popper-arrow-inner />\r\n                                    </Box>\r\n                                )}\r\n                            </StyledTooltip>\r\n                        </Box>\r\n                    </PortalComponent>\r\n                )}\r\n            </AnimatePresence>\r\n        </>\r\n    );\r\n});\r\n\r\nTooltip.displayName = \"Tooltip\";\r\n"
  },
  "component": "Tooltip",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "tooltip"
  ]
}