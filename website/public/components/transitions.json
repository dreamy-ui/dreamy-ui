{
  "type": "component",
  "fileDependencies": [
    "./motion"
  ],
  "id": "transitions",
  "file": {
    "name": "transitions.tsx",
    "content": "import {\r\n    TRANSITION_DEFAULTS,\r\n    type Variants,\r\n    type WithTransitionConfig,\r\n    useMotionVariants\r\n} from \"@dreamy-ui/react\";\r\nimport {\r\n    AnimatePresence,\r\n    type AnimatePresenceProps,\r\n    type HTMLMotionProps,\r\n    type Variants as _Variants\r\n} from \"motion/react\";\r\nimport { forwardRef, useMemo } from \"react\";\r\nimport { css, cx } from \"styled-system/css\";\r\nimport { MotionBox, type MotionBoxProps } from \"./motion\";\r\n\r\nexport interface CollapseOptions {\r\n    /**\r\n     * If `true`, the opacity of the content will be animated\r\n     * @default true\r\n     */\r\n    animateOpacity?: boolean;\r\n    /**\r\n     * The height you want the content in its collapsed state.\r\n     * @default 0\r\n     */\r\n    startingHeight?: number | string;\r\n    /**\r\n     * The height you want the content in its expanded state.\r\n     * @default \"auto\"\r\n     */\r\n    endingHeight?: number | string;\r\n    /**\r\n     * Props to pass to the AnimatePresence component\r\n     */\r\n    animatePresenceProps?: AnimatePresenceProps;\r\n}\r\n\r\nexport type ICollapse = CollapseProps;\r\n\r\nexport interface CollapseProps extends WithTransitionConfig<MotionBoxProps>, CollapseOptions {}\r\n\r\n/**\r\n * Collapse component.\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/transitions\r\n */\r\nexport const Collapse = forwardRef<HTMLDivElement, CollapseProps>((props, ref) => {\r\n    const {\r\n        in: isOpen,\r\n        unmountOnExit,\r\n        animateOpacity = true,\r\n        startingHeight = 0,\r\n        endingHeight = \"auto\",\r\n        style,\r\n        className,\r\n        transition,\r\n        transitionEnd,\r\n        animatePresenceProps,\r\n        ...rest\r\n    } = props;\r\n\r\n    const custom = useMemo(\r\n        () => ({\r\n            startingHeight,\r\n            endingHeight,\r\n            animateOpacity,\r\n            transition,\r\n            transitionEnd: {\r\n                enter: transitionEnd?.enter,\r\n                exit: unmountOnExit ? transitionEnd?.exit : transitionEnd?.exit\r\n            }\r\n        }),\r\n        [startingHeight, endingHeight, animateOpacity, transition, transitionEnd, unmountOnExit]\r\n    );\r\n\r\n    const {\r\n        collapse: { default: variants }\r\n    } = useMotionVariants();\r\n\r\n    const show = useMemo(() => (unmountOnExit ? isOpen : true), [unmountOnExit, isOpen]);\r\n    const animate = useMemo(\r\n        () => (isOpen || unmountOnExit ? \"initial\" : \"exit\"),\r\n        [isOpen, unmountOnExit]\r\n    );\r\n\r\n    return (\r\n        <AnimatePresence\r\n            initial={false}\r\n            custom={custom}\r\n            {...animatePresenceProps}\r\n        >\r\n            {show && (\r\n                <MotionBox\r\n                    ref={ref}\r\n                    custom={custom}\r\n                    variants={variants as _Variants}\r\n                    initial={unmountOnExit ? \"exit\" : false}\r\n                    animate={animate}\r\n                    exit=\"exit\"\r\n                    {...rest}\r\n                    className={cx(\r\n                        css({\r\n                            overflow: \"hidden\",\r\n                            display: \"block\"\r\n                        }),\r\n                        className\r\n                    )}\r\n                />\r\n            )}\r\n        </AnimatePresence>\r\n    );\r\n});\r\n\r\nCollapse.displayName = \"Collapse\";\r\n\r\ninterface ScaleOptions {\r\n    /**\r\n     * The initial scale of the element\r\n     * @default 0.95\r\n     */\r\n    initialScale?: number;\r\n    /**\r\n     * If `true`, the element will transition back to exit state\r\n     * @default true\r\n     */\r\n    reverse?: boolean;\r\n    /**\r\n     * Props to pass to the AnimatePresence component\r\n     */\r\n    animatePresenceProps?: AnimatePresenceProps;\r\n}\r\n\r\nconst variants: Variants<ScaleOptions> = {\r\n    exit: ({ reverse, initialScale, transition, transitionEnd }) => ({\r\n        opacity: 0,\r\n        ...(reverse\r\n            ? { scale: initialScale, transitionEnd: transitionEnd?.exit }\r\n            : { transitionEnd: { scale: initialScale, ...transitionEnd?.exit } }),\r\n        transition: transition?.exit ?? TRANSITION_DEFAULTS.exit\r\n    }),\r\n    enter: ({ transitionEnd, transition }) => ({\r\n        opacity: 1,\r\n        scale: 1,\r\n        transition: transition?.enter ?? TRANSITION_DEFAULTS.enter,\r\n        transitionEnd: transitionEnd?.enter\r\n    })\r\n};\r\n\r\nexport const ScaleConfig: HTMLMotionProps<\"div\"> = {\r\n    initial: \"exit\",\r\n    animate: \"enter\",\r\n    exit: \"exit\",\r\n    variants: variants as _Variants\r\n};\r\n\r\nexport interface ScaleProps extends ScaleOptions, WithTransitionConfig<MotionBoxProps> {}\r\n\r\nexport const Scale = forwardRef<HTMLDivElement, ScaleProps>(function Scale(props, ref) {\r\n    const {\r\n        unmountOnExit,\r\n        in: isOpen,\r\n        reverse = true,\r\n        initialScale = 0.95,\r\n        transition,\r\n        transitionEnd,\r\n        delay,\r\n        animatePresenceProps,\r\n        ...rest\r\n    } = props;\r\n\r\n    const show = unmountOnExit ? isOpen && unmountOnExit : true;\r\n    const animate = isOpen || unmountOnExit ? \"enter\" : \"exit\";\r\n\r\n    const custom = { initialScale, reverse, transition, transitionEnd, delay };\r\n\r\n    return (\r\n        <AnimatePresence\r\n            {...animatePresenceProps}\r\n            custom={custom}\r\n        >\r\n            {show && (\r\n                <MotionBox\r\n                    ref={ref}\r\n                    {...ScaleConfig}\r\n                    animate={animate}\r\n                    custom={custom}\r\n                    {...rest}\r\n                />\r\n            )}\r\n        </AnimatePresence>\r\n    );\r\n});\r\n\r\nScale.displayName = \"Scale\";\r\n"
  },
  "component": "Transitions",
  "hasRecipe": false,
  "hasPattern": false
}