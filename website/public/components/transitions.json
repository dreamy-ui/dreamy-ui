{
  "type": "component",
  "fileDependencies": [
    "./motion"
  ],
  "id": "transitions",
  "file": {
    "name": "transitions.tsx",
    "content": "import { type WithTransitionConfig, useMotionVariants } from \"@dreamy-ui/react\";\nimport {\n    AnimatePresence,\n    type AnimatePresenceProps,\n    type Variants as _Variants\n} from \"motion/react\";\nimport { forwardRef, useMemo } from \"react\";\nimport { css, cx } from \"styled-system/css\";\nimport { MotionBox, type MotionBoxProps } from \"./motion\";\n\nexport interface CollapseOptions {\n    /**\n     * If `true`, the opacity of the content will be animated\n     * @default true\n     */\n    animateOpacity?: boolean;\n    /**\n     * The height you want the content in its collapsed state.\n     * @default 0\n     */\n    startingHeight?: number | string;\n    /**\n     * The height you want the content in its expanded state.\n     * @default \"auto\"\n     */\n    endingHeight?: number | string;\n    /**\n     * Props to pass to the AnimatePresence component\n     */\n    animatePresenceProps?: AnimatePresenceProps;\n}\n\nexport type ICollapse = CollapseProps;\n\nexport interface CollapseProps extends WithTransitionConfig<MotionBoxProps>, CollapseOptions {}\n\n/**\n * Collapse component.\n *\n * @See Docs https://dreamy-ui.com/docs/components/transitions\n */\nexport const Collapse = forwardRef<HTMLDivElement, CollapseProps>((props, ref) => {\n    const {\n        in: isOpen,\n        unmountOnExit,\n        animateOpacity = true,\n        startingHeight = 0,\n        endingHeight = \"auto\",\n        style,\n        className,\n        transition,\n        transitionEnd,\n        animatePresenceProps,\n        ...rest\n    } = props;\n\n    const custom = useMemo(\n        () => ({\n            startingHeight,\n            endingHeight,\n            animateOpacity,\n            transition,\n            transitionEnd: {\n                enter: transitionEnd?.enter,\n                exit: unmountOnExit ? transitionEnd?.exit : transitionEnd?.exit\n            }\n        }),\n        [startingHeight, endingHeight, animateOpacity, transition, transitionEnd, unmountOnExit]\n    );\n\n    const {\n        collapse: { default: variants }\n    } = useMotionVariants();\n\n    const show = useMemo(() => (unmountOnExit ? isOpen : true), [unmountOnExit, isOpen]);\n    const animate = useMemo(\n        () => (isOpen || unmountOnExit ? \"initial\" : \"exit\"),\n        [isOpen, unmountOnExit]\n    );\n\n    return (\n        <AnimatePresence\n            initial={false}\n            custom={custom}\n            {...animatePresenceProps}\n        >\n            {show && (\n                <MotionBox\n                    ref={ref}\n                    custom={custom}\n                    variants={variants as _Variants}\n                    initial={unmountOnExit ? \"exit\" : false}\n                    animate={animate}\n                    exit=\"exit\"\n                    {...rest}\n                    className={cx(\n                        css({\n                            overflow: \"hidden\",\n                            display: \"block\"\n                        }),\n                        className\n                    )}\n                />\n            )}\n        </AnimatePresence>\n    );\n});\n\nCollapse.displayName = \"Collapse\";\n"
  },
  "component": "Transitions",
  "hasRecipe": false,
  "hasPattern": false
}