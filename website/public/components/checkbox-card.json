{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./checkbox",
    "./factory",
    "./text",
    "./visually-hidden"
  ],
  "id": "checkbox-card",
  "file": {
    "name": "checkbox-card.tsx",
    "content": "import { type UseCheckboxProps, createContext, useCheckbox } from \"@dreamy-ui/react\";\nimport { type ElementType, type ReactElement, cloneElement, forwardRef, useMemo } from \"react\";\nimport { type CheckboxCardVariantProps, checkboxCard } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { CheckboxIcon } from \"./checkbox\";\nimport { dreamy } from \"./factory\";\nimport { Text, type TextProps } from \"./text\";\nimport { VisuallyHiddenInput } from \"./visually-hidden\";\n\nexport const [CheckboxProvider, useCheckboxCardContext] = createContext<UseCheckboxProps>({\n    strict: false\n});\n\nexport interface CheckboxCardProps extends UseCheckboxProps, CheckboxCardVariantProps {\n    title?: string;\n    description?: string;\n    titleTag?: ElementType;\n    titleProps?: TextProps;\n    descriptionProps?: TextProps;\n}\n\nconst StyledCheckbox = dreamy(\"div\", checkboxCard);\n\n/**\n * CheckboxCard component\n *\n * @See Docs https://dreamy-ui.com/docs/components/checkbox-card\n */\nexport const CheckboxCard = forwardRef<HTMLInputElement, CheckboxCardProps>((props, ref) => {\n    const { title, description, titleTag = \"p\", titleProps, descriptionProps, ...rest } = props;\n    const {\n        children,\n        icon = <CheckboxIcon />,\n        isChecked,\n        isDisabled,\n        isInvalid,\n        getRootProps,\n        getWrapperProps,\n        getInputProps,\n        getIconProps,\n        getLabelProps\n    } = useCheckbox({ ...rest, isCard: true, ref });\n\n    const clonedIcon = useMemo(() => {\n        return typeof icon === \"function\"\n            ? icon(getIconProps() as any)\n            : cloneElement(icon as ReactElement, getIconProps());\n    }, [getIconProps, icon]);\n\n    const ctx = useMemo(() => {\n        return {\n            children,\n            icon,\n            isChecked,\n            isDisabled,\n            isInvalid,\n            getRootProps,\n            getWrapperProps,\n            getInputProps,\n            getIconProps,\n            getLabelProps\n        };\n    }, [\n        children,\n        icon,\n        isChecked,\n        isDisabled,\n        isInvalid,\n        getRootProps,\n        getWrapperProps,\n        getInputProps,\n        getIconProps,\n        getLabelProps\n    ]);\n\n    return (\n        <CheckboxProvider value={ctx}>\n            <StyledCheckbox {...(getRootProps() as any)}>\n                <Box data-part={\"header\"}>\n                    <Text\n                        as={titleTag}\n                        data-part={\"title\"}\n                        {...titleProps}\n                    >\n                        {title}\n                    </Text>\n                    <Box data-part={\"checkbox-root\"}>\n                        <VisuallyHiddenInput {...(getInputProps() as any)} />\n                        <span {...getWrapperProps()}>{clonedIcon}</span>\n                    </Box>\n                </Box>\n                <Text\n                    data-part={\"description\"}\n                    {...descriptionProps}\n                >\n                    {description}\n                </Text>\n            </StyledCheckbox>\n        </CheckboxProvider>\n    );\n});\n\nCheckboxCard.displayName = \"Checkbox\";\n"
  },
  "component": "CheckboxCard",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "checkbox-card"
  ]
}