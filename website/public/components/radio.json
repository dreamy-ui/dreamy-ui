{
  "type": "component",
  "fileDependencies": [
    "./factory",
    "./flex",
    "./visually-hidden"
  ],
  "id": "radio",
  "file": {
    "name": "radio.tsx",
    "content": "\"use client\";\n\nimport {\n    type UseRadioGroupProps,\n    type UseRadioGroupReturn,\n    type UseRadioProps,\n    createContext,\n    useRadio,\n    useRadioGroup\n} from \"@dreamy-ui/react\";\nimport { forwardRef, useMemo } from \"react\";\nimport { cx } from \"styled-system/css\";\nimport { type RadioVariantProps, radio } from \"styled-system/recipes\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\nimport { Flex, type FlexProps } from \"./flex\";\nimport { VisuallyHiddenInput } from \"./visually-hidden\";\n\nexport interface RadioProps\n    extends UseRadioProps,\n        RadioVariantProps,\n        Omit<HTMLDreamyProps<\"input\">, keyof UseRadioProps> {}\n\nconst StyledRadio = dreamy(\"div\", radio);\n\n/**\n * Radio component\n *\n * @See Docs https://dreamy-ui.com/docs/components/radio\n */\nexport const Radio = forwardRef<HTMLInputElement, RadioProps>((props, ref) => {\n    const {\n        children,\n        getRootProps,\n        getWrapperProps,\n        getControlProps,\n        getInputProps,\n        getLabelProps\n    } = useRadio({ ...props, ref });\n\n    return (\n        <StyledRadio {...(getRootProps() as any)}>\n            <VisuallyHiddenInput {...(getInputProps() as any)} />\n            <span {...getWrapperProps()}>\n                <span {...getControlProps()} />\n            </span>\n            {children && <span {...getLabelProps()}>{children}</span>}\n        </StyledRadio>\n    );\n});\n\nRadio.displayName = \"Radio\";\n\nexport interface RadioGroupContext\n    extends Pick<\n            UseRadioGroupReturn,\n            \"onChange\" | \"value\" | \"isDisabled\" | \"isInvalid\" | \"isRequired\" | \"isReadOnly\"\n        >,\n        RadioVariantProps {\n    /**\n     * Should reduce motion\n     */\n    reduceMotion?: boolean;\n}\n\nexport const [RadioGroupProvider, useRadioGroupContext] = createContext<RadioGroupContext>({\n    name: \"RadioGroupContext\",\n    strict: false\n});\n\nexport interface RadioGroupProps\n    extends UseRadioGroupProps,\n        RadioVariantProps,\n        Omit<FlexProps, \"defaultValue\" | \"onChange\"> {}\n\n/**\n * RadioGroup component. Useful for grouping multiple Radioes together.\n *\n * @See Docs https://dreamy-ui.com/docs/components/radio\n */\nexport function RadioGroup(props: RadioGroupProps) {\n    const {\n        scheme,\n        size,\n        variant,\n        children,\n        isDisabled,\n        isRequired,\n        isReadOnly,\n        isInvalid,\n        reduceMotion,\n        onChange: onChangeProp,\n        ...rest\n    } = props;\n    const { value, onChange } = useRadioGroup({ onChange: onChangeProp, ...props });\n\n    const group = useMemo(\n        () => ({\n            size,\n            scheme,\n            variant,\n            value,\n            onChange,\n            isDisabled,\n            isRequired,\n            isReadOnly,\n            isInvalid,\n            reduceMotion\n        }),\n        [\n            size,\n            onChange,\n            scheme,\n            value,\n            variant,\n            isDisabled,\n            isRequired,\n            isReadOnly,\n            isInvalid,\n            reduceMotion\n        ]\n    );\n\n    return (\n        <RadioGroupProvider value={group}>\n            <Flex\n                {...rest}\n                className={cx(\"dreamy-radio-group\", rest.className)}\n            >\n                {children}\n            </Flex>\n        </RadioGroupProvider>\n    );\n}\n\nRadioGroup.displayName = \"RadioGroup\";\n"
  },
  "component": "Radio",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "radio"
  ]
}