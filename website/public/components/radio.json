{
  "type": "component",
  "fileDependencies": [
    "./factory",
    "./flex",
    "./visually-hidden"
  ],
  "id": "radio",
  "file": {
    "name": "radio.tsx",
    "content": "\"use client\";\r\n\r\nimport {\r\n    type UseRadioGroupProps,\r\n    type UseRadioGroupReturn,\r\n    type UseRadioProps,\r\n    createContext,\r\n    useRadio,\r\n    useRadioGroup\r\n} from \"@dreamy-ui/react\";\r\nimport { forwardRef, useMemo } from \"react\";\r\nimport { cx } from \"styled-system/css\";\r\nimport { type RadioVariantProps, radio } from \"styled-system/recipes\";\r\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\r\nimport { Flex, type FlexProps } from \"./flex\";\r\nimport { VisuallyHiddenInput } from \"./visually-hidden\";\r\n\r\nexport interface RadioProps\r\n    extends UseRadioProps,\r\n        RadioVariantProps,\r\n        Omit<HTMLDreamyProps<\"input\">, keyof UseRadioProps> {}\r\n\r\nconst StyledRadio = dreamy(\"div\", radio);\r\n\r\n/**\r\n * Radio component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/radio\r\n */\r\nexport const Radio = forwardRef<HTMLInputElement, RadioProps>((props, ref) => {\r\n    const {\r\n        children,\r\n        getRootProps,\r\n        getWrapperProps,\r\n        getControlProps,\r\n        getInputProps,\r\n        getLabelProps\r\n    } = useRadio({ ...props, ref });\r\n\r\n    return (\r\n        <StyledRadio {...(getRootProps() as any)}>\r\n            <VisuallyHiddenInput {...(getInputProps() as any)} />\r\n            <span {...getWrapperProps()}>\r\n                <span {...getControlProps()} />\r\n            </span>\r\n            {children && <span {...getLabelProps()}>{children}</span>}\r\n        </StyledRadio>\r\n    );\r\n});\r\n\r\nRadio.displayName = \"Radio\";\r\n\r\nexport interface RadioGroupContext\r\n    extends Pick<\r\n            UseRadioGroupReturn,\r\n            \"onChange\" | \"value\" | \"isDisabled\" | \"isInvalid\" | \"isRequired\" | \"isReadOnly\"\r\n        >,\r\n        RadioVariantProps {\r\n    /**\r\n     * Should reduce motion\r\n     */\r\n    reduceMotion?: boolean;\r\n}\r\n\r\nexport const [RadioGroupProvider, useRadioGroupContext] = createContext<RadioGroupContext>({\r\n    name: \"RadioGroupContext\",\r\n    strict: false\r\n});\r\n\r\nexport interface RadioGroupProps\r\n    extends UseRadioGroupProps,\r\n        RadioVariantProps,\r\n        Omit<FlexProps, \"defaultValue\" | \"onChange\"> {}\r\n\r\n/**\r\n * RadioGroup component. Useful for grouping multiple Radioes together.\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/radio\r\n */\r\nexport function RadioGroup(props: RadioGroupProps) {\r\n    const {\r\n        scheme,\r\n        size,\r\n        variant,\r\n        children,\r\n        isDisabled,\r\n        isRequired,\r\n        isReadOnly,\r\n        isInvalid,\r\n        reduceMotion,\r\n        onChange: onChangeProp,\r\n        ...rest\r\n    } = props;\r\n    const { value, onChange } = useRadioGroup({ onChange: onChangeProp, ...props });\r\n\r\n    const group = useMemo(\r\n        () => ({\r\n            size,\r\n            scheme,\r\n            variant,\r\n            value,\r\n            onChange,\r\n            isDisabled,\r\n            isRequired,\r\n            isReadOnly,\r\n            isInvalid,\r\n            reduceMotion\r\n        }),\r\n        [\r\n            size,\r\n            onChange,\r\n            scheme,\r\n            value,\r\n            variant,\r\n            isDisabled,\r\n            isRequired,\r\n            isReadOnly,\r\n            isInvalid,\r\n            reduceMotion\r\n        ]\r\n    );\r\n\r\n    return (\r\n        <RadioGroupProvider value={group}>\r\n            <Flex\r\n                {...rest}\r\n                className={cx(\"dreamy-radio-group\", rest.className)}\r\n            >\r\n                {children}\r\n            </Flex>\r\n        </RadioGroupProvider>\r\n    );\r\n}\r\n\r\nRadioGroup.displayName = \"RadioGroup\";\r\n"
  },
  "component": "Radio",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "radio"
  ]
}