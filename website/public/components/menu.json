{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./kbd",
    "./popover",
    "./style-context"
  ],
  "id": "menu",
  "file": {
    "name": "menu.tsx",
    "content": "import {\r\n    MenuDescendantsProvider,\r\n    MenuProvider,\r\n    PopoverContent,\r\n    type UseMenuItemProps,\r\n    type UseMenuProps,\r\n    runIfFn,\r\n    useActionKey,\r\n    useMenu,\r\n    useMenuContext,\r\n    useMenuItem\r\n} from \"@dreamy-ui/react\";\r\nimport { Children, type ReactNode, cloneElement, forwardRef } from \"react\";\r\nimport { menu } from \"styled-system/recipes\";\r\nimport { Box } from \"./box\";\r\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\r\nimport { Kbd } from \"./kbd\";\r\nimport { Popover, type PopoverContentProps, type PopoverProps, PopoverTrigger } from \"./popover\";\r\nimport { createStyleContext } from \"./style-context\";\r\n\r\nconst { withProvider, withContext } = createStyleContext(menu);\r\n\r\nexport interface MenuProps extends UseMenuProps {\r\n    /**\r\n     * The placement of the menu.\r\n     * @default \"bottom\"\r\n     */\r\n    placement?: PopoverProps[\"placement\"];\r\n    children?: ReactNode;\r\n    className?: string;\r\n}\r\n\r\n/**\r\n * Menu component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/menu\r\n */\r\nexport const Menu = withProvider(function MenuRoot({\r\n    children,\r\n    className,\r\n    placement,\r\n    ...props\r\n}: MenuProps) {\r\n    const { rest, ...ctx } = useMenu(props);\r\n\r\n    return (\r\n        <MenuProvider value={ctx as any}>\r\n            <Box {...ctx.getRootProps({ className })}>\r\n                <Popover\r\n                    placement={placement ?? \"bottom\"}\r\n                    isOpen={ctx.isOpen}\r\n                    onOpen={ctx.onOpen}\r\n                    onClose={ctx.onClose}\r\n                    hasArrow={false}\r\n                    initialFocusRef={ctx.triggerRef}\r\n                    lazyBehavior=\"keepMounted\"\r\n                    reduceMotion={ctx.reduceMotion}\r\n                    {...props.popoverProps}\r\n                >\r\n                    {children}\r\n                </Popover>\r\n            </Box>\r\n        </MenuProvider>\r\n    );\r\n}, \"root\");\r\n\r\nexport interface MenuContentProps extends PopoverContentProps {}\r\n\r\nexport const MenuContent = withContext(\r\n    forwardRef<HTMLDivElement, MenuContentProps>(function MenuContent(props, ref) {\r\n        const { children, ...rest } = props;\r\n\r\n        const { getContentProps, descendants } = useMenuContext();\r\n\r\n        return (\r\n            <PopoverContent {...getContentProps(rest, ref)}>\r\n                <MenuDescendantsProvider value={descendants}>{children}</MenuDescendantsProvider>\r\n            </PopoverContent>\r\n        );\r\n    }),\r\n    \"content\"\r\n);\r\n\r\nexport interface MenuButtonProps extends UseMenuItemProps {\r\n    /**\r\n     * Icon to display on the left side of the menu item\r\n     */\r\n    icon?: React.ReactNode | React.ElementType;\r\n    /**\r\n     * Command to display on the right side of the menu item\r\n     */\r\n    command?: string;\r\n    /**\r\n     * The content to display on the right side of the menu item\r\n     */\r\n    rightContent?: React.ReactNode | React.ElementType;\r\n}\r\n\r\nexport const MenuItem = withContext(\r\n    forwardRef<HTMLDivElement, MenuButtonProps>(function MenuButton(props, ref) {\r\n        const { icon, command, rightContent, ...rest } = props;\r\n        console.log(\"menu button\");\r\n        const buttonProps = useMenuItem(rest, ref);\r\n\r\n        const actionKey = useActionKey();\r\n\r\n        return (\r\n            <dreamy.button {...(buttonProps as any)}>\r\n                <span>\r\n                    {runIfFn(icon as any)}\r\n                    {buttonProps.children}\r\n                </span>\r\n                {command && <Kbd size={\"sm\"}>{command.replaceAll(\"{actionKey}\", actionKey)}</Kbd>}\r\n                {rightContent && runIfFn(rightContent as any)}\r\n            </dreamy.button>\r\n        );\r\n    }),\r\n    \"item\"\r\n);\r\n\r\nexport interface MenuTriggerProps extends HTMLDreamyProps<\"button\"> {\r\n    placeholder?: string;\r\n}\r\n\r\nexport const MenuTriggerBase = forwardRef<HTMLButtonElement, MenuTriggerProps>(function MenuTrigger(\r\n    { children, placeholder, ...rest },\r\n    ref\r\n) {\r\n    const { getTriggerProps } = useMenuContext();\r\n\r\n    const child = Children.only(children) as any;\r\n    const trigger = cloneElement(child, getTriggerProps(rest, ref));\r\n\r\n    return <PopoverTrigger {...rest}>{trigger}</PopoverTrigger>;\r\n});\r\n"
  },
  "component": "Menu",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeId": "menu"
}