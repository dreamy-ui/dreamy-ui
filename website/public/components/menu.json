{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./kbd",
    "./popover",
    "./style-context"
  ],
  "id": "menu",
  "file": {
    "name": "menu.tsx",
    "content": "\"use client\";\n\nimport {\n    MenuDescendantsProvider,\n    MenuProvider,\n    PopoverContent,\n    type UseMenuItemProps,\n    type UseMenuProps,\n    runIfFn,\n    useActionKey,\n    useMenu,\n    useMenuContext,\n    useMenuItem\n} from \"@dreamy-ui/react\";\nimport { Children, type ReactNode, cloneElement, forwardRef } from \"react\";\nimport { menu } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\nimport { Kbd } from \"./kbd\";\nimport { Popover, type PopoverContentProps, type PopoverProps, PopoverTrigger } from \"./popover\";\nimport { createStyleContext } from \"./style-context\";\n\nconst { withProvider, withContext } = createStyleContext(menu);\n\nexport interface MenuProps extends UseMenuProps {\n    /**\n     * The placement of the menu.\n     * @default \"bottom\"\n     */\n    placement?: PopoverProps[\"placement\"];\n    children?: ReactNode;\n    className?: string;\n}\n\n/**\n * Menu component\n *\n * @See Docs https://dreamy-ui.com/docs/components/menu\n */\nexport const Menu = withProvider(function MenuRoot({\n    children,\n    className,\n    placement,\n    ...props\n}: MenuProps) {\n    const { rest, ...ctx } = useMenu(props);\n\n    return (\n        <MenuProvider value={ctx as any}>\n            <Box {...ctx.getRootProps({ className })}>\n                <Popover\n                    placement={placement ?? \"bottom\"}\n                    isOpen={ctx.isOpen}\n                    onOpen={ctx.onOpen}\n                    onClose={ctx.onClose}\n                    hasArrow={false}\n                    initialFocusRef={ctx.triggerRef}\n                    lazyBehavior=\"keepMounted\"\n                    reduceMotion={ctx.reduceMotion}\n                    {...props.popoverProps}\n                >\n                    {children}\n                </Popover>\n            </Box>\n        </MenuProvider>\n    );\n}, \"root\");\n\nexport interface MenuContentProps extends PopoverContentProps {}\n\nexport const MenuContent = withContext(\n    forwardRef<HTMLDivElement, MenuContentProps>(function MenuContent(props, ref) {\n        const { children, ...rest } = props;\n\n        const { getContentProps, descendants } = useMenuContext();\n\n        return (\n            <PopoverContent {...getContentProps(rest, ref)}>\n                <MenuDescendantsProvider value={descendants}>{children}</MenuDescendantsProvider>\n            </PopoverContent>\n        );\n    }),\n    \"content\"\n);\n\nexport interface MenuButtonProps extends UseMenuItemProps {\n    /**\n     * Icon to display on the left side of the menu item\n     */\n    icon?: React.ReactNode | React.ElementType;\n    /**\n     * Command to display on the right side of the menu item\n     */\n    command?: string;\n    /**\n     * The content to display on the right side of the menu item\n     */\n    rightContent?: React.ReactNode | React.ElementType;\n}\n\nexport const MenuItem = withContext(\n    forwardRef<HTMLDivElement, MenuButtonProps>(function MenuButton(props, ref) {\n        const { icon, command, rightContent, ...rest } = props;\n        console.log(\"menu button\");\n        const buttonProps = useMenuItem(rest, ref);\n\n        const actionKey = useActionKey();\n\n        return (\n            <dreamy.button {...(buttonProps as any)}>\n                <span>\n                    {runIfFn(icon as any)}\n                    {buttonProps.children}\n                </span>\n                {command && <Kbd size={\"sm\"}>{command.replaceAll(\"{actionKey}\", actionKey)}</Kbd>}\n                {rightContent && runIfFn(rightContent as any)}\n            </dreamy.button>\n        );\n    }),\n    \"item\"\n);\n\nexport interface MenuTriggerProps extends HTMLDreamyProps<\"button\"> {\n    placeholder?: string;\n}\n\nexport const MenuTrigger = forwardRef<HTMLButtonElement, MenuTriggerProps>(function MenuTrigger(\n    { children, placeholder, ...rest },\n    ref\n) {\n    const { getTriggerProps } = useMenuContext();\n\n    const child = Children.only(children) as any;\n    const trigger = cloneElement(child, getTriggerProps(rest, ref));\n\n    return <PopoverTrigger {...rest}>{trigger}</PopoverTrigger>;\n});\n"
  },
  "component": "Menu",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "menu"
  ]
}