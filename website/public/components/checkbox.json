{
  "type": "component",
  "fileDependencies": [
    "./factory",
    "./flex",
    "./visually-hidden"
  ],
  "id": "checkbox",
  "file": {
    "name": "checkbox.tsx",
    "content": "import {\r\n    TRANSITION_EASINGS,\r\n    type UseCheckboxGroupProps,\r\n    type UseCheckboxGroupReturn,\r\n    type UseCheckboxProps,\r\n    type UseCheckboxReturn,\r\n    createContext,\r\n    useCheckbox,\r\n    useCheckboxGroup,\r\n    useMotionVariants\r\n} from \"@dreamy-ui/react\";\r\nimport { type SVGMotionProps, m } from \"motion/react\";\r\nimport { type ReactElement, cloneElement, forwardRef, useMemo } from \"react\";\r\nimport { cx } from \"styled-system/css\";\r\nimport { type CheckboxVariantProps, checkbox } from \"styled-system/recipes\";\r\nimport { dreamy } from \"./factory\";\r\nimport { Flex, type FlexProps } from \"./flex\";\r\nimport { VisuallyHiddenInput } from \"./visually-hidden\";\r\n\r\nexport interface CheckboxProps extends UseCheckboxProps, CheckboxVariantProps {}\r\n\r\nconst StyledCheckbox = dreamy(\"div\", checkbox);\r\n\r\n/**\r\n * Checkbox component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/checkbox\r\n */\r\nexport const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>((props, ref) => {\r\n    const {\r\n        children,\r\n        icon = <CheckboxIcon />,\r\n        getRootProps,\r\n        getWrapperProps,\r\n        getInputProps,\r\n        getIconProps,\r\n        getLabelProps\r\n    } = useCheckbox({ ...props, ref });\r\n\r\n    const clonedIcon = useMemo(() => {\r\n        return typeof icon === \"function\"\r\n            ? icon(getIconProps() as any)\r\n            : cloneElement(icon as ReactElement, getIconProps());\r\n    }, [getIconProps, icon]);\r\n\r\n    return (\r\n        <StyledCheckbox {...(getRootProps() as any)}>\r\n            <VisuallyHiddenInput {...(getInputProps() as any)} />\r\n            <span {...getWrapperProps()}>{clonedIcon}</span>\r\n            {children && <span {...getLabelProps()}>{children}</span>}\r\n        </StyledCheckbox>\r\n    );\r\n});\r\n\r\nCheckbox.displayName = \"Checkbox\";\r\n\r\nexport interface IconCustomProps {\r\n    /**\r\n     * Animation time in milliseconds.\r\n     * @default 200\r\n     */\r\n    animationTime?: number;\r\n    /**\r\n     * Props to pass to the animated path\r\n     */\r\n    pathProps?: SVGMotionProps<SVGPathElement>;\r\n}\r\n\r\ntype CheckboxIconProps = Partial<ReturnType<UseCheckboxReturn[\"getIconProps\"]> & IconCustomProps>;\r\n\r\nfunction CheckIcon(props: CheckboxIconProps) {\r\n    const {\r\n        isChecked,\r\n        active,\r\n        reduceMotion,\r\n        animationTime = 200,\r\n        pathProps,\r\n        ...otherProps\r\n    } = props;\r\n\r\n    const variants = useMotionVariants();\r\n\r\n    return (\r\n        <svg\r\n            aria-hidden=\"true\"\r\n            width=\"16\"\r\n            height=\"16\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            {...otherProps}\r\n        >\r\n            <m.path\r\n                d=\"M20 6 9 17l-5-5\"\r\n                initial={false}\r\n                animate={\"animate\"}\r\n                custom={{ isChecked, active, animationTime }}\r\n                variants={variants.checkboxCheckIcon.default}\r\n                {...pathProps}\r\n            />\r\n        </svg>\r\n    );\r\n}\r\n\r\nfunction IndeterminateIcon(props: CheckboxIconProps) {\r\n    const { isChecked, reduceMotion, animationTime = 0.2, ...otherProps } = props;\r\n\r\n    return (\r\n        <svg\r\n            aria-hidden=\"true\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth={2}\r\n            viewBox=\"0 0 24 24\"\r\n            {...otherProps}\r\n        >\r\n            <m.line\r\n                x1=\"21\"\r\n                x2=\"3\"\r\n                y1=\"12\"\r\n                y2=\"12\"\r\n                initial={{\r\n                    pathOffset: 1,\r\n                    pathLength: 1\r\n                }}\r\n                animate={{ pathOffset: 0, pathLength: 1 }}\r\n                exit={{\r\n                    pathOffset: 1,\r\n                    pathLength: 1\r\n                }}\r\n                transition={{\r\n                    duration: !reduceMotion ? animationTime / 1000 : 0,\r\n                    ease: TRANSITION_EASINGS.easeInOut\r\n                }}\r\n            />\r\n        </svg>\r\n    );\r\n}\r\n\r\n/**\r\n * CheckboxIcon is used to visually indicate the checked or indeterminate\r\n * state of a checkbox.\r\n */\r\nexport function CheckboxIcon(props: CheckboxIconProps) {\r\n    const { isIndeterminate, ...otherProps } = props;\r\n    const BaseIcon = useMemo(\r\n        () => (isIndeterminate ? IndeterminateIcon : CheckIcon),\r\n        [isIndeterminate]\r\n    );\r\n\r\n    return <BaseIcon {...otherProps} />;\r\n}\r\n\r\nexport interface CheckboxGroupContext\r\n    extends Pick<\r\n            UseCheckboxGroupReturn,\r\n            \"onChange\" | \"value\" | \"isDisabled\" | \"isInvalid\" | \"isRequired\" | \"isReadOnly\"\r\n        >,\r\n        CheckboxVariantProps {\r\n    /**\r\n     * Should reduce motion\r\n     */\r\n    reduceMotion?: boolean;\r\n}\r\n\r\nexport const [CheckboxGroupProvider, useCheckboxGroupContext] = createContext<CheckboxGroupContext>(\r\n    {\r\n        name: \"CheckboxGroupContext\",\r\n        strict: false\r\n    }\r\n);\r\n\r\nexport interface CheckboxGroupProps\r\n    extends UseCheckboxGroupProps,\r\n        CheckboxVariantProps,\r\n        Omit<FlexProps, \"defaultValue\" | \"onChange\"> {}\r\n\r\n/**\r\n * CheckboxGroup component. Useful for grouping multiple checkboxes together.\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/checkbox-group\r\n */\r\nexport function CheckboxGroup(props: CheckboxGroupProps) {\r\n    const {\r\n        scheme,\r\n        size,\r\n        variant,\r\n        children,\r\n        isDisabled,\r\n        isRequired,\r\n        isReadOnly,\r\n        isInvalid,\r\n        reduceMotion,\r\n        onChange: onChangeProp,\r\n        defaultValue,\r\n        ...rest\r\n    } = props;\r\n    const { value, onChange } = useCheckboxGroup({\r\n        onChange: onChangeProp,\r\n        defaultValue,\r\n        ...props\r\n    });\r\n\r\n    const group = useMemo(\r\n        () => ({\r\n            size,\r\n            scheme,\r\n            variant,\r\n            value,\r\n            onChange,\r\n            isDisabled,\r\n            isRequired,\r\n            isReadOnly,\r\n            isInvalid,\r\n            reduceMotion\r\n        }),\r\n        [\r\n            size,\r\n            onChange,\r\n            scheme,\r\n            value,\r\n            variant,\r\n            isDisabled,\r\n            isRequired,\r\n            isReadOnly,\r\n            isInvalid,\r\n            reduceMotion\r\n        ]\r\n    );\r\n\r\n    return (\r\n        <CheckboxGroupProvider value={group}>\r\n            <Flex\r\n                {...rest}\r\n                className={cx(\"dreamy-checkbox-group\", rest.className)}\r\n            >\r\n                {children}\r\n            </Flex>\r\n        </CheckboxGroupProvider>\r\n    );\r\n}\r\n\r\nCheckboxGroup.displayName = \"CheckboxGroup\";\r\n"
  },
  "component": "Checkbox",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeId": "checkbox"
}