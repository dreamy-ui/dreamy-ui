{
  "type": "component",
  "fileDependencies": [
    "./factory",
    "./flex",
    "./visually-hidden"
  ],
  "id": "checkbox",
  "file": {
    "name": "checkbox.tsx",
    "content": "\"use client\";\n\nimport {\n    TRANSITION_EASINGS,\n    type UseCheckboxGroupProps,\n    type UseCheckboxGroupReturn,\n    type UseCheckboxProps,\n    type UseCheckboxReturn,\n    createContext,\n    useCheckbox,\n    useCheckboxGroup,\n    useMotionVariants\n} from \"@dreamy-ui/react\";\nimport { type SVGMotionProps, m } from \"motion/react\";\nimport { type ReactElement, cloneElement, forwardRef, useMemo } from \"react\";\nimport { cx } from \"styled-system/css\";\nimport { type CheckboxVariantProps, checkbox } from \"styled-system/recipes\";\nimport { dreamy } from \"./factory\";\nimport { Flex, type FlexProps } from \"./flex\";\nimport { VisuallyHiddenInput } from \"./visually-hidden\";\n\nexport interface CheckboxProps extends UseCheckboxProps, CheckboxVariantProps {}\n\nconst StyledCheckbox = dreamy(\"div\", checkbox);\n\n/**\n * Checkbox component\n *\n * @See Docs https://dreamy-ui.com/docs/components/checkbox\n */\nexport const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>((props, ref) => {\n    const {\n        children,\n        icon = <CheckboxIcon />,\n        getRootProps,\n        getWrapperProps,\n        getInputProps,\n        getIconProps,\n        getLabelProps\n    } = useCheckbox({ ...props, ref });\n\n    const clonedIcon = useMemo(() => {\n        return typeof icon === \"function\"\n            ? icon(getIconProps() as any)\n            : cloneElement(icon as ReactElement, getIconProps());\n    }, [getIconProps, icon]);\n\n    return (\n        <StyledCheckbox {...(getRootProps() as any)}>\n            <VisuallyHiddenInput {...(getInputProps() as any)} />\n            <span {...getWrapperProps()}>{clonedIcon}</span>\n            {children && <span {...getLabelProps()}>{children}</span>}\n        </StyledCheckbox>\n    );\n});\n\nCheckbox.displayName = \"Checkbox\";\n\nexport interface IconCustomProps {\n    /**\n     * Animation time in milliseconds.\n     * @default 200\n     */\n    animationTime?: number;\n    /**\n     * Props to pass to the animated path\n     */\n    pathProps?: SVGMotionProps<SVGPathElement>;\n}\n\ntype CheckboxIconProps = Partial<ReturnType<UseCheckboxReturn[\"getIconProps\"]> & IconCustomProps>;\n\nfunction CheckIcon(props: CheckboxIconProps) {\n    const {\n        isChecked,\n        active,\n        reduceMotion,\n        animationTime = 200,\n        pathProps,\n        ...otherProps\n    } = props;\n\n    const variants = useMotionVariants();\n\n    return (\n        <svg\n            aria-hidden=\"true\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            {...otherProps}\n        >\n            <m.path\n                d=\"M20 6 9 17l-5-5\"\n                initial={false}\n                animate={\"animate\"}\n                custom={{ isChecked, active, animationTime }}\n                variants={variants.checkboxCheckIcon.default}\n                {...pathProps}\n            />\n        </svg>\n    );\n}\n\nfunction IndeterminateIcon(props: CheckboxIconProps) {\n    const { isChecked, reduceMotion, animationTime = 0.2, ...otherProps } = props;\n\n    return (\n        <svg\n            aria-hidden=\"true\"\n            stroke=\"currentColor\"\n            strokeWidth={2}\n            viewBox=\"0 0 24 24\"\n            {...otherProps}\n        >\n            <m.line\n                x1=\"21\"\n                x2=\"3\"\n                y1=\"12\"\n                y2=\"12\"\n                initial={{\n                    pathOffset: 1,\n                    pathLength: 1\n                }}\n                animate={{ pathOffset: 0, pathLength: 1 }}\n                exit={{\n                    pathOffset: 1,\n                    pathLength: 1\n                }}\n                transition={{\n                    duration: !reduceMotion ? animationTime / 1000 : 0,\n                    ease: TRANSITION_EASINGS.easeInOut\n                }}\n            />\n        </svg>\n    );\n}\n\n/**\n * CheckboxIcon is used to visually indicate the checked or indeterminate\n * state of a checkbox.\n */\nexport function CheckboxIcon(props: CheckboxIconProps) {\n    const { isIndeterminate, ...otherProps } = props;\n    const BaseIcon = useMemo(\n        () => (isIndeterminate ? IndeterminateIcon : CheckIcon),\n        [isIndeterminate]\n    );\n\n    return <BaseIcon {...otherProps} />;\n}\n\nexport interface CheckboxGroupContext\n    extends Pick<\n            UseCheckboxGroupReturn,\n            \"onChange\" | \"value\" | \"isDisabled\" | \"isInvalid\" | \"isRequired\" | \"isReadOnly\"\n        >,\n        CheckboxVariantProps {\n    /**\n     * Should reduce motion\n     */\n    reduceMotion?: boolean;\n}\n\nexport const [CheckboxGroupProvider, useCheckboxGroupContext] = createContext<CheckboxGroupContext>(\n    {\n        name: \"CheckboxGroupContext\",\n        strict: false\n    }\n);\n\nexport interface CheckboxGroupProps\n    extends UseCheckboxGroupProps,\n        CheckboxVariantProps,\n        Omit<FlexProps, \"defaultValue\" | \"onChange\"> {}\n\n/**\n * CheckboxGroup component. Useful for grouping multiple checkboxes together.\n *\n * @See Docs https://dreamy-ui.com/docs/components/checkbox-group\n */\nexport function CheckboxGroup(props: CheckboxGroupProps) {\n    const {\n        scheme,\n        size,\n        variant,\n        children,\n        isDisabled,\n        isRequired,\n        isReadOnly,\n        isInvalid,\n        reduceMotion,\n        onChange: onChangeProp,\n        defaultValue,\n        ...rest\n    } = props;\n    const { value, onChange } = useCheckboxGroup({\n        onChange: onChangeProp,\n        defaultValue,\n        ...props\n    });\n\n    const group = useMemo(\n        () => ({\n            size,\n            scheme,\n            variant,\n            value,\n            onChange,\n            isDisabled,\n            isRequired,\n            isReadOnly,\n            isInvalid,\n            reduceMotion\n        }),\n        [\n            size,\n            onChange,\n            scheme,\n            value,\n            variant,\n            isDisabled,\n            isRequired,\n            isReadOnly,\n            isInvalid,\n            reduceMotion\n        ]\n    );\n\n    return (\n        <CheckboxGroupProvider value={group}>\n            <Flex\n                {...rest}\n                className={cx(\"dreamy-checkbox-group\", rest.className)}\n            >\n                {children}\n            </Flex>\n        </CheckboxGroupProvider>\n    );\n}\n\nCheckboxGroup.displayName = \"CheckboxGroup\";\n"
  },
  "component": "Checkbox",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "checkbox"
  ]
}