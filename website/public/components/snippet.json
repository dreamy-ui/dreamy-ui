{
  "type": "component",
  "fileDependencies": [
    "./factory",
    "./tooltip"
  ],
  "id": "snippet",
  "file": {
    "name": "snippet.tsx",
    "content": "import { type UseSnippetProps, useSnippet } from \"@dreamy-ui/react\";\r\nimport { type SVGProps, cloneElement, forwardRef, useMemo } from \"react\";\r\nimport { snippet } from \"styled-system/recipes\";\r\nimport { dreamy } from \"./factory\";\r\nimport { Tooltip } from \"./tooltip\";\r\n\r\nexport interface SnippetProps extends UseSnippetProps {}\r\n\r\nconst StyledSnippet = dreamy(\"div\", snippet);\r\n\r\n/**\r\n * Snippet component. Use with `useSnippet` hook.\r\n */\r\nexport const Snippet = forwardRef<HTMLDivElement, SnippetProps>((props, ref) => {\r\n    const {\r\n        preRef,\r\n        children,\r\n        copied,\r\n        copyIcon = <CopyIcon />,\r\n        checkIcon = <CheckIcon />,\r\n        symbolBefore,\r\n        disableTooltip,\r\n        hideSymbol,\r\n        hideCopyButton,\r\n        tooltipProps,\r\n        isMultiLine,\r\n        getSnippetProps,\r\n        getCopyButtonProps\r\n    } = useSnippet({ ...props, ref });\r\n\r\n    const contents = useMemo(() => {\r\n        const clonedCheckIcon = checkIcon && cloneElement(checkIcon, { \"data-part\": \"check-icon\" });\r\n        const clonedCopyIcon = copyIcon && cloneElement(copyIcon, { \"data-part\": \"copy-icon\" });\r\n\r\n        if (hideCopyButton) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <Tooltip\r\n                hasArrow\r\n                isDisabled={\r\n                    copied || tooltipProps.isDisabled || disableTooltip || props.disableCopy\r\n                }\r\n                {...tooltipProps}\r\n            >\r\n                {/* @ts-ignore - \"aria-label\" IS a string */}\r\n                <IconButton\r\n                    icon={copied ? clonedCheckIcon : clonedCopyIcon}\r\n                    size={\"sm\"}\r\n                    variant={\"ghost\"}\r\n                    {...getCopyButtonProps()}\r\n                />\r\n            </Tooltip>\r\n        );\r\n    }, [\r\n        hideCopyButton,\r\n        getCopyButtonProps,\r\n        tooltipProps,\r\n        disableTooltip,\r\n        copied,\r\n        checkIcon,\r\n        copyIcon,\r\n        props.disableCopy\r\n    ]);\r\n\r\n    const preContent = useMemo(() => {\r\n        if (isMultiLine && children && Array.isArray(children)) {\r\n            return (\r\n                <div data-part=\"content\">\r\n                    {children.map((t, index) => (\r\n                        <pre\r\n                            key={`${index}-${t}`}\r\n                            data-part=\"pre\"\r\n                            // biome-ignore lint/a11y/noNoninteractiveTabindex: <explanation>\r\n                            tabIndex={0}\r\n                        >\r\n                            {!hideSymbol && <span data-part=\"symbol\">{symbolBefore}</span>}\r\n                            {t}\r\n                        </pre>\r\n                    ))}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <pre\r\n                ref={preRef}\r\n                data-part=\"pre\"\r\n                // biome-ignore lint/a11y/noNoninteractiveTabindex: <explanation>\r\n                tabIndex={0}\r\n            >\r\n                {!hideSymbol && <span data-part=\"symbol\">{symbolBefore}</span>}\r\n                {children}\r\n            </pre>\r\n        );\r\n    }, [children, hideSymbol, isMultiLine, symbolBefore, preRef]);\r\n\r\n    return (\r\n        <StyledSnippet {...(getSnippetProps() as any)}>\r\n            {preContent}\r\n            {contents}\r\n        </StyledSnippet>\r\n    );\r\n});\r\n\r\nSnippet.displayName = \"Snippet\";\r\n\r\nexport function CheckIcon(props: SVGProps<SVGSVGElement>) {\r\n    return (\r\n        <svg\r\n            aria-hidden=\"true\"\r\n            width=\"16\"\r\n            height=\"16\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            {...props}\r\n        >\r\n            <path d=\"M20 6 9 17l-5-5\" />\r\n        </svg>\r\n    );\r\n}\r\n\r\nfunction CopyIcon(props: SVGProps<SVGSVGElement>) {\r\n    return (\r\n        <svg\r\n            aria-hidden=\"true\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"16\"\r\n            height=\"16\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            {...props}\r\n        >\r\n            <rect\r\n                width=\"14\"\r\n                height=\"14\"\r\n                x=\"8\"\r\n                y=\"8\"\r\n                rx=\"2\"\r\n                ry=\"2\"\r\n            />\r\n            <path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\r\n        </svg>\r\n    );\r\n}\r\n"
  },
  "component": "Snippet",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeId": "snippet"
}