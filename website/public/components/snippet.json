{
  "type": "component",
  "fileDependencies": [
    "./factory",
    "./icon-button",
    "./tooltip"
  ],
  "id": "snippet",
  "file": {
    "name": "snippet.tsx",
    "content": "import { type UseSnippetProps, useSnippet } from \"@dreamy-ui/react\";\nimport { type SVGProps, cloneElement, forwardRef, useMemo } from \"react\";\nimport { type SnippetVariantProps, snippet } from \"styled-system/recipes\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\nimport { IconButton } from \"./icon-button\";\nimport { Tooltip } from \"./tooltip\";\n\nexport interface SnippetProps\n    extends UseSnippetProps,\n        Omit<HTMLDreamyProps<\"div\">, keyof UseSnippetProps>,\n        SnippetVariantProps {}\n\nconst StyledSnippet = dreamy(\"div\", snippet);\n\n/**\n * Snippet component\n *\n * @See Docs https://dreamy-ui.com/docs/components/snippet\n */\nexport const Snippet = forwardRef<HTMLDivElement, SnippetProps>((props, ref) => {\n    const {\n        preRef,\n        children,\n        copied,\n        copyIcon = <CopyIcon />,\n        checkIcon = <CheckIcon />,\n        symbolBefore,\n        disableTooltip,\n        hideSymbol,\n        hideCopyButton,\n        tooltipProps,\n        isMultiLine,\n        getSnippetProps,\n        getCopyButtonProps\n    } = useSnippet({ ...props, ref });\n\n    const contents = useMemo(() => {\n        const clonedCheckIcon = checkIcon && cloneElement(checkIcon, { \"data-part\": \"check-icon\" });\n        const clonedCopyIcon = copyIcon && cloneElement(copyIcon, { \"data-part\": \"copy-icon\" });\n\n        if (hideCopyButton) {\n            return null;\n        }\n\n        return (\n            <Tooltip\n                hasArrow\n                isDisabled={\n                    copied || tooltipProps.isDisabled || disableTooltip || props.disableCopy\n                }\n                {...tooltipProps}\n            >\n                <IconButton\n                    icon={copied ? clonedCheckIcon : clonedCopyIcon}\n                    size={\"sm\"}\n                    variant={\"ghost\"}\n                    {...getCopyButtonProps()}\n                />\n            </Tooltip>\n        );\n    }, [\n        hideCopyButton,\n        getCopyButtonProps,\n        tooltipProps,\n        disableTooltip,\n        copied,\n        checkIcon,\n        copyIcon,\n        props.disableCopy\n    ]);\n\n    const preContent = useMemo(() => {\n        if (isMultiLine && children && Array.isArray(children)) {\n            return (\n                <div data-part=\"content\">\n                    {children.map((t, index) => (\n                        <pre\n                            key={`${index}-${t}`}\n                            data-part=\"pre\"\n                            tabIndex={0}\n                        >\n                            {!hideSymbol && <span data-part=\"symbol\">{symbolBefore}</span>}\n                            {t}\n                        </pre>\n                    ))}\n                </div>\n            );\n        }\n\n        return (\n            <pre\n                ref={preRef}\n                data-part=\"pre\"\n                tabIndex={0}\n            >\n                {!hideSymbol && <span data-part=\"symbol\">{symbolBefore}</span>}\n                {children}\n            </pre>\n        );\n    }, [children, hideSymbol, isMultiLine, symbolBefore, preRef]);\n\n    return (\n        <StyledSnippet {...(getSnippetProps() as any)}>\n            {preContent}\n            {contents}\n        </StyledSnippet>\n    );\n});\n\nSnippet.displayName = \"Snippet\";\n\nexport function CheckIcon(props: SVGProps<SVGSVGElement>) {\n    return (\n        <svg\n            aria-hidden=\"true\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            {...props}\n        >\n            <path d=\"M20 6 9 17l-5-5\" />\n        </svg>\n    );\n}\n\nfunction CopyIcon(props: SVGProps<SVGSVGElement>) {\n    return (\n        <svg\n            aria-hidden=\"true\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            {...props}\n        >\n            <rect\n                width=\"14\"\n                height=\"14\"\n                x=\"8\"\n                y=\"8\"\n                rx=\"2\"\n                ry=\"2\"\n            />\n            <path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\n        </svg>\n    );\n}\n"
  },
  "component": "Snippet",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "snippet"
  ]
}