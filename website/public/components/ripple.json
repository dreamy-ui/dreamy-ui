{
  "type": "component",
  "fileDependencies": [
    "./motion"
  ],
  "id": "ripple",
  "file": {
    "name": "ripple.tsx",
    "content": "\"use client\";\r\n\r\nimport type { RippleType } from \"@dreamy-ui/react\";\r\nimport { clampValue } from \"@dreamy-ui/react\";\r\nimport type { HTMLMotionProps } from \"motion/react\";\r\nimport { AnimatePresence } from \"motion/react\";\r\nimport { MotionBox } from \"./motion\";\r\n\r\nexport interface RippleProps {\r\n    ripples: RippleType[];\r\n    currentRipple: string | null;\r\n    color?: string;\r\n    motionProps?: HTMLMotionProps<\"div\">;\r\n    style?: React.CSSProperties;\r\n    onClear: (key: React.Key) => void;\r\n}\r\n\r\n/**\r\n * Ripple component. Use with `useRipple` hook.\r\n */\r\nexport function Ripple(props: RippleProps) {\r\n    const {\r\n        ripples = [],\r\n        currentRipple,\r\n        motionProps,\r\n        color = \"currentColor\",\r\n        style,\r\n        onClear\r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n            {ripples.map((ripple) => {\r\n                const isEdgingThisRipple = !!currentRipple && ripples.at(-1)?.key === ripple.key;\r\n                const duration = clampValue(\r\n                    0.01 * ripple.size,\r\n                    isEdgingThisRipple ? 2 : 0.3,\r\n                    isEdgingThisRipple ? 3 : ripple.size > 100 ? 0.75 : 0.4\r\n                );\r\n\r\n                return (\r\n                    <AnimatePresence\r\n                        mode=\"popLayout\"\r\n                        key={ripple.key}\r\n                    >\r\n                        <MotionBox\r\n                            initial={{\r\n                                scale: 0,\r\n                                opacity: 0.4\r\n                            }}\r\n                            animate={{\r\n                                scale: isEdgingThisRipple ? 1.8 : 2,\r\n                                opacity: isEdgingThisRipple ? 0 : 0.01\r\n                            }}\r\n                            exit={{ opacity: 0 }}\r\n                            style={{\r\n                                position: \"absolute\",\r\n                                backgroundColor: color,\r\n                                borderRadius: \"100%\",\r\n                                transformOrigin: \"center\",\r\n                                pointerEvents: \"none\",\r\n                                overflow: \"hidden\",\r\n                                inset: 0,\r\n                                zIndex: 0,\r\n                                top: ripple.y,\r\n                                left: ripple.x,\r\n                                width: `${ripple.size}px`,\r\n                                height: `${ripple.size}px`,\r\n                                willChange: \"transform, opacity\",\r\n                                ...style\r\n                            }}\r\n                            transition={{ duration }}\r\n                            onAnimationComplete={() => {\r\n                                setTimeout(() => {\r\n                                    onClear(ripple.key);\r\n                                }, duration * 1000);\r\n                            }}\r\n                            {...motionProps}\r\n                            data-part=\"ripple\"\r\n                        />\r\n                    </AnimatePresence>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n}\r\n"
  },
  "component": "Ripple",
  "hasRecipe": false,
  "hasPattern": false
}