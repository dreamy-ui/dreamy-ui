{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./flex",
    "./icon",
    "./image"
  ],
  "id": "avatar",
  "file": {
    "name": "avatar.tsx",
    "content": "\"use client\";\r\n\r\nimport {\r\n    callAllHandlers,\r\n    compact,\r\n    dataAttr,\r\n    getValidChildren,\r\n    useSafeLayoutEffect\r\n} from \"@dreamy-ui/react\";\r\nimport { cloneElement, forwardRef, useCallback, useMemo, useRef, useState } from \"react\";\r\nimport { type AvatarVariantProps, avatar } from \"styled-system/recipes\";\r\nimport { token } from \"styled-system/tokens\";\r\nimport type { SystemProperties, SystemStyleObject } from \"styled-system/types\";\r\nimport { Box } from \"./box\";\r\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\r\nimport { Flex, type FlexProps } from \"./flex\";\r\nimport { Icon } from \"./icon\";\r\nimport { Image, type ImageProps } from \"./image\";\r\n\r\nfunction randomColor(string: string) {\r\n    return randomColorFromString(string);\r\n}\r\n\r\nfunction randomColorFromString(str: string) {\r\n    let hash = 0;\r\n    if (str.length === 0) return hash.toString();\r\n    for (let i = 0; i < str.length; i += 1) {\r\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n        hash = hash & hash;\r\n    }\r\n    let color = \"#\";\r\n    for (let j = 0; j < 3; j += 1) {\r\n        const value = (hash >> (j * 8)) & 255;\r\n        color += `00${value.toString(16)}`.slice(-2);\r\n    }\r\n    return color;\r\n}\r\n\r\nexport function initials(name: string) {\r\n    const names = name.trim().split(\" \");\r\n    const firstName = names[0] ?? \"\";\r\n    const lastName = names.length > 1 ? names[names.length - 1] : \"\";\r\n    return firstName && lastName\r\n        ? `${firstName.charAt(0)}${lastName.charAt(0)}`\r\n        : firstName.charAt(0);\r\n}\r\n\r\n// Custom useImage hook for avatar\r\nfunction useAvatarImage(props: {\r\n    src?: string;\r\n    srcSet?: string;\r\n    sizes?: string;\r\n    onLoad?: React.ImgHTMLAttributes<HTMLImageElement>[\"onLoad\"];\r\n    onError?: React.ImgHTMLAttributes<HTMLImageElement>[\"onError\"];\r\n    crossOrigin?: React.ImgHTMLAttributes<HTMLImageElement>[\"crossOrigin\"];\r\n    loading?: React.ImgHTMLAttributes<HTMLImageElement>[\"loading\"];\r\n}) {\r\n    const { loading, src, srcSet, onLoad, onError, crossOrigin, sizes } = props;\r\n\r\n    type Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\";\r\n    const [status, setStatus] = useState<Status>(\"pending\");\r\n\r\n    useSafeLayoutEffect(() => {\r\n        setStatus(src ? \"loading\" : \"pending\");\r\n    }, [src]);\r\n\r\n    const imageRef = useRef<HTMLImageElement | null>(null);\r\n\r\n    const load = useCallback(() => {\r\n        if (!src) return;\r\n\r\n        flush();\r\n\r\n        const img = new window.Image();\r\n        img.src = src;\r\n        if (crossOrigin) img.crossOrigin = crossOrigin;\r\n        if (srcSet) img.srcset = srcSet;\r\n        if (sizes) img.sizes = sizes;\r\n        if (loading) img.loading = loading;\r\n\r\n        img.onload = (event) => {\r\n            flush();\r\n            setStatus(\"loaded\");\r\n            onLoad?.(event as any);\r\n        };\r\n        img.onerror = (error) => {\r\n            flush();\r\n            setStatus(\"failed\");\r\n            onError?.(error as any);\r\n        };\r\n\r\n        imageRef.current = img;\r\n    }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\r\n\r\n    const flush = useCallback(() => {\r\n        if (imageRef.current) {\r\n            imageRef.current.onload = null;\r\n            imageRef.current.onerror = null;\r\n            imageRef.current = null;\r\n        }\r\n    }, []);\r\n\r\n    useSafeLayoutEffect(() => {\r\n        if (status === \"loading\") {\r\n            load();\r\n        }\r\n        return () => {\r\n            flush();\r\n        };\r\n    }, [status, load]);\r\n\r\n    return status;\r\n}\r\n\r\n// Avatar Types\r\nexport interface AvatarOptions {\r\n    /**\r\n     * The name of the person in the avatar.\r\n     *\r\n     * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`\r\n     * - If `src` is not loaded, the name will be used to create the initials\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The badge in the bottom right corner of the avatar.\r\n     */\r\n    children?: React.ReactNode;\r\n    /**\r\n     * The image url of the `Avatar`\r\n     */\r\n    src?: string;\r\n    /**\r\n     * List of sources to use for different screen resolutions\r\n     */\r\n    srcSet?: string;\r\n    /**\r\n     * Defines loading strategy\r\n     */\r\n    loading?: \"eager\" | \"lazy\";\r\n    /**\r\n     * The border color of the avatar\r\n     * @type SystemProps[\"borderColor\"]\r\n     */\r\n    borderColor?: SystemProperties[\"borderColor\"];\r\n    /**\r\n     * Function called when image failed to load\r\n     */\r\n    onError?: () => void;\r\n    /**\r\n     * The default avatar used as fallback when `name`, and `src`\r\n     * is not specified.\r\n     * @type React.ReactElement\r\n     */\r\n    icon?: React.ReactElement;\r\n    /**\r\n     * Function to get the initials to display\r\n     */\r\n    getInitials?: (name: string) => string;\r\n    /**\r\n     * Defining which referrer is sent when fetching the resource.\r\n     * @type React.HTMLAttributeReferrerPolicy\r\n     */\r\n    referrerPolicy?: React.HTMLAttributeReferrerPolicy;\r\n}\r\n\r\n// Generic Avatar Icon Component\r\nconst GenericAvatarIcon = (props: HTMLDreamyProps<\"svg\">) => {\r\n    return (\r\n        <Icon\r\n            viewBox=\"0 0 128 128\"\r\n            color=\"currentColor\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            role=\"img\"\r\n            aria-label=\"Avatar\"\r\n            {...props}\r\n        >\r\n            <path\r\n                fill=\"currentColor\"\r\n                d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\r\n            />\r\n            <path\r\n                fill=\"currentColor\"\r\n                d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\r\n            />\r\n        </Icon>\r\n    );\r\n};\r\n\r\n// Avatar Name Component\r\ninterface AvatarNameProps\r\n    extends HTMLDreamyProps<\"div\">,\r\n        Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\r\n\r\nfunction AvatarName(props: AvatarNameProps) {\r\n    const { name, getInitials, ...rest } = props;\r\n\r\n    return (\r\n        <Box\r\n            role=\"img\"\r\n            aria-label={name}\r\n            data-part=\"name\"\r\n            {...rest}\r\n        >\r\n            {name ? getInitials?.(name) : null}\r\n        </Box>\r\n    );\r\n}\r\n\r\n// Avatar Image Component\r\ninterface AvatarImageProps extends ImageProps {\r\n    getInitials?: (name: string) => string;\r\n    borderRadius?: SystemStyleObject[\"borderRadius\"];\r\n    icon: React.ReactElement;\r\n    iconLabel?: string;\r\n    name?: string;\r\n}\r\n\r\nfunction AvatarImage(props: AvatarImageProps) {\r\n    const {\r\n        src,\r\n        srcSet,\r\n        onError,\r\n        onLoad,\r\n        getInitials,\r\n        name,\r\n        loading,\r\n        iconLabel,\r\n        icon = <GenericAvatarIcon />,\r\n        referrerPolicy,\r\n        crossOrigin\r\n    } = props;\r\n\r\n    /**\r\n     * use the image hook to only show the image when it has loaded\r\n     */\r\n    const status = useAvatarImage({ src, onError, crossOrigin, onLoad });\r\n\r\n    const hasLoaded = useMemo(() => status === \"loaded\", [status]);\r\n\r\n    /**\r\n     * Fallback avatar applies under 2 conditions:\r\n     * - If `src` was passed and the image has not loaded or failed to load\r\n     * - If `src` wasn't passed\r\n     *\r\n     * In this case, we'll show either the name avatar or default avatar\r\n     */\r\n    const showFallback = !src || !hasLoaded;\r\n\r\n    if (showFallback) {\r\n        return name ? (\r\n            <AvatarName\r\n                getInitials={getInitials}\r\n                name={name}\r\n            />\r\n        ) : (\r\n            cloneElement(icon, {\r\n                role: \"img\",\r\n                \"aria-label\": iconLabel\r\n            })\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Image\r\n            src={src}\r\n            srcSet={srcSet}\r\n            alt={name}\r\n            onLoad={onLoad}\r\n            referrerPolicy={referrerPolicy}\r\n            crossOrigin={crossOrigin ?? undefined}\r\n            loading={loading}\r\n            data-part=\"image\"\r\n        />\r\n    );\r\n}\r\n\r\n// Main Avatar Component\r\nexport interface AvatarProps\r\n    extends Omit<HTMLDreamyProps<\"span\">, \"onError\">,\r\n        AvatarOptions,\r\n        AvatarVariantProps {\r\n    crossOrigin?: HTMLDreamyProps<\"img\">[\"crossOrigin\"];\r\n    iconLabel?: string;\r\n}\r\n\r\nconst StyledBase = dreamy(\"span\", avatar);\r\n\r\n/**\r\n * Avatar component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/avatar\r\n */\r\nexport const Avatar = forwardRef<HTMLSpanElement, AvatarProps>(function Avatar(\r\n    {\r\n        src,\r\n        srcSet,\r\n        name,\r\n        onError,\r\n        onLoad: onLoadProp,\r\n        getInitials = initials,\r\n        icon = <GenericAvatarIcon />,\r\n        iconLabel = \" avatar\",\r\n        loading,\r\n        children,\r\n        crossOrigin,\r\n        referrerPolicy,\r\n        ...rest\r\n    },\r\n    ref\r\n) {\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    const bg = useMemo(() => (name ? randomColor(name) : token.var(\"colors.alpha.200\")), [name]);\r\n\r\n    return (\r\n        <StyledBase\r\n            ref={ref}\r\n            {...rest}\r\n            style={{\r\n                backgroundColor: isLoaded ? \"transparent\" : bg,\r\n                ...rest.style\r\n            }}\r\n            data-loaded={dataAttr(isLoaded)}\r\n            data-part=\"root\"\r\n        >\r\n            <AvatarImage\r\n                src={src}\r\n                srcSet={srcSet}\r\n                loading={loading}\r\n                onLoad={callAllHandlers(onLoadProp, () => {\r\n                    setIsLoaded(true);\r\n                })}\r\n                onError={onError}\r\n                getInitials={getInitials}\r\n                name={name}\r\n                icon={icon}\r\n                iconLabel={iconLabel}\r\n                crossOrigin={crossOrigin}\r\n                referrerPolicy={referrerPolicy}\r\n            />\r\n            {children}\r\n        </StyledBase>\r\n    );\r\n});\r\n\r\ninterface AvatarGroupOptions {\r\n    /**\r\n     * The children of the avatar group.\r\n     *\r\n     * Ideally should be `Avatar` and `MoreIndicator` components\r\n     */\r\n    children: React.ReactNode;\r\n    /**\r\n     * The space between the avatars in the group. To use a token use `token()` function from `styled-system`.\r\n     * @default \"-0.75rem\"\r\n     */\r\n    spacing?: string | number;\r\n    /**\r\n     * The maximum number of visible avatars\r\n     */\r\n    maxAvatars?: number;\r\n}\r\n\r\nexport interface AvatarGroupProps extends AvatarGroupOptions, Omit<FlexProps, \"children\"> {}\r\n\r\n/**\r\n * AvatarGroup displays a number of avatars grouped together in a stack.\r\n */\r\nexport const AvatarGroup = forwardRef<HTMLDivElement, AvatarGroupProps>(\r\n    function AvatarGroup(props, ref) {\r\n        const { children, maxAvatars, spacing = \"-0.75rem\", ...rest } = props;\r\n\r\n        const validChildren = getValidChildren(children);\r\n\r\n        /**\r\n         * get the avatars within the max\r\n         */\r\n        const childrenWithinMax =\r\n            maxAvatars != null ? validChildren.slice(0, maxAvatars) : validChildren;\r\n\r\n        /**\r\n         * get the remaining avatar count\r\n         */\r\n        const excess = maxAvatars != null ? validChildren.length - maxAvatars : 0;\r\n\r\n        /**\r\n         * Reversing the children is a great way to avoid using zIndex\r\n         * to overlap the avatars\r\n         */\r\n        const reversedChildren = childrenWithinMax.reverse();\r\n\r\n        const clones = reversedChildren.map((child, index) => {\r\n            const isFirstAvatar = index === 0;\r\n\r\n            const childProps = {\r\n                style: { marginInlineEnd: isFirstAvatar ? 0 : spacing },\r\n                showBorder: true\r\n            } satisfies AvatarProps;\r\n\r\n            return cloneElement(child, compact(childProps));\r\n        });\r\n\r\n        return (\r\n            <Flex\r\n                ref={ref}\r\n                role=\"group\"\r\n                data-part=\"group\"\r\n                {...rest}\r\n            >\r\n                {excess > 0 && (\r\n                    <Box\r\n                        style={{ marginInlineStart: spacing }}\r\n                        data-part=\"excess\"\r\n                    >{`+${excess}`}</Box>\r\n                )}\r\n                {clones}\r\n            </Flex>\r\n        );\r\n    }\r\n);\r\n\r\nAvatarGroup.displayName = \"AvatarGroup\";\r\n"
  },
  "component": "Avatar",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "avatar"
  ]
}