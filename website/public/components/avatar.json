{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./flex",
    "./icon",
    "./image"
  ],
  "id": "avatar",
  "file": {
    "name": "avatar.tsx",
    "content": "\"use client\";\n\nimport {\n    callAllHandlers,\n    compact,\n    dataAttr,\n    getValidChildren,\n    useSafeLayoutEffect\n} from \"@dreamy-ui/react\";\nimport { cloneElement, forwardRef, useCallback, useMemo, useRef, useState } from \"react\";\nimport { type AvatarVariantProps, avatar } from \"styled-system/recipes\";\nimport { token } from \"styled-system/tokens\";\nimport type { SystemProperties, SystemStyleObject } from \"styled-system/types\";\nimport { Box } from \"./box\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\nimport { Flex, type FlexProps } from \"./flex\";\nimport { Icon } from \"./icon\";\nimport { Image, type ImageProps } from \"./image\";\n\nfunction randomColor(string: string) {\n    return randomColorFromString(string);\n}\n\nfunction randomColorFromString(str: string) {\n    let hash = 0;\n    if (str.length === 0) return hash.toString();\n    for (let i = 0; i < str.length; i += 1) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n        hash = hash & hash;\n    }\n    let color = \"#\";\n    for (let j = 0; j < 3; j += 1) {\n        const value = (hash >> (j * 8)) & 255;\n        color += `00${value.toString(16)}`.slice(-2);\n    }\n    return color;\n}\n\nexport function initials(name: string) {\n    const names = name.trim().split(\" \");\n    const firstName = names[0] ?? \"\";\n    const lastName = names.length > 1 ? names[names.length - 1] : \"\";\n    return firstName && lastName\n        ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n        : firstName.charAt(0);\n}\n\n// Custom useImage hook for avatar\nfunction useAvatarImage(props: {\n    src?: string;\n    srcSet?: string;\n    sizes?: string;\n    onLoad?: React.ImgHTMLAttributes<HTMLImageElement>[\"onLoad\"];\n    onError?: React.ImgHTMLAttributes<HTMLImageElement>[\"onError\"];\n    crossOrigin?: React.ImgHTMLAttributes<HTMLImageElement>[\"crossOrigin\"];\n    loading?: React.ImgHTMLAttributes<HTMLImageElement>[\"loading\"];\n}) {\n    const { loading, src, srcSet, onLoad, onError, crossOrigin, sizes } = props;\n\n    type Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\";\n    const [status, setStatus] = useState<Status>(\"pending\");\n\n    useSafeLayoutEffect(() => {\n        setStatus(src ? \"loading\" : \"pending\");\n    }, [src]);\n\n    const imageRef = useRef<HTMLImageElement | null>(null);\n\n    const load = useCallback(() => {\n        if (!src) return;\n\n        flush();\n\n        const img = new window.Image();\n        img.src = src;\n        if (crossOrigin) img.crossOrigin = crossOrigin;\n        if (srcSet) img.srcset = srcSet;\n        if (sizes) img.sizes = sizes;\n        if (loading) img.loading = loading;\n\n        img.onload = (event) => {\n            flush();\n            setStatus(\"loaded\");\n            onLoad?.(event as any);\n        };\n        img.onerror = (error) => {\n            flush();\n            setStatus(\"failed\");\n            onError?.(error as any);\n        };\n\n        imageRef.current = img;\n    }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n\n    const flush = useCallback(() => {\n        if (imageRef.current) {\n            imageRef.current.onload = null;\n            imageRef.current.onerror = null;\n            imageRef.current = null;\n        }\n    }, []);\n\n    useSafeLayoutEffect(() => {\n        if (status === \"loading\") {\n            load();\n        }\n        return () => {\n            flush();\n        };\n    }, [status, load]);\n\n    return status;\n}\n\n// Avatar Types\nexport interface AvatarOptions {\n    /**\n     * The name of the person in the avatar.\n     *\n     * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`\n     * - If `src` is not loaded, the name will be used to create the initials\n     */\n    name?: string;\n    /**\n     * The badge in the bottom right corner of the avatar.\n     */\n    children?: React.ReactNode;\n    /**\n     * The image url of the `Avatar`\n     */\n    src?: string;\n    /**\n     * List of sources to use for different screen resolutions\n     */\n    srcSet?: string;\n    /**\n     * Defines loading strategy\n     */\n    loading?: \"eager\" | \"lazy\";\n    /**\n     * The border color of the avatar\n     * @type SystemProps[\"borderColor\"]\n     */\n    borderColor?: SystemProperties[\"borderColor\"];\n    /**\n     * Function called when image failed to load\n     */\n    onError?: () => void;\n    /**\n     * The default avatar used as fallback when `name`, and `src`\n     * is not specified.\n     * @type React.ReactElement\n     */\n    icon?: React.ReactElement;\n    /**\n     * Function to get the initials to display\n     */\n    getInitials?: (name: string) => string;\n    /**\n     * Defining which referrer is sent when fetching the resource.\n     * @type React.HTMLAttributeReferrerPolicy\n     */\n    referrerPolicy?: React.HTMLAttributeReferrerPolicy;\n}\n\n// Generic Avatar Icon Component\nconst GenericAvatarIcon = (props: HTMLDreamyProps<\"svg\">) => {\n    return (\n        <Icon\n            viewBox=\"0 0 128 128\"\n            color=\"currentColor\"\n            width=\"100%\"\n            height=\"100%\"\n            role=\"img\"\n            aria-label=\"Avatar\"\n            {...props}\n        >\n            <path\n                fill=\"currentColor\"\n                d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n            />\n            <path\n                fill=\"currentColor\"\n                d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n            />\n        </Icon>\n    );\n};\n\n// Avatar Name Component\ninterface AvatarNameProps\n    extends HTMLDreamyProps<\"div\">,\n        Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n\nfunction AvatarName(props: AvatarNameProps) {\n    const { name, getInitials, ...rest } = props;\n\n    return (\n        <Box\n            role=\"img\"\n            aria-label={name}\n            data-part=\"name\"\n            {...rest}\n        >\n            {name ? getInitials?.(name) : null}\n        </Box>\n    );\n}\n\n// Avatar Image Component\ninterface AvatarImageProps extends ImageProps {\n    getInitials?: (name: string) => string;\n    borderRadius?: SystemStyleObject[\"borderRadius\"];\n    icon: React.ReactElement;\n    iconLabel?: string;\n    name?: string;\n}\n\nfunction AvatarImage(props: AvatarImageProps) {\n    const {\n        src,\n        srcSet,\n        onError,\n        onLoad,\n        getInitials,\n        name,\n        loading,\n        iconLabel,\n        icon = <GenericAvatarIcon />,\n        referrerPolicy,\n        crossOrigin\n    } = props;\n\n    /**\n     * use the image hook to only show the image when it has loaded\n     */\n    const status = useAvatarImage({ src, onError, crossOrigin, onLoad });\n\n    const hasLoaded = useMemo(() => status === \"loaded\", [status]);\n\n    /**\n     * Fallback avatar applies under 2 conditions:\n     * - If `src` was passed and the image has not loaded or failed to load\n     * - If `src` wasn't passed\n     *\n     * In this case, we'll show either the name avatar or default avatar\n     */\n    const showFallback = !src || !hasLoaded;\n\n    if (showFallback) {\n        return name ? (\n            <AvatarName\n                getInitials={getInitials}\n                name={name}\n            />\n        ) : (\n            cloneElement(icon, {\n                role: \"img\",\n                \"aria-label\": iconLabel\n            })\n        );\n    }\n\n    return (\n        <Image\n            src={src}\n            srcSet={srcSet}\n            alt={name}\n            onLoad={onLoad}\n            referrerPolicy={referrerPolicy}\n            crossOrigin={crossOrigin ?? undefined}\n            loading={loading}\n            data-part=\"image\"\n        />\n    );\n}\n\n// Main Avatar Component\nexport interface AvatarProps\n    extends Omit<HTMLDreamyProps<\"span\">, \"onError\">,\n        AvatarOptions,\n        AvatarVariantProps {\n    crossOrigin?: HTMLDreamyProps<\"img\">[\"crossOrigin\"];\n    iconLabel?: string;\n}\n\nconst StyledBase = dreamy(\"span\", avatar);\n\n/**\n * Avatar component\n *\n * @See Docs https://dreamy-ui.com/docs/components/avatar\n */\nexport const Avatar = forwardRef<HTMLSpanElement, AvatarProps>(function Avatar(\n    {\n        src,\n        srcSet,\n        name,\n        onError,\n        onLoad: onLoadProp,\n        getInitials = initials,\n        icon = <GenericAvatarIcon />,\n        iconLabel = \" avatar\",\n        loading,\n        children,\n        crossOrigin,\n        referrerPolicy,\n        ...rest\n    },\n    ref\n) {\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    const bg = useMemo(() => (name ? randomColor(name) : token.var(\"colors.alpha.200\")), [name]);\n\n    return (\n        <StyledBase\n            ref={ref}\n            {...rest}\n            style={{\n                backgroundColor: isLoaded ? \"transparent\" : bg,\n                ...rest.style\n            }}\n            data-loaded={dataAttr(isLoaded)}\n            data-part=\"root\"\n        >\n            <AvatarImage\n                src={src}\n                srcSet={srcSet}\n                loading={loading}\n                onLoad={callAllHandlers(onLoadProp, () => {\n                    setIsLoaded(true);\n                })}\n                onError={onError}\n                getInitials={getInitials}\n                name={name}\n                icon={icon}\n                iconLabel={iconLabel}\n                crossOrigin={crossOrigin}\n                referrerPolicy={referrerPolicy}\n            />\n            {children}\n        </StyledBase>\n    );\n});\n\ninterface AvatarGroupOptions {\n    /**\n     * The children of the avatar group.\n     *\n     * Ideally should be `Avatar` and `MoreIndicator` components\n     */\n    children: React.ReactNode;\n    /**\n     * The space between the avatars in the group. To use a token use `token()` function from `styled-system`.\n     * @default \"-0.75rem\"\n     */\n    spacing?: string | number;\n    /**\n     * The maximum number of visible avatars\n     */\n    maxAvatars?: number;\n}\n\nexport interface AvatarGroupProps extends AvatarGroupOptions, Omit<FlexProps, \"children\"> {}\n\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\nexport const AvatarGroup = forwardRef<HTMLDivElement, AvatarGroupProps>(\n    function AvatarGroup(props, ref) {\n        const { children, maxAvatars, spacing = \"-0.75rem\", ...rest } = props;\n\n        const validChildren = getValidChildren(children);\n\n        /**\n         * get the avatars within the max\n         */\n        const childrenWithinMax =\n            maxAvatars != null ? validChildren.slice(0, maxAvatars) : validChildren;\n\n        /**\n         * get the remaining avatar count\n         */\n        const excess = maxAvatars != null ? validChildren.length - maxAvatars : 0;\n\n        /**\n         * Reversing the children is a great way to avoid using zIndex\n         * to overlap the avatars\n         */\n        const reversedChildren = childrenWithinMax.reverse();\n\n        const clones = reversedChildren.map((child, index) => {\n            const isFirstAvatar = index === 0;\n\n            const childProps = {\n                style: { marginInlineEnd: isFirstAvatar ? 0 : spacing },\n                showBorder: true\n            } satisfies AvatarProps;\n\n            return cloneElement(child, compact(childProps));\n        });\n\n        return (\n            <Flex\n                ref={ref}\n                role=\"group\"\n                data-part=\"group\"\n                {...rest}\n            >\n                {excess > 0 && (\n                    <Box\n                        style={{ marginInlineStart: spacing }}\n                        data-part=\"excess\"\n                    >{`+${excess}`}</Box>\n                )}\n                {clones}\n            </Flex>\n        );\n    }\n);\n\nAvatarGroup.displayName = \"AvatarGroup\";\n"
  },
  "component": "Avatar",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "avatar"
  ]
}