{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./close-button",
    "./factory",
    "./heading",
    "./motion",
    "./style-context"
  ],
  "id": "popover",
  "file": {
    "name": "popover.tsx",
    "content": "import {\r\n    type MaybeRenderProp,\r\n    PopoverProvider,\r\n    type UsePopoverProps,\r\n    callAll,\r\n    callAllHandlers,\r\n    runIfFn,\r\n    transformReducedMotion,\r\n    useMotionVariants,\r\n    usePopover,\r\n    usePopoverContext\r\n} from \"@dreamy-ui/react\";\r\nimport type { HTMLMotionProps } from \"motion/react\";\r\nimport { Children, cloneElement, forwardRef } from \"react\";\r\nimport { popover } from \"styled-system/recipes\";\r\nimport { Box, type BoxProps } from \"./box\";\r\nimport { CloseButton, type CloseButtonProps } from \"./close-button\";\r\nimport type { HTMLDreamyProps } from \"./factory\";\r\nimport { Heading } from \"./heading\";\r\nimport { MotionBox } from \"./motion\";\r\nimport { createStyleContext } from \"./style-context\";\r\n\r\nconst { withProvider, withContext } = createStyleContext(popover);\r\n\r\nexport interface PopoverProps extends UsePopoverProps {\r\n    /**\r\n     * The content of the popover. It is usually the `PopoverTrigger`,\r\n     * and `PopoverContent`\r\n     */\r\n    children?: MaybeRenderProp<{\r\n        isOpen: boolean;\r\n        onClose: () => void;\r\n        forceUpdate: (() => void) | undefined;\r\n    }>;\r\n    /**\r\n     * If `true`, the popover will have an arrow pointing to the trigger\r\n     * @default true\r\n     */\r\n    hasArrow?: boolean;\r\n}\r\n\r\n/**\r\n * Popover component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/popover\r\n */\r\nexport const Popover = withProvider(function PopoverRoot(props: PopoverProps) {\r\n    const { children, direction, hasArrow, ...rest } = props;\r\n\r\n    const context = usePopover({ ...rest, direction: direction ?? \"ltr\" });\r\n\r\n    return (\r\n        <PopoverProvider\r\n            value={{\r\n                ...context,\r\n                hasArrow: hasArrow ?? false\r\n            }}\r\n        >\r\n            {runIfFn(children, {\r\n                isOpen: context.isOpen,\r\n                onClose: context.onClose,\r\n                forceUpdate: context.forceUpdate\r\n            })}\r\n        </PopoverProvider>\r\n    );\r\n});\r\n\r\nexport interface PopoverArrowProps extends HTMLDreamyProps<\"div\"> {}\r\n\r\nexport function PopoverArrow(props: PopoverArrowProps) {\r\n    return (\r\n        <Box\r\n            data-popper-arrow\r\n            style={{\r\n                backgroundColor: \"transparent\"\r\n            }}\r\n        >\r\n            <Box\r\n                data-popper-arrow-inner\r\n                {...props}\r\n            />\r\n        </Box>\r\n    );\r\n}\r\n\r\ntype HTMLMotionDreamProps<T extends keyof HTMLElementTagNameMap> = Omit<\r\n    HTMLDreamyProps<T>,\r\n    keyof HTMLMotionProps<T>\r\n> & {\r\n    children?: React.ReactNode;\r\n} & Omit<\r\n        HTMLMotionProps<T>,\r\n        | \"style\"\r\n        | \"onDrag\"\r\n        | \"onDragEnd\"\r\n        | \"onDragStart\"\r\n        | \"onAnimationStart\"\r\n        | \"variants\"\r\n        | \"transition\"\r\n        | \"children\"\r\n    >;\r\n\r\nexport interface PopoverTransitionProps extends HTMLMotionDreamProps<\"section\"> {\r\n    /**\r\n     * Props to be forwarded to the arrow component\r\n     */\r\n    arrowProps?: PopoverArrowProps;\r\n}\r\n\r\nconst PopoverTransition = forwardRef(function PopoverTransition(\r\n    props: PopoverTransitionProps,\r\n    ref: React.Ref<any>\r\n) {\r\n    const { children, arrowProps, ...rest } = props;\r\n\r\n    const { isOpen, hasArrow, reduceMotion } = usePopoverContext();\r\n    const { popover } = useMotionVariants();\r\n\r\n    return (\r\n        <MotionBox\r\n            ref={ref as any}\r\n            variants={transformReducedMotion(popover.default, reduceMotion)}\r\n            initial={false}\r\n            animate={isOpen ? \"initial\" : \"exit\"}\r\n            {...rest}\r\n        >\r\n            {hasArrow && <PopoverArrow {...arrowProps} />}\r\n            {children}\r\n        </MotionBox>\r\n    );\r\n});\r\n\r\nexport interface PopoverContentProps extends PopoverTransitionProps {\r\n    rootProps?: HTMLDreamyProps<\"div\">;\r\n    motionProps?: Omit<HTMLMotionProps<\"section\">, \"children\">;\r\n}\r\n\r\nexport const PopoverContent = withContext(\r\n    forwardRef<HTMLElement, PopoverContentProps>(function PopoverContent(props, ref) {\r\n        const { rootProps, motionProps, ...contentProps } = props;\r\n\r\n        const { getPopoverProps, getPopoverPositionerProps, onAnimationComplete } =\r\n            usePopoverContext();\r\n\r\n        if (typeof document === \"undefined\") return null;\r\n\r\n        return (\r\n            <div {...getPopoverPositionerProps(rootProps)}>\r\n                <PopoverTransition\r\n                    {...(motionProps as any)}\r\n                    {...getPopoverProps(contentProps, ref)}\r\n                    onAnimationComplete={callAll(\r\n                        onAnimationComplete,\r\n                        contentProps.onAnimationComplete\r\n                    )}\r\n                />\r\n            </div>\r\n        );\r\n    }),\r\n    \"content\"\r\n);\r\n\r\nexport interface PopoverHeaderProps extends HTMLDreamyProps<\"header\"> {}\r\n\r\nexport const PopoverHeader = withContext(\r\n    forwardRef<HTMLDivElement, PopoverHeaderProps>(function PopoverHeader(props, ref) {\r\n        const { children, ...rest } = props;\r\n        const { getHeaderProps } = usePopoverContext();\r\n\r\n        return (\r\n            <Box\r\n                as={\"header\"}\r\n                {...getHeaderProps(rest, ref)}\r\n            >\r\n                {typeof children === \"string\" ? (\r\n                    <Heading\r\n                        variant={\"heading\"}\r\n                        size=\"md\"\r\n                    >\r\n                        {children}\r\n                    </Heading>\r\n                ) : (\r\n                    children\r\n                )}\r\n            </Box>\r\n        );\r\n    }),\r\n    \"header\"\r\n);\r\n\r\nexport interface PopoverBodyProps extends HTMLDreamyProps<\"div\"> {}\r\n\r\nexport const PopoverBody = withContext(\r\n    forwardRef<HTMLDivElement, PopoverBodyProps>(function PopoverHeader(props, ref) {\r\n        const { getBodyProps } = usePopoverContext();\r\n\r\n        return <Box {...getBodyProps(props, ref)} />;\r\n    }),\r\n    \"body\"\r\n);\r\n\r\nexport interface PopoverFooterProps extends BoxProps {}\r\n\r\nexport const PopoverFooter = withContext(\r\n    forwardRef<HTMLDivElement, PopoverFooterProps>(function PopoverFooter(props, ref) {\r\n        return (\r\n            <Box\r\n                as={\"footer\"}\r\n                {...props}\r\n                ref={ref}\r\n            />\r\n        );\r\n    }),\r\n    \"footer\"\r\n);\r\n\r\nexport interface PopoverCloseButtonProps extends CloseButtonProps {}\r\n\r\nexport const PopoverCloseButton = withContext(\r\n    forwardRef<HTMLButtonElement, PopoverCloseButtonProps>(function PopoverCloseButton(props, ref) {\r\n        const { onClose } = usePopoverContext();\r\n\r\n        return (\r\n            <CloseButton\r\n                {...props}\r\n                size={\"sm\"}\r\n                onClick={callAllHandlers(props.onClick, onClose)}\r\n                ref={ref}\r\n            />\r\n        );\r\n    }),\r\n    \"close\"\r\n);\r\n\r\n/**\r\n * PopoverAnchor is element that is used as the positioning reference\r\n * for the popover.\r\n */\r\nexport function PopoverAnchor(props: React.PropsWithChildren<{}>) {\r\n    const child: any = Children.only(props.children);\r\n    const { getAnchorProps } = usePopoverContext();\r\n\r\n    return <>{cloneElement(child, getAnchorProps(child.props, child.ref))}</>;\r\n}\r\n\r\n/**\r\n * PopoverTrigger opens the popover's content. It must be an interactive element\r\n * such as `button` or `a`.\r\n */\r\nexport function PopoverTrigger(props: { children: React.ReactNode }) {\r\n    const child: any = Children.only(props.children);\r\n    const { getTriggerProps } = usePopoverContext();\r\n\r\n    return <>{cloneElement(child, getTriggerProps(child.props, child.ref))}</>;\r\n}\r\n"
  },
  "component": "Popover",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeId": "popover"
}