{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./popover",
    "./style-context",
    "./visually-hidden"
  ],
  "id": "select",
  "file": {
    "name": "select.tsx",
    "content": "\"use client\";\n\nimport {\n    type HTMLDreamProps,\n    SelectDescendantsProvider,\n    SelectProvider,\n    type UseSelectItemProps,\n    type UseSelectProps,\n    useHiddenSelect,\n    useSafeLayoutEffect,\n    useSelect,\n    useSelectContext,\n    useSelectItem\n} from \"@dreamy-ui/react\";\nimport type React from \"react\";\nimport { type ReactNode, type RefObject, type SVGProps, forwardRef, useState } from \"react\";\nimport { splitCssProps } from \"styled-system/jsx\";\nimport { select } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { type FocusableElement, type HTMLDreamyProps, dreamy } from \"./factory\";\nimport { Popover, PopoverContent, type PopoverContentProps, PopoverTrigger } from \"./popover\";\nimport { createStyleContext } from \"./style-context\";\nimport { VisuallyHidden } from \"./visually-hidden\";\nconst { withProvider, withContext } = createStyleContext(select);\n\nexport interface HiddenSelectProps {\n    placeholder: string;\n    multiple: boolean;\n    autoComplete: string;\n    triggerRef: RefObject<FocusableElement>;\n    domRef: RefObject<HTMLSelectElement>;\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n    onChangeValue: (value: string | string[]) => void;\n}\n\nfunction HiddenSelect(props: HiddenSelectProps) {\n    const { domRef, placeholder } = props;\n\n    const { containerProps, selectProps, descendants, id, selectedKeys } = useHiddenSelect({\n        ...props,\n        domRef\n    });\n\n    const [, forceUpdate] = useState({});\n\n    useSafeLayoutEffect(() => {\n        forceUpdate({});\n    }, []);\n\n    const items = Array.from(descendants.values());\n\n    return (\n        <VisuallyHidden {...containerProps}>\n            <label>\n                {placeholder}\n                <select\n                    {...selectProps}\n                    ref={domRef}\n                >\n                    <option />\n                    {items.map((item: any) => {\n                        const isSelected = selectProps.multiple\n                            ? selectedKeys.includes(item.node.value)\n                            : undefined;\n\n                        return (\n                            <option\n                                key={`${id}-${item.node.value}`}\n                                value={item.node.value}\n                                selected={isSelected}\n                            >\n                                {item.textValue}\n                            </option>\n                        );\n                    })}\n                </select>\n            </label>\n        </VisuallyHidden>\n    );\n}\n\nexport interface SelectProps<T extends boolean>\n    extends UseSelectProps<T>,\n        Omit<HTMLDreamProps<\"div\">, keyof UseSelectProps<T>> {\n    children?: ReactNode;\n}\n\n/**\n * Select component\n *\n * @See Docs https://dreamy-ui.com/docs/components/select\n */\nexport const Select: <T extends boolean = false>(props: SelectProps<T>) => React.JSX.Element =\n    withProvider(function SelectRoot<T extends boolean = false>({\n        children,\n        ...props\n    }: SelectProps<T>) {\n        const [cssProps, restProps] = splitCssProps(props);\n        const ctx = useSelect<T>(restProps);\n\n        return (\n            <SelectProvider value={ctx as any}>\n                <Box\n                    {...ctx.getRootProps({\n                        ...cssProps,\n                        className: restProps.className\n                    })}\n                >\n                    <HiddenSelect {...(ctx.getHiddenSelectProps() as any)} />\n                    <Popover\n                        placement=\"bottom\"\n                        isOpen={ctx.isOpen}\n                        onOpen={ctx.onOpen}\n                        onClose={ctx.onClose}\n                        hasArrow={false}\n                        initialFocusRef={ctx.triggerRef}\n                        lazyBehavior=\"keepMounted\"\n                        reduceMotion={ctx.reduceMotion}\n                        {...props.popoverProps}\n                    >\n                        <SelectDescendantsProvider value={ctx.descendants}>\n                            {children}\n                        </SelectDescendantsProvider>\n                    </Popover>\n                </Box>\n            </SelectProvider>\n        );\n    }, \"root\") as any;\n\nexport interface SelectTriggerProps extends HTMLDreamyProps<\"button\"> {\n    /**\n     * Icon to show in the trigger.\n     */\n    icon?: React.ReactNode;\n    /**\n     * Placeholder text to show when no item is selected.\n     */\n    placeholder?: string;\n    /**\n     * Text to show when multiple items are selected.\n     */\n    multipleSelectedText?: (selectedKeys: string[]) => string;\n}\n\nexport const SelectTrigger = withContext(\n    forwardRef<HTMLButtonElement, SelectTriggerProps>(function SelectTrigger(\n        {\n            children,\n            placeholder,\n            icon,\n            multipleSelectedText = (selectedKeys) => `${selectedKeys.length} Selected`,\n            ...rest\n        },\n        ref\n    ) {\n        const { getTriggerProps, selectedKeys, descendants, isClearable } = useSelectContext();\n\n        const selectedNames = selectedKeys.map((key) => {\n            const item: any = Array.from(descendants.values()).find((node: any) => {\n                return node.node.value === key;\n            });\n            return item?.textValue;\n        });\n\n        const [, forceUpdate] = useState({});\n\n        useSafeLayoutEffect(() => {\n            forceUpdate({});\n        }, [descendants.values()]);\n\n        return (\n            <>\n                <PopoverTrigger>\n                    <dreamy.button {...(getTriggerProps(rest, ref) as any)}>\n                        {icon && icon}\n\n                        <span>\n                            {selectedNames.length === 1\n                                ? selectedNames[0]\n                                : selectedNames.length > 1\n                                  ? multipleSelectedText(selectedNames)\n                                  : placeholder}\n                        </span>\n                        <SelectIndicatorGroup>\n                            {isClearable && selectedKeys.length > 0 && <SelectClearButton />}\n                            <SelectIndicator />\n                        </SelectIndicatorGroup>\n                    </dreamy.button>\n                </PopoverTrigger>\n            </>\n        );\n    }),\n    \"trigger\"\n);\n\nexport interface SelectContentProps extends PopoverContentProps {}\n\nexport const SelectContent = withContext(\n    forwardRef<HTMLDivElement, SelectContentProps>(function SelectContent(props, ref) {\n        const { children, ...rest } = props;\n\n        const { getContentProps } = useSelectContext();\n\n        return <PopoverContent {...getContentProps(rest, ref)}>{children}</PopoverContent>;\n    }),\n    \"content\"\n);\n\nexport interface SelectItemProps extends UseSelectItemProps {}\n\nexport const SelectItem = withContext(\n    forwardRef<HTMLDivElement, SelectItemProps>(function SelectItem(props, ref) {\n        const { selectedStrategy, selectedKeys } = useSelectContext();\n        const itemProps = useSelectItem(props, ref);\n\n        return (\n            <dreamy.button {...(itemProps as any)}>\n                {itemProps.children}\n\n                {(selectedStrategy === \"checkmark\" || selectedStrategy === \"both\") &&\n                    selectedKeys.includes(itemProps.value) && <SelectItemIndicator />}\n            </dreamy.button>\n        );\n    }),\n    \"item\"\n);\n\n/**\n * @internal\n */\nconst SelectIndicatorGroup = withContext(Box, \"indicatorGroup\");\n\nconst CheckIcon = forwardRef<SVGSVGElement, SVGProps<SVGSVGElement>>(\n    function CheckIcon(props, ref) {\n        return (\n            <svg\n                aria-hidden=\"true\"\n                width=\"16\"\n                height=\"16\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                {...props}\n                ref={ref}\n            >\n                <path d=\"M20 6 9 17l-5-5\" />\n            </svg>\n        );\n    }\n);\n\nconst SelectIndicator = withContext(CheckIcon, \"indicator\");\n\nexport interface SelectClearButtonProps extends HTMLDreamyProps<\"button\"> {}\n\nconst SelectClearButton = withContext(\n    forwardRef<HTMLButtonElement, SelectClearButtonProps>(function SelectClearButton(props, ref) {\n        const { getClearButtonProps } = useSelectContext();\n\n        return (\n            <dreamy.button {...getClearButtonProps(props, ref)}>\n                <dreamy.svg asChild>\n                    <svg\n                        aria-hidden=\"true\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                    >\n                        <path d=\"M18 6 6 18\" />\n                        <path d=\"m6 6 12 12\" />\n                    </svg>\n                </dreamy.svg>\n            </dreamy.button>\n        );\n    }),\n    \"clearButton\"\n);\nconst SelectItemIndicator = withContext(CheckIcon, \"itemIndicator\");\n"
  },
  "component": "Select",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "select"
  ]
}