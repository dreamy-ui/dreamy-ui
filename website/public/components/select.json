{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./popover",
    "./style-context",
    "./visually-hidden"
  ],
  "id": "select",
  "file": {
    "name": "select.tsx",
    "content": "\"use client\";\r\n\r\nimport {\r\n    type HTMLDreamProps,\r\n    SelectDescendantsProvider,\r\n    SelectProvider,\r\n    type UseSelectItemProps,\r\n    type UseSelectProps,\r\n    useHiddenSelect,\r\n    useSafeLayoutEffect,\r\n    useSelect,\r\n    useSelectContext,\r\n    useSelectItem\r\n} from \"@dreamy-ui/react\";\r\nimport type React from \"react\";\r\nimport { type ReactNode, type RefObject, type SVGProps, forwardRef, useState } from \"react\";\r\nimport { splitCssProps } from \"styled-system/jsx\";\r\nimport { select } from \"styled-system/recipes\";\r\nimport { Box } from \"./box\";\r\nimport { type FocusableElement, type HTMLDreamyProps, dreamy } from \"./factory\";\r\nimport { Popover, PopoverContent, type PopoverContentProps, PopoverTrigger } from \"./popover\";\r\nimport { createStyleContext } from \"./style-context\";\r\nimport { VisuallyHidden } from \"./visually-hidden\";\r\nconst { withProvider, withContext } = createStyleContext(select);\r\n\r\nexport interface HiddenSelectProps {\r\n    placeholder: string;\r\n    multiple: boolean;\r\n    autoComplete: string;\r\n    triggerRef: RefObject<FocusableElement>;\r\n    domRef: RefObject<HTMLSelectElement>;\r\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    onChangeValue: (value: string | string[]) => void;\r\n}\r\n\r\nfunction HiddenSelect(props: HiddenSelectProps) {\r\n    const { domRef, placeholder } = props;\r\n\r\n    const { containerProps, selectProps, descendants, id, selectedKeys } = useHiddenSelect({\r\n        ...props,\r\n        domRef\r\n    });\r\n\r\n    const [, forceUpdate] = useState({});\r\n\r\n    useSafeLayoutEffect(() => {\r\n        forceUpdate({});\r\n    }, []);\r\n\r\n    const items = Array.from(descendants.values());\r\n\r\n    return (\r\n        <VisuallyHidden {...containerProps}>\r\n            <label>\r\n                {placeholder}\r\n                <select\r\n                    {...selectProps}\r\n                    ref={domRef}\r\n                >\r\n                    <option />\r\n                    {items.map((item: any) => {\r\n                        const isSelected = selectProps.multiple\r\n                            ? selectedKeys.includes(item.node.value)\r\n                            : undefined;\r\n\r\n                        return (\r\n                            <option\r\n                                key={`${id}-${item.node.value}`}\r\n                                value={item.node.value}\r\n                                selected={isSelected}\r\n                            >\r\n                                {item.textValue}\r\n                            </option>\r\n                        );\r\n                    })}\r\n                </select>\r\n            </label>\r\n        </VisuallyHidden>\r\n    );\r\n}\r\n\r\nexport interface SelectProps<T extends boolean>\r\n    extends UseSelectProps<T>,\r\n        Omit<HTMLDreamProps<\"div\">, keyof UseSelectProps<T>> {\r\n    children?: ReactNode;\r\n}\r\n\r\n/**\r\n * Select component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/select\r\n */\r\nexport const Select: <T extends boolean = false>(props: SelectProps<T>) => React.JSX.Element =\r\n    withProvider(function SelectRoot<T extends boolean = false>({\r\n        children,\r\n        ...props\r\n    }: SelectProps<T>) {\r\n        const [cssProps, restProps] = splitCssProps(props);\r\n        const ctx = useSelect<T>(restProps);\r\n\r\n        return (\r\n            <SelectProvider value={ctx as any}>\r\n                <Box\r\n                    {...ctx.getRootProps({\r\n                        ...cssProps,\r\n                        className: restProps.className\r\n                    })}\r\n                >\r\n                    <HiddenSelect {...(ctx.getHiddenSelectProps() as any)} />\r\n                    <Popover\r\n                        placement=\"bottom\"\r\n                        isOpen={ctx.isOpen}\r\n                        onOpen={ctx.onOpen}\r\n                        onClose={ctx.onClose}\r\n                        hasArrow={false}\r\n                        initialFocusRef={ctx.triggerRef}\r\n                        lazyBehavior=\"keepMounted\"\r\n                        reduceMotion={ctx.reduceMotion}\r\n                        {...props.popoverProps}\r\n                    >\r\n                        <SelectDescendantsProvider value={ctx.descendants}>\r\n                            {children}\r\n                        </SelectDescendantsProvider>\r\n                    </Popover>\r\n                </Box>\r\n            </SelectProvider>\r\n        );\r\n    }, \"root\") as any;\r\n\r\nexport interface SelectTriggerProps extends HTMLDreamyProps<\"button\"> {\r\n    /**\r\n     * Icon to show in the trigger.\r\n     */\r\n    icon?: React.ReactNode;\r\n    /**\r\n     * Placeholder text to show when no item is selected.\r\n     */\r\n    placeholder?: string;\r\n    /**\r\n     * Text to show when multiple items are selected.\r\n     */\r\n    multipleSelectedText?: (selectedKeys: string[]) => string;\r\n}\r\n\r\nexport const SelectTrigger = withContext(\r\n    forwardRef<HTMLButtonElement, SelectTriggerProps>(function SelectTrigger(\r\n        {\r\n            children,\r\n            placeholder,\r\n            icon,\r\n            multipleSelectedText = (selectedKeys) => `${selectedKeys.length} Selected`,\r\n            ...rest\r\n        },\r\n        ref\r\n    ) {\r\n        const { getTriggerProps, selectedKeys, descendants, isClearable } = useSelectContext();\r\n\r\n        const selectedNames = selectedKeys.map((key) => {\r\n            const item: any = Array.from(descendants.values()).find((node: any) => {\r\n                return node.node.value === key;\r\n            });\r\n            return item?.textValue;\r\n        });\r\n\r\n        const [, forceUpdate] = useState({});\r\n\r\n        useSafeLayoutEffect(() => {\r\n            forceUpdate({});\r\n        }, [descendants.values()]);\r\n\r\n        return (\r\n            <>\r\n                <PopoverTrigger>\r\n                    <dreamy.button {...(getTriggerProps(rest, ref) as any)}>\r\n                        {icon && icon}\r\n\r\n                        <span>\r\n                            {selectedNames.length === 1\r\n                                ? selectedNames[0]\r\n                                : selectedNames.length > 1\r\n                                  ? multipleSelectedText(selectedNames)\r\n                                  : placeholder}\r\n                        </span>\r\n                        <SelectIndicatorGroup>\r\n                            {isClearable && selectedKeys.length > 0 && <SelectClearButton />}\r\n                            <SelectIndicator />\r\n                        </SelectIndicatorGroup>\r\n                    </dreamy.button>\r\n                </PopoverTrigger>\r\n            </>\r\n        );\r\n    }),\r\n    \"trigger\"\r\n);\r\n\r\nexport interface SelectContentProps extends PopoverContentProps {}\r\n\r\nexport const SelectContent = withContext(\r\n    forwardRef<HTMLDivElement, SelectContentProps>(function SelectContent(props, ref) {\r\n        const { children, ...rest } = props;\r\n\r\n        const { getContentProps } = useSelectContext();\r\n\r\n        return <PopoverContent {...getContentProps(rest, ref)}>{children}</PopoverContent>;\r\n    }),\r\n    \"content\"\r\n);\r\n\r\nexport interface SelectItemProps extends UseSelectItemProps {}\r\n\r\nexport const SelectItem = withContext(\r\n    forwardRef<HTMLDivElement, SelectItemProps>(function SelectItem(props, ref) {\r\n        const { selectedStrategy, selectedKeys } = useSelectContext();\r\n        const itemProps = useSelectItem(props, ref);\r\n\r\n        return (\r\n            <dreamy.button {...(itemProps as any)}>\r\n                {itemProps.children}\r\n\r\n                {(selectedStrategy === \"checkmark\" || selectedStrategy === \"both\") &&\r\n                    selectedKeys.includes(itemProps.value) && <SelectItemIndicator />}\r\n            </dreamy.button>\r\n        );\r\n    }),\r\n    \"item\"\r\n);\r\n\r\n/**\r\n * @internal\r\n */\r\nconst SelectIndicatorGroup = withContext(Box, \"indicatorGroup\");\r\n\r\nconst CheckIcon = forwardRef<SVGSVGElement, SVGProps<SVGSVGElement>>(\r\n    function CheckIcon(props, ref) {\r\n        return (\r\n            <svg\r\n                aria-hidden=\"true\"\r\n                width=\"16\"\r\n                height=\"16\"\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                {...props}\r\n                ref={ref}\r\n            >\r\n                <path d=\"M20 6 9 17l-5-5\" />\r\n            </svg>\r\n        );\r\n    }\r\n);\r\n\r\nconst SelectIndicator = withContext(CheckIcon, \"indicator\");\r\n\r\nexport interface SelectClearButtonProps extends HTMLDreamyProps<\"button\"> {}\r\n\r\nconst SelectClearButton = withContext(\r\n    forwardRef<HTMLButtonElement, SelectClearButtonProps>(function SelectClearButton(props, ref) {\r\n        const { getClearButtonProps } = useSelectContext();\r\n\r\n        return (\r\n            <dreamy.button {...getClearButtonProps(props, ref)}>\r\n                <dreamy.svg asChild>\r\n                    <svg\r\n                        aria-hidden=\"true\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        strokeWidth=\"2\"\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                    >\r\n                        <path d=\"M18 6 6 18\" />\r\n                        <path d=\"m6 6 12 12\" />\r\n                    </svg>\r\n                </dreamy.svg>\r\n            </dreamy.button>\r\n        );\r\n    }),\r\n    \"clearButton\"\r\n);\r\nconst SelectItemIndicator = withContext(CheckIcon, \"itemIndicator\");\r\n"
  },
  "component": "Select",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "select"
  ]
}