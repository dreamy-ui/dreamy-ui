{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./style-context",
    "./visually-hidden"
  ],
  "id": "slider",
  "file": {
    "name": "slider.tsx",
    "content": "import { SliderProvider, type UseSliderProps, useSlider, useSliderContext } from \"@dreamy-ui/react\";\nimport { forwardRef } from \"react\";\nimport { slider } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport type { HTMLDreamyProps } from \"./factory\";\nimport { createStyleContext } from \"./style-context\";\nimport { VisuallyHiddenInput } from \"./visually-hidden\";\n\nconst { withProvider, withContext } = createStyleContext(slider);\n\nexport interface SliderProps\n    extends UseSliderProps,\n        Omit<HTMLDreamyProps<\"div\">, keyof UseSliderProps> {}\n\n/**\n * Slider component\n *\n * @See Docs https://dreamy-ui.com/docs/components/slider\n */\nexport const Slider = withProvider(\n    forwardRef<HTMLDivElement, SliderProps>((props, ref) => {\n        const { getRootProps, getInputProps, ...rest } = useSlider(props);\n\n        return (\n            <SliderProvider value={rest}>\n                <VisuallyHiddenInput {...(getInputProps(undefined, ref) as any)} />\n                <Box {...(getRootProps(undefined, ref) as any)} />\n            </SliderProvider>\n        );\n    }),\n    \"root\"\n);\n\nexport interface SliderTrackProps extends HTMLDreamyProps<\"div\"> {}\n\nexport const SliderTrack = withContext(\n    forwardRef<HTMLDivElement, SliderTrackProps>((props, ref) => {\n        const { getTrackProps } = useSliderContext();\n\n        return <Box {...getTrackProps(props, ref)} />;\n    }),\n    \"track\"\n);\n\nexport interface SliderFilledTrackProps extends HTMLDreamyProps<\"div\"> {}\n\nexport const SliderFilledTrack = withContext(\n    forwardRef<HTMLDivElement, SliderFilledTrackProps>((props, ref) => {\n        const { getInnerTrackProps } = useSliderContext();\n        return (\n            <Box\n                ref={ref}\n                {...getInnerTrackProps(props, ref)}\n            />\n        );\n    }),\n    \"trackFilled\"\n);\n\nexport interface SliderThumbProps extends HTMLDreamyProps<\"div\"> {}\n\nexport const SliderThumb = withContext(\n    forwardRef<HTMLDivElement, SliderThumbProps>((props, ref) => {\n        const { getThumbProps } = useSliderContext();\n\n        return <Box {...getThumbProps(props, ref)} />;\n    }),\n    \"thumb\"\n);\n\nexport interface SliderMarkProps extends HTMLDreamyProps<\"div\"> {\n    value: number;\n}\n\nexport const SliderMark = withContext(\n    forwardRef<HTMLDivElement, SliderMarkProps>((props, ref) => {\n        const { getMarkerProps } = useSliderContext();\n\n        return <Box {...getMarkerProps(props, ref)} />;\n    }),\n    \"marker\"\n);\n"
  },
  "component": "Slider",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "slider"
  ]
}