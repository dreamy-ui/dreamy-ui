{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./button",
    "./factory",
    "./flex",
    "./motion",
    "./style-context"
  ],
  "id": "tabs",
  "file": {
    "name": "tabs.tsx",
    "content": "\"use client\";\n\nimport {\n    type ButtonProps,\n    TabsDescendantsProvider,\n    TabsProvider,\n    type UseTabListProps,\n    type UseTabOptions,\n    type UseTabsProps,\n    useCanUseDOM,\n    useDefaultTransition,\n    useTab,\n    useTabList,\n    useTabPanel,\n    useTabPanels,\n    useTabs,\n    useTabsContext\n} from \"@dreamy-ui/react\";\nimport { forwardRef } from \"react\";\nimport { tabs } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { Button } from \"./button\";\nimport type { HTMLDreamyProps } from \"./factory\";\nimport { Flex, type FlexProps } from \"./flex\";\nimport { MotionFlex, type MotionFlexProps } from \"./motion\";\nimport { createStyleContext } from \"./style-context\";\n\nconst { withProvider, withContext } = createStyleContext(tabs, (prop) => prop === \"orientation\");\n\nexport interface TabsProps\n    extends UseTabsProps,\n        Omit<HTMLDreamyProps<\"div\">, \"onChange\" | \"direction\"> {\n    children: React.ReactNode;\n}\n\n/**\n * Tabs component.\n *\n * @See Docs https://dreamy-ui.com/docs/components/tabs\n */\nexport const Tabs = withProvider(\n    forwardRef<HTMLDivElement, TabsProps>(function Tabs(props, ref) {\n        const { children, ...rest } = props;\n\n        const { htmlProps, descendants, ...ctx } = useTabs(rest);\n\n        return (\n            <TabsDescendantsProvider value={descendants}>\n                <TabsProvider value={ctx}>\n                    <Box\n                        ref={ref}\n                        {...htmlProps}\n                    >\n                        {children}\n                    </Box>\n                </TabsProvider>\n            </TabsDescendantsProvider>\n        );\n    }),\n    \"root\"\n);\n\nexport interface TabListProps extends UseTabListProps, Omit<FlexProps, \"onKeyDown\" | \"ref\"> {}\n\nexport const TabList = withContext(\n    forwardRef<HTMLDivElement, TabListProps>(function TabList(props, ref) {\n        const tablistProps = useTabList({ ...props, ref });\n\n        return <Flex {...tablistProps} />;\n    }),\n    \"tabList\"\n);\n\nexport interface TabProps extends UseTabOptions, ButtonProps {}\n\nexport const Tab = withContext(\n    forwardRef<HTMLButtonElement, TabProps>(function Tab(props, ref) {\n        const { children, ...rest } = props;\n\n        const { isSelected, props: tabProps } = useTab({ ...rest, ref });\n\n        return (\n            <Button\n                size={\"sm\"}\n                variant={\"ghost\"}\n                disableRipple\n                {...tabProps}\n            >\n                {children}\n                {isSelected && <TabIndicator />}\n            </Button>\n        );\n    }),\n    \"tab\"\n);\n\nexport interface TabPanelsProps extends FlexProps {}\n\nexport const TabPanels = withContext(\n    forwardRef<HTMLDivElement, TabPanelsProps>(function TabPanels(props, ref) {\n        const panelsProps = useTabPanels(props);\n\n        return (\n            <Flex\n                {...panelsProps}\n                ref={ref}\n            />\n        );\n    }),\n    \"tabPanels\"\n);\n\nexport interface TabPanelProps extends HTMLDreamyProps<\"div\"> {}\n\nexport const TabPanel = withContext(\n    forwardRef<HTMLDivElement, TabPanelProps>(function TabPanel(props, ref) {\n        const panelProps = useTabPanel({ ...props, ref });\n\n        return (\n            <Flex\n                {...panelProps}\n                ref={ref}\n            />\n        );\n    }),\n    \"tabPanel\"\n);\n\nexport interface TabIndicatorProps extends MotionFlexProps {}\n\n/**\n * Used inside Tab components\n * @internal\n */\nconst TabIndicator = withContext(\n    forwardRef<HTMLDivElement, TabIndicatorProps>(function TabIndicator(props, ref) {\n        const { id } = useTabsContext();\n        const transition = useDefaultTransition();\n        const domAvailable = useCanUseDOM();\n\n        return (\n            <MotionFlex\n                ref={ref}\n                {...props}\n                // as={\"span\"}\n                layout\n                layoutId={`${id}-indicator`}\n                layoutDependency={false}\n                transition={{\n                    ...transition,\n                    // @ts-ignore - again stupid\n                    duration: (transition?.duration ?? 0.2) * 1.5\n                }}\n                // animating indicator enter on hydration\n                initial={!domAvailable ? { opacity: 0, scale: 0.95 } : undefined}\n                animate={{ opacity: 1, scale: 1 }}\n                rounded={\"inherit\"}\n            />\n        );\n    }),\n    \"tabIndicator\"\n);\n"
  },
  "component": "Tabs",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "tabs"
  ]
}