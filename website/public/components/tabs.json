{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./button",
    "./factory",
    "./flex",
    "./motion",
    "./style-context"
  ],
  "id": "tabs",
  "file": {
    "name": "tabs.tsx",
    "content": "\"use client\";\r\n\r\nimport {\r\n    type ButtonProps,\r\n    TabsDescendantsProvider,\r\n    TabsProvider,\r\n    type UseTabListProps,\r\n    type UseTabOptions,\r\n    type UseTabsProps,\r\n    useCanUseDOM,\r\n    useDefaultTransition,\r\n    useTab,\r\n    useTabList,\r\n    useTabPanel,\r\n    useTabPanels,\r\n    useTabs,\r\n    useTabsContext\r\n} from \"@dreamy-ui/react\";\r\nimport { forwardRef } from \"react\";\r\nimport { tabs } from \"styled-system/recipes\";\r\nimport { Box } from \"./box\";\r\nimport { Button } from \"./button\";\r\nimport type { HTMLDreamyProps } from \"./factory\";\r\nimport { Flex, type FlexProps } from \"./flex\";\r\nimport { MotionFlex, type MotionFlexProps } from \"./motion\";\r\nimport { createStyleContext } from \"./style-context\";\r\n\r\nconst { withProvider, withContext } = createStyleContext(tabs, (prop) => prop === \"orientation\");\r\n\r\nexport interface TabsProps\r\n    extends UseTabsProps,\r\n        Omit<HTMLDreamyProps<\"div\">, \"onChange\" | \"direction\"> {\r\n    children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * Tabs component.\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/tabs\r\n */\r\nexport const Tabs = withProvider(\r\n    forwardRef<HTMLDivElement, TabsProps>(function Tabs(props, ref) {\r\n        const { children, ...rest } = props;\r\n\r\n        const { htmlProps, descendants, ...ctx } = useTabs(rest);\r\n\r\n        return (\r\n            <TabsDescendantsProvider value={descendants}>\r\n                <TabsProvider value={ctx}>\r\n                    <Box\r\n                        ref={ref}\r\n                        {...htmlProps}\r\n                    >\r\n                        {children}\r\n                    </Box>\r\n                </TabsProvider>\r\n            </TabsDescendantsProvider>\r\n        );\r\n    }),\r\n    \"root\"\r\n);\r\n\r\nexport interface TabListProps extends UseTabListProps, Omit<FlexProps, \"onKeyDown\" | \"ref\"> {}\r\n\r\nexport const TabList = withContext(\r\n    forwardRef<HTMLDivElement, TabListProps>(function TabList(props, ref) {\r\n        const tablistProps = useTabList({ ...props, ref });\r\n\r\n        return <Flex {...tablistProps} />;\r\n    }),\r\n    \"tabList\"\r\n);\r\n\r\nexport interface TabProps extends UseTabOptions, ButtonProps {}\r\n\r\nexport const Tab = withContext(\r\n    forwardRef<HTMLButtonElement, TabProps>(function Tab(props, ref) {\r\n        const { children, ...rest } = props;\r\n\r\n        const { isSelected, props: tabProps } = useTab({ ...rest, ref });\r\n\r\n        return (\r\n            <Button\r\n                size={\"sm\"}\r\n                variant={\"ghost\"}\r\n                disableRipple\r\n                {...tabProps}\r\n            >\r\n                {children}\r\n                {isSelected && <TabIndicator />}\r\n            </Button>\r\n        );\r\n    }),\r\n    \"tab\"\r\n);\r\n\r\nexport interface TabPanelsProps extends FlexProps {}\r\n\r\nexport const TabPanels = withContext(\r\n    forwardRef<HTMLDivElement, TabPanelsProps>(function TabPanels(props, ref) {\r\n        const panelsProps = useTabPanels(props);\r\n\r\n        return (\r\n            <Flex\r\n                {...panelsProps}\r\n                ref={ref}\r\n            />\r\n        );\r\n    }),\r\n    \"tabPanels\"\r\n);\r\n\r\nexport interface TabPanelProps extends HTMLDreamyProps<\"div\"> {}\r\n\r\nexport const TabPanel = withContext(\r\n    forwardRef<HTMLDivElement, TabPanelProps>(function TabPanel(props, ref) {\r\n        const panelProps = useTabPanel({ ...props, ref });\r\n\r\n        return (\r\n            <Flex\r\n                {...panelProps}\r\n                ref={ref}\r\n            />\r\n        );\r\n    }),\r\n    \"tabPanel\"\r\n);\r\n\r\nexport interface TabIndicatorProps extends MotionFlexProps {}\r\n\r\n/**\r\n * Used inside Tab components\r\n * @internal\r\n */\r\nconst TabIndicator = withContext(\r\n    forwardRef<HTMLDivElement, TabIndicatorProps>(function TabIndicator(props, ref) {\r\n        const { id } = useTabsContext();\r\n        const transition = useDefaultTransition();\r\n        const domAvailable = useCanUseDOM();\r\n\r\n        return (\r\n            <MotionFlex\r\n                ref={ref}\r\n                {...props}\r\n                layout\r\n                layoutId={`${id}-indicator`}\r\n                layoutDependency={false}\r\n                transition={{\r\n                    ...transition,\r\n                    duration: ((transition as any)?.duration ?? 0.2) * 1.5\r\n                }}\r\n                initial={!domAvailable ? { opacity: 0, scale: 0.95 } : undefined}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                rounded={\"inherit\"}\r\n            />\r\n        );\r\n    }),\r\n    \"tabIndicator\"\r\n);\r\n"
  },
  "component": "Tabs",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "tabs"
  ]
}