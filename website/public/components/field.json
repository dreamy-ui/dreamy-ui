{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./icon"
  ],
  "id": "field",
  "file": {
    "name": "field.tsx",
    "content": "\"use client\";\n\nimport {\n    FieldProvider,\n    type UserFeedbackProps,\n    useFieldContext,\n    useFieldProvider\n} from \"@dreamy-ui/react\";\nimport { forwardRef } from \"react\";\nimport { type FieldVariantProps, field } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\nimport { Icon, type IconProps } from \"./icon\";\n\nexport interface FieldLabelProps extends HTMLDreamyProps<\"label\"> {\n    requiredIndicator?: React.ReactNode;\n    optionalIndicator?: React.ReactNode;\n}\n\nexport const FieldLabel = forwardRef<HTMLLabelElement, FieldLabelProps>(\n    function FieldLabel(props, ref) {\n        const {\n            children,\n            requiredIndicator = <RequiredIndicator />,\n            optionalIndicator = null,\n            ...rest\n        } = props;\n\n        const field = useFieldContext();\n        const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest };\n\n        return (\n            <Box\n                as={\"label\"}\n                data-part=\"label\"\n                {...ownProps}\n            >\n                {children}\n                {field?.isRequired ? requiredIndicator : optionalIndicator}\n            </Box>\n        );\n    }\n);\n\nexport interface RequiredIndicatorProps extends HTMLDreamyProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nconst RequiredIndicator = forwardRef<HTMLSpanElement, RequiredIndicatorProps>(\n    function RequiredIndicator(props, ref) {\n        const field = useFieldContext();\n\n        if (!field?.isRequired) return null;\n\n        return (\n            <Box\n                as={\"span\"}\n                data-part=\"requiredIndicator\"\n                {...field?.getRequiredIndicatorProps(props, ref)}\n            />\n        );\n    }\n);\n\nexport interface FieldErrorProps extends HTMLDreamyProps<\"label\"> {}\n\nexport const FieldError = forwardRef<HTMLLabelElement, FieldErrorProps>(\n    function FieldError(props, ref) {\n        const field = useFieldContext();\n\n        if (!field?.isInvalid) return null;\n\n        return (\n            <Box\n                data-part=\"error\"\n                {...field?.getErrorMessageProps(props, ref)}\n            />\n        );\n    }\n);\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FieldErrorIcon = forwardRef<SVGSVGElement, IconProps>((props, ref) => {\n    const field = useFieldContext();\n\n    if (!field?.isInvalid) return null;\n\n    return (\n        <Icon\n            ref={ref}\n            aria-hidden\n            size={\"sm\"}\n            data-part=\"errorIcon\"\n            {...props}\n        >\n            <svg\n                viewBox=\"0 0 24 24\"\n                fill=\"currentColor\"\n                role=\"img\"\n                aria-label=\"Error\"\n            >\n                <path\n                    fill=\"currentColor\"\n                    d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n                />\n            </svg>\n        </Icon>\n    );\n});\n\nexport interface FieldHelpTextProps extends HTMLDreamyProps<\"div\"> {}\n\nexport const FieldHelpText = forwardRef<HTMLDivElement, FieldHelpTextProps>(\n    function FieldHelpText(props, ref) {\n        const field = useFieldContext();\n\n        if (field?.isInvalid) return null;\n\n        return (\n            <Box\n                data-part=\"helpText\"\n                {...field?.getHelpTextProps(props, ref)}\n            />\n        );\n    }\n);\n\ninterface FieldContext extends UserFeedbackProps {\n    /**\n     * The label text used to inform users as to what information is\n     * requested for a text field.\n     */\n    label?: string;\n    /**\n     * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n     * - The form element (e.g. Input) gets the `id`\n     * - The form label id: `form-label-${id}`\n     * - The form error text id: `form-error-text-${id}`\n     * - The form helper text id: `form-helper-text-${id}`\n     */\n    id?: string;\n}\n\nexport interface FieldProps extends HTMLDreamyProps<\"div\">, FieldContext, FieldVariantProps {\n    helpText?: string;\n    error?: string;\n}\n\nconst StyledField = dreamy(\"div\", field);\n\n/**\n * Field component\n *\n * @See Docs https://dreamy-ui.com/docs/components/field\n */\nexport const Field = forwardRef<HTMLDivElement, FieldProps>(function Field(\n    { children, label, helpText, error, ...props },\n    ref\n) {\n    const { getRootProps, htmlProps: _, ...context } = useFieldProvider(props);\n\n    return (\n        <FieldProvider value={context}>\n            <StyledField {...getRootProps({}, ref)}>\n                {label ? <FieldLabel>{label}</FieldLabel> : null}\n                {children}\n                {helpText && <FieldHelpText>{helpText}</FieldHelpText>}\n                {error && <FieldError>{error}</FieldError>}\n            </StyledField>\n        </FieldProvider>\n    );\n});\n"
  },
  "component": "Field",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "field"
  ]
}