{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./icon"
  ],
  "id": "field",
  "file": {
    "name": "field.tsx",
    "content": "\"use client\";\r\n\r\nimport {\r\n    FieldProvider,\r\n    type UserFeedbackProps,\r\n    useFieldContext,\r\n    useFieldProvider\r\n} from \"@dreamy-ui/react\";\r\nimport { forwardRef } from \"react\";\r\nimport { type FieldVariantProps, field } from \"styled-system/recipes\";\r\nimport { Box } from \"./box\";\r\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\r\nimport { Icon, type IconProps } from \"./icon\";\r\n\r\nexport interface FieldLabelProps extends HTMLDreamyProps<\"label\"> {\r\n    requiredIndicator?: React.ReactNode;\r\n    optionalIndicator?: React.ReactNode;\r\n}\r\n\r\nexport const FieldLabel = forwardRef<HTMLLabelElement, FieldLabelProps>(\r\n    function FieldLabel(props, ref) {\r\n        const {\r\n            children,\r\n            requiredIndicator = <RequiredIndicator />,\r\n            optionalIndicator = null,\r\n            ...rest\r\n        } = props;\r\n\r\n        const field = useFieldContext();\r\n        const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest };\r\n\r\n        return (\r\n            <Box\r\n                as={\"label\"}\r\n                data-part=\"label\"\r\n                {...ownProps}\r\n            >\r\n                {children}\r\n                {field?.isRequired ? requiredIndicator : optionalIndicator}\r\n            </Box>\r\n        );\r\n    }\r\n);\r\n\r\nexport interface RequiredIndicatorProps extends HTMLDreamyProps<\"span\"> {}\r\n\r\n/**\r\n * Used to show a \"required\" text or an asterisks (*) to indicate that\r\n * a field is required.\r\n */\r\nconst RequiredIndicator = forwardRef<HTMLSpanElement, RequiredIndicatorProps>(\r\n    function RequiredIndicator(props, ref) {\r\n        const field = useFieldContext();\r\n\r\n        if (!field?.isRequired) return null;\r\n\r\n        return (\r\n            <Box\r\n                as={\"span\"}\r\n                data-part=\"requiredIndicator\"\r\n                {...field?.getRequiredIndicatorProps(props, ref)}\r\n            />\r\n        );\r\n    }\r\n);\r\n\r\nexport interface FieldErrorProps extends HTMLDreamyProps<\"label\"> {}\r\n\r\nexport const FieldError = forwardRef<HTMLLabelElement, FieldErrorProps>(\r\n    function FieldError(props, ref) {\r\n        const field = useFieldContext();\r\n\r\n        if (!field?.isInvalid) return null;\r\n\r\n        return (\r\n            <Box\r\n                data-part=\"error\"\r\n                {...field?.getErrorMessageProps(props, ref)}\r\n            />\r\n        );\r\n    }\r\n);\r\n\r\n/**\r\n * Used as the visual indicator that a field is invalid or\r\n * a field has incorrect values.\r\n */\r\nexport const FieldErrorIcon = forwardRef<SVGSVGElement, IconProps>((props, ref) => {\r\n    const field = useFieldContext();\r\n\r\n    if (!field?.isInvalid) return null;\r\n\r\n    return (\r\n        <Icon\r\n            ref={ref}\r\n            aria-hidden\r\n            size={\"sm\"}\r\n            data-part=\"errorIcon\"\r\n            {...props}\r\n        >\r\n            <svg\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"currentColor\"\r\n                role=\"img\"\r\n                aria-label=\"Error\"\r\n            >\r\n                <path\r\n                    fill=\"currentColor\"\r\n                    d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\r\n                />\r\n            </svg>\r\n        </Icon>\r\n    );\r\n});\r\n\r\nexport interface FieldHelpTextProps extends HTMLDreamyProps<\"div\"> {}\r\n\r\nexport const FieldHelpText = forwardRef<HTMLDivElement, FieldHelpTextProps>(\r\n    function FieldHelpText(props, ref) {\r\n        const field = useFieldContext();\r\n\r\n        if (field?.isInvalid) return null;\r\n\r\n        return (\r\n            <Box\r\n                data-part=\"helpText\"\r\n                {...field?.getHelpTextProps(props, ref)}\r\n            />\r\n        );\r\n    }\r\n);\r\n\r\ninterface FieldContext extends UserFeedbackProps {\r\n    /**\r\n     * The label text used to inform users as to what information is\r\n     * requested for a text field.\r\n     */\r\n    label?: string;\r\n    /**\r\n     * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\r\n     * - The form element (e.g. Input) gets the `id`\r\n     * - The form label id: `form-label-${id}`\r\n     * - The form error text id: `form-error-text-${id}`\r\n     * - The form helper text id: `form-helper-text-${id}`\r\n     */\r\n    id?: string;\r\n}\r\n\r\nexport interface FieldProps extends HTMLDreamyProps<\"div\">, FieldContext, FieldVariantProps {\r\n    helpText?: string;\r\n    error?: string;\r\n}\r\n\r\nconst StyledField = dreamy(\"div\", field);\r\n\r\n/**\r\n * Field component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/field\r\n */\r\nexport const Field = forwardRef<HTMLDivElement, FieldProps>(function Field(\r\n    { children, label, helpText, error, ...props },\r\n    ref\r\n) {\r\n    const { getRootProps, htmlProps: _, ...context } = useFieldProvider(props);\r\n\r\n    return (\r\n        <FieldProvider value={context}>\r\n            <StyledField {...getRootProps({}, ref)}>\r\n                {label ? <FieldLabel>{label}</FieldLabel> : null}\r\n                {children}\r\n                {helpText && <FieldHelpText>{helpText}</FieldHelpText>}\r\n                {error && <FieldError>{error}</FieldError>}\r\n            </StyledField>\r\n        </FieldProvider>\r\n    );\r\n});\r\n"
  },
  "component": "Field",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "field"
  ]
}