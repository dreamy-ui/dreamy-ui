{
  "type": "component",
  "fileDependencies": [],
  "id": "style-context",
  "file": {
    "name": "style-context.tsx",
    "content": "import {\n    type ComponentProps,\n    type ElementType,\n    type JSX,\n    createContext,\n    createElement,\n    forwardRef,\n    useContext,\n    useMemo\n} from \"react\";\nimport { cx } from \"styled-system/css\";\n\ntype GenericProps = Record<string, unknown>;\ntype StyleRecipe = {\n    (props?: GenericProps): Record<string, string>;\n    splitVariantProps: (props: GenericProps) => any;\n};\ntype StyleSlot<R extends StyleRecipe> = keyof ReturnType<R>;\ntype StyleSlotRecipe<R extends StyleRecipe> = Record<StyleSlot<R>, string>;\ntype StyleVariantProps<R extends StyleRecipe> = Parameters<R>[0];\ntype CombineProps<T, U> = Omit<T, keyof U> & U;\n\nexport type ComponentVariants<T extends ElementType, R extends StyleRecipe> = (\n    props: CombineProps<ComponentProps<T>, StyleVariantProps<R>>\n) => JSX.Element;\n\nexport const createStyleContext = <R extends StyleRecipe>(\n    recipe: R,\n    shouldForwardVariantProp?: (prop: string) => boolean\n) => {\n    const StyleContext = createContext<StyleSlotRecipe<R> | null>(null);\n\n    const withProvider = <T extends ElementType>(\n        Component: T,\n        slot?: StyleSlot<R>\n    ): ComponentVariants<T, R> => {\n        const StyledComponent = forwardRef((props: any, ref) => {\n            const [variantProps, otherProps] = recipe.splitVariantProps(props);\n            const slotStyles = recipe(variantProps) as StyleSlotRecipe<R>;\n            const forwardedVariantProps = useMemo(() => {\n                const variantKeys = Object.keys(variantProps);\n                return variantKeys.reduce((acc, key) => {\n                    if (shouldForwardVariantProp?.(key)) {\n                        acc[key] = variantProps[key];\n                    }\n                    return acc;\n                }, {} as any);\n            }, [shouldForwardVariantProp, variantProps]);\n\n            return (\n                <StyleContext.Provider value={slotStyles}>\n                    <Component\n                        ref={ref}\n                        {...otherProps}\n                        className={cx(slotStyles[slot ?? \"\"], otherProps.className)}\n                        {...forwardedVariantProps}\n                    />\n                </StyleContext.Provider>\n            );\n        });\n        return StyledComponent as unknown as ComponentVariants<T, R>;\n    };\n\n    const withContext = <T extends ElementType>(Component: T, slot?: StyleSlot<R>): T => {\n        if (!slot) return Component;\n        const StyledComponent = forwardRef((props: any, ref) => {\n            const slotStyles = useContext(StyleContext);\n            return createElement(Component, {\n                ...props,\n                className: cx(slotStyles?.[slot ?? \"\"], props.className),\n                ref\n            });\n        });\n        return StyledComponent as unknown as T;\n    };\n\n    return {\n        withProvider,\n        withContext\n    };\n};\n"
  },
  "component": "StyleContext",
  "hasRecipe": false,
  "hasPattern": false
}