{
  "type": "component",
  "fileDependencies": [],
  "id": "style-context",
  "file": {
    "name": "style-context.tsx",
    "content": "import {\r\n    type ComponentProps,\r\n    type ElementType,\r\n    type JSX,\r\n    createContext,\r\n    createElement,\r\n    forwardRef,\r\n    useContext,\r\n    useMemo\r\n} from \"react\";\r\nimport { cx } from \"styled-system/css\";\r\n\r\ntype GenericProps = Record<string, unknown>;\r\ntype StyleRecipe = {\r\n    (props?: GenericProps): Record<string, string>;\r\n    splitVariantProps: (props: GenericProps) => any;\r\n};\r\ntype StyleSlot<R extends StyleRecipe> = keyof ReturnType<R>;\r\ntype StyleSlotRecipe<R extends StyleRecipe> = Record<StyleSlot<R>, string>;\r\ntype StyleVariantProps<R extends StyleRecipe> = Parameters<R>[0];\r\ntype CombineProps<T, U> = Omit<T, keyof U> & U;\r\n\r\nexport type ComponentVariants<T extends ElementType, R extends StyleRecipe> = (\r\n    props: CombineProps<ComponentProps<T>, StyleVariantProps<R>>\r\n) => JSX.Element;\r\n\r\nexport const createStyleContext = <R extends StyleRecipe>(\r\n    recipe: R,\r\n    shouldForwardVariantProp?: (prop: string) => boolean\r\n) => {\r\n    const StyleContext = createContext<StyleSlotRecipe<R> | null>(null);\r\n\r\n    const withProvider = <T extends ElementType>(\r\n        Component: T,\r\n        slot?: StyleSlot<R>\r\n    ): ComponentVariants<T, R> => {\r\n        const StyledComponent = forwardRef((props: any, ref) => {\r\n            const [variantProps, otherProps] = recipe.splitVariantProps(props);\r\n            const slotStyles = recipe(variantProps) as StyleSlotRecipe<R>;\r\n            const forwardedVariantProps = useMemo(() => {\r\n                const variantKeys = Object.keys(variantProps);\r\n                return variantKeys.reduce((acc, key) => {\r\n                    if (shouldForwardVariantProp?.(key)) {\r\n                        acc[key] = variantProps[key];\r\n                    }\r\n                    return acc;\r\n                }, {} as any);\r\n            }, [shouldForwardVariantProp, variantProps]);\r\n\r\n            return (\r\n                <StyleContext.Provider value={slotStyles}>\r\n                    <Component\r\n                        ref={ref}\r\n                        {...otherProps}\r\n                        className={cx(slotStyles[slot ?? \"\"], otherProps.className)}\r\n                        {...forwardedVariantProps}\r\n                    />\r\n                </StyleContext.Provider>\r\n            );\r\n        });\r\n        return StyledComponent as unknown as ComponentVariants<T, R>;\r\n    };\r\n\r\n    const withContext = <T extends ElementType>(Component: T, slot?: StyleSlot<R>): T => {\r\n        if (!slot) return Component;\r\n        const StyledComponent = forwardRef((props: any, ref) => {\r\n            const slotStyles = useContext(StyleContext);\r\n            return createElement(Component, {\r\n                ...props,\r\n                className: cx(slotStyles?.[slot ?? \"\"], props.className),\r\n                ref\r\n            });\r\n        });\r\n        return StyledComponent as unknown as T;\r\n    };\r\n\r\n    return {\r\n        withProvider,\r\n        withContext\r\n    };\r\n};\r\n"
  },
  "component": "StyleContext",
  "hasRecipe": false,
  "hasPattern": false
}