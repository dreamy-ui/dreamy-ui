{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./style-context"
  ],
  "id": "editable",
  "file": {
    "name": "editable.tsx",
    "content": "import {\r\n    EditableProvider,\r\n    type UseEditableProps,\r\n    type UseEditableReturn,\r\n    runIfFn,\r\n    useEditable,\r\n    useEditableContext\r\n} from \"@dreamy-ui/react\";\r\nimport { forwardRef } from \"react\";\r\nimport { editable } from \"styled-system/recipes\";\r\nimport { Box } from \"./box\";\r\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\r\nimport { createStyleContext } from \"./style-context\";\r\n\r\ntype RenderProps = Pick<UseEditableReturn, \"isEditing\" | \"onSubmit\" | \"onCancel\" | \"onEdit\">;\r\n\r\ntype MaybeRenderProp<P> = React.ReactNode | ((props: P) => React.ReactNode);\r\n\r\ninterface BaseEditableProps\r\n    extends Omit<\r\n        HTMLDreamyProps<\"div\">,\r\n        \"onChange\" | \"value\" | \"defaultValue\" | \"onSubmit\" | \"onBlur\"\r\n    > {}\r\n\r\nexport interface EditableProps extends UseEditableProps, Omit<BaseEditableProps, \"children\"> {\r\n    children?: MaybeRenderProp<RenderProps>;\r\n}\r\n\r\nconst { withProvider, withContext } = createStyleContext(editable);\r\n\r\n/**\r\n * Editable\r\n *\r\n * The wrapper that provides context and logic for all editable\r\n * components. It renders a `div`\r\n *\r\n * @see Docs https://dreamy-ui.com/docs/components/editable\r\n */\r\nexport const Editable = withProvider(\r\n    forwardRef<HTMLDivElement, EditableProps>(function Editable(props, ref) {\r\n        const context = useEditable(props);\r\n\r\n        const { isEditing, onSubmit, onCancel, onEdit } = context;\r\n\r\n        const children = runIfFn(props.children, {\r\n            isEditing,\r\n            onSubmit,\r\n            onCancel,\r\n            onEdit\r\n        });\r\n\r\n        return (\r\n            <EditableProvider value={context}>\r\n                <Box {...context.getRootProps({}, ref)}>{children}</Box>\r\n            </EditableProvider>\r\n        );\r\n    }),\r\n    \"root\"\r\n);\r\n\r\nexport interface EditablePreviewProps extends HTMLDreamyProps<\"div\"> {}\r\n\r\n/**\r\n * EditablePreview\r\n *\r\n * The `span` used to display the final value, in the `preview` mode\r\n */\r\nexport const EditablePreview = withContext(\r\n    forwardRef<HTMLSpanElement, EditablePreviewProps>(function EditablePreview(props, ref) {\r\n        const { getPreviewProps } = useEditableContext();\r\n\r\n        return (\r\n            <Box\r\n                {...getPreviewProps(props, ref)}\r\n                style={{\r\n                    cursor: \"text\",\r\n                    display: \"inline-block\",\r\n                    ...props.style\r\n                }}\r\n            />\r\n        );\r\n    }),\r\n    \"preview\"\r\n);\r\n\r\nexport interface EditableInputProps extends HTMLDreamyProps<\"input\"> {}\r\n\r\n/**\r\n * EditableInput\r\n *\r\n * The input used in the `edit` mode\r\n */\r\nexport const EditableInput = withContext(\r\n    forwardRef<HTMLInputElement, EditableInputProps>(function EditableInput(props, ref) {\r\n        const { getInputProps } = useEditableContext();\r\n\r\n        return (\r\n            <dreamy.input\r\n                {...getInputProps(props, ref)}\r\n                style={{\r\n                    outline: 0,\r\n                    borderRadius: \"4px\",\r\n                    ...props.style\r\n                }}\r\n            />\r\n        );\r\n    }),\r\n    \"input\"\r\n);\r\n\r\nexport interface EditableEditButtonProps extends HTMLDreamyProps<\"button\"> {}\r\n\r\nexport const EditableEditButton = withContext(\r\n    forwardRef<HTMLButtonElement, EditableEditButtonProps>(function EditableEditButton(props, ref) {\r\n        const { getEditButtonProps } = useEditableContext();\r\n\r\n        return <dreamy.button {...getEditButtonProps(props, ref)} />;\r\n    }),\r\n    \"editButton\"\r\n);\r\n\r\ninterface EditableSubmitButtonProps extends HTMLDreamyProps<\"button\"> {}\r\n\r\nexport const EditableSubmitButton = withContext(\r\n    forwardRef<HTMLButtonElement, EditableSubmitButtonProps>(\r\n        function EditableSubmitButton(props, ref) {\r\n            const { getSubmitButtonProps } = useEditableContext();\r\n\r\n            return <dreamy.button {...getSubmitButtonProps(props, ref)} />;\r\n        }\r\n    ),\r\n    \"submitButton\"\r\n);\r\n\r\ninterface EditableCancelButtonProps extends HTMLDreamyProps<\"button\"> {}\r\n\r\nexport const EditableCancelButton = withContext(\r\n    forwardRef<HTMLButtonElement, EditableCancelButtonProps>(\r\n        function EditableCancelButton(props, ref) {\r\n            const { getCancelButtonProps } = useEditableContext();\r\n\r\n            return <dreamy.button {...getCancelButtonProps(props, ref)} />;\r\n        }\r\n    ),\r\n    \"cancelButton\"\r\n);\r\n"
  },
  "component": "Editable",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeId": "editable"
}