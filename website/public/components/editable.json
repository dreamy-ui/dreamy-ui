{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./style-context"
  ],
  "id": "editable",
  "file": {
    "name": "editable.tsx",
    "content": "import {\n    EditableProvider,\n    type UseEditableProps,\n    type UseEditableReturn,\n    runIfFn,\n    useEditable,\n    useEditableContext\n} from \"@dreamy-ui/react\";\nimport { forwardRef } from \"react\";\nimport { editable } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\nimport { createStyleContext } from \"./style-context\";\n\ntype RenderProps = Pick<UseEditableReturn, \"isEditing\" | \"onSubmit\" | \"onCancel\" | \"onEdit\">;\n\ntype MaybeRenderProp<P> = React.ReactNode | ((props: P) => React.ReactNode);\n\ninterface BaseEditableProps\n    extends Omit<\n        HTMLDreamyProps<\"div\">,\n        \"onChange\" | \"value\" | \"defaultValue\" | \"onSubmit\" | \"onBlur\"\n    > {}\n\nexport interface EditableProps extends UseEditableProps, Omit<BaseEditableProps, \"children\"> {\n    children?: MaybeRenderProp<RenderProps>;\n}\n\nconst { withProvider, withContext } = createStyleContext(editable);\n\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n *\n * @see Docs https://dreamy-ui.com/docs/components/editable\n */\nexport const Editable = withProvider(\n    forwardRef<HTMLDivElement, EditableProps>(function Editable(props, ref) {\n        const context = useEditable(props);\n\n        const { isEditing, onSubmit, onCancel, onEdit } = context;\n\n        const children = runIfFn(props.children, {\n            isEditing,\n            onSubmit,\n            onCancel,\n            onEdit\n        });\n\n        return (\n            <EditableProvider value={context}>\n                <Box {...context.getRootProps({}, ref)}>{children}</Box>\n            </EditableProvider>\n        );\n    }),\n    \"root\"\n);\n\nexport interface EditablePreviewProps extends HTMLDreamyProps<\"div\"> {}\n\n/**\n * EditablePreview\n *\n * The `span` used to display the final value, in the `preview` mode\n */\nexport const EditablePreview = withContext(\n    forwardRef<HTMLSpanElement, EditablePreviewProps>(function EditablePreview(props, ref) {\n        const { getPreviewProps } = useEditableContext();\n\n        return (\n            <Box\n                {...getPreviewProps(props, ref)}\n                style={{\n                    cursor: \"text\",\n                    display: \"inline-block\",\n                    ...props.style\n                }}\n            />\n        );\n    }),\n    \"preview\"\n);\n\nexport interface EditableInputProps extends HTMLDreamyProps<\"input\"> {}\n\n/**\n * EditableInput\n *\n * The input used in the `edit` mode\n */\nexport const EditableInput = withContext(\n    forwardRef<HTMLInputElement, EditableInputProps>(function EditableInput(props, ref) {\n        const { getInputProps } = useEditableContext();\n\n        return (\n            <dreamy.input\n                {...getInputProps(props, ref)}\n                style={{\n                    outline: 0,\n                    borderRadius: \"4px\",\n                    ...props.style\n                }}\n            />\n        );\n    }),\n    \"input\"\n);\n\nexport interface EditableEditButtonProps extends HTMLDreamyProps<\"button\"> {}\n\nexport const EditableEditButton = withContext(\n    forwardRef<HTMLButtonElement, EditableEditButtonProps>(function EditableEditButton(props, ref) {\n        const { getEditButtonProps } = useEditableContext();\n\n        return <dreamy.button {...getEditButtonProps(props, ref)} />;\n    }),\n    \"editButton\"\n);\n\ninterface EditableSubmitButtonProps extends HTMLDreamyProps<\"button\"> {}\n\nexport const EditableSubmitButton = withContext(\n    forwardRef<HTMLButtonElement, EditableSubmitButtonProps>(\n        function EditableSubmitButton(props, ref) {\n            const { getSubmitButtonProps } = useEditableContext();\n\n            return <dreamy.button {...getSubmitButtonProps(props, ref)} />;\n        }\n    ),\n    \"submitButton\"\n);\n\ninterface EditableCancelButtonProps extends HTMLDreamyProps<\"button\"> {}\n\nexport const EditableCancelButton = withContext(\n    forwardRef<HTMLButtonElement, EditableCancelButtonProps>(\n        function EditableCancelButton(props, ref) {\n            const { getCancelButtonProps } = useEditableContext();\n\n            return <dreamy.button {...getCancelButtonProps(props, ref)} />;\n        }\n    ),\n    \"cancelButton\"\n);\n"
  },
  "component": "Editable",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "editable"
  ]
}