{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./icon",
    "./style-context",
    "./transitions"
  ],
  "id": "accordion",
  "file": {
    "name": "accordion.tsx",
    "content": "\"use client\";\r\n\r\nimport {\r\n    type UseAccordionItemProps,\r\n    type UseAccordionItemReturn,\r\n    type UseAccordionProps,\r\n    type UseAccordionReturn,\r\n    createContext,\r\n    createDescendantContext,\r\n    objectToDeps,\r\n    useAccordion,\r\n    useAccordionItem\r\n} from \"@dreamy-ui/react\";\r\nimport { forwardRef, useMemo } from \"react\";\r\nimport type { AccordionVariantProps } from \"styled-system/recipes\";\r\nimport { accordion } from \"styled-system/recipes\";\r\nimport { Box } from \"./box\";\r\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\r\nimport type { IconProps } from \"./icon\";\r\nimport { createStyleContext } from \"./style-context\";\r\nimport { Collapse, type CollapseProps } from \"./transitions\";\r\n\r\ninterface AccordionContext extends Omit<UseAccordionReturn, \"htmlProps\" | \"descendants\"> {\r\n    reduceMotion: boolean;\r\n}\r\n\r\nexport const [AccordionProvider, useAccordionContext] = createContext<AccordionContext>({\r\n    name: \"AccordionContext\",\r\n    hookName: \"useAccordionContext\",\r\n    providerName: \"Accordion\"\r\n});\r\n\r\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">;\r\n\r\nexport const [AccordionItemProvider, useAccordionItemContext] = createContext<AccordionItemContext>(\r\n    {\r\n        name: \"AccordionItemContext\",\r\n        hookName: \"useAccordionItemContext\",\r\n        providerName: \"<AccordionItem />\"\r\n    }\r\n);\r\n\r\nexport const [\r\n    AccordionDescendantsProvider,\r\n    useAccordionDescendantsContext,\r\n    useAccordionDescendants,\r\n    useAccordionDescendant\r\n] = createDescendantContext<HTMLButtonElement>();\r\n\r\nconst { withProvider, withContext } = createStyleContext(accordion);\r\n\r\nexport interface AccordionProps\r\n    extends UseAccordionProps,\r\n        Omit<HTMLDreamyProps<\"div\">, keyof UseAccordionProps>,\r\n        AccordionVariantProps {\r\n    /**\r\n     * If `true`, height animation and transitions will be disabled.\r\n     *\r\n     * @default false\r\n     */\r\n    reduceMotion?: boolean;\r\n}\r\n\r\n/**\r\n * Accordion component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/accordion\r\n */\r\nexport const Accordion = withProvider(\r\n    forwardRef<HTMLDivElement, AccordionProps>(function AccordionRoot(ownProps, ref) {\r\n        const { htmlProps, descendants, ...context } = useAccordion(ownProps);\r\n\r\n        // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\r\n        const ctx = useMemo(\r\n            () => ({ ...context, reduceMotion: !!ownProps.reduceMotion }),\r\n            [...objectToDeps(context), ownProps.reduceMotion]\r\n        );\r\n\r\n        return (\r\n            <AccordionDescendantsProvider value={descendants}>\r\n                <AccordionProvider value={ctx}>\r\n                    <Box\r\n                        ref={ref}\r\n                        {...htmlProps}\r\n                    />\r\n                </AccordionProvider>\r\n            </AccordionDescendantsProvider>\r\n        );\r\n    }),\r\n    \"root\"\r\n);\r\n\r\nexport interface AccordionItemProps\r\n    extends Omit<HTMLDreamyProps<\"div\">, keyof UseAccordionItemProps | \"children\">,\r\n        UseAccordionItemProps {\r\n    children?:\r\n        | React.ReactNode\r\n        | ((props: {\r\n              isExpanded: boolean;\r\n              isDisabled: boolean;\r\n          }) => React.ReactNode);\r\n}\r\n\r\nexport const AccordionItem = withContext(\r\n    forwardRef<HTMLDivElement, AccordionItemProps>(function AccordionItem(props, ref) {\r\n        const { children } = props;\r\n        const { htmlProps, ...ctx } = useAccordionItem(props);\r\n\r\n        return (\r\n            <AccordionItemProvider value={ctx}>\r\n                <Box\r\n                    ref={ref}\r\n                    {...htmlProps}\r\n                >\r\n                    {typeof children === \"function\"\r\n                        ? children({\r\n                              isExpanded: !!ctx.isOpen,\r\n                              isDisabled: !!ctx.isDisabled\r\n                          })\r\n                        : children}\r\n                </Box>\r\n            </AccordionItemProvider>\r\n        );\r\n    }),\r\n    \"item\"\r\n);\r\n\r\nexport interface AccordionContentProps extends HTMLDreamyProps<\"div\"> {\r\n    /**\r\n     * The properties passed to the underlying `Collapse` component.\r\n     */\r\n    collapseProps?: CollapseProps;\r\n}\r\n\r\nexport const AccordionContent = withContext(\r\n    forwardRef<HTMLDivElement, AccordionContentProps>(function AccordionContent(props, ref) {\r\n        const { collapseProps, ...rest } = props;\r\n\r\n        const { reduceMotion } = useAccordionContext();\r\n        const { getContentProps, isOpen } = useAccordionItemContext();\r\n\r\n        const panelProps = getContentProps(rest, ref) as any;\r\n\r\n        if (!reduceMotion) {\r\n            panelProps.hidden = undefined;\r\n        }\r\n\r\n        const child = <Box {...panelProps} />;\r\n\r\n        if (!reduceMotion) {\r\n            return (\r\n                <Collapse\r\n                    in={isOpen}\r\n                    {...collapseProps}\r\n                >\r\n                    {child}\r\n                </Collapse>\r\n            );\r\n        }\r\n\r\n        return child;\r\n    }),\r\n    \"content\"\r\n);\r\n\r\nexport interface AccordionTriggerProps extends HTMLDreamyProps<\"button\"> {\r\n    /**\r\n     * The heading tag to use for the wrapper of the trigger.\r\n     * @default \"h2\"\r\n     */\r\n    headingTag?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\r\n    /**\r\n     * Removes default icon and allows for custom icon to be passed in.\r\n     */\r\n    icon?: React.ReactNode;\r\n    /**\r\n     * Props to pass to the default icon.\r\n     */\r\n    iconProps?: IconProps;\r\n}\r\n\r\nexport const AccordionTrigger = withContext(\r\n    forwardRef<HTMLButtonElement, AccordionTriggerProps>(function AccordionTrigger(\r\n        { headingTag: HeadingTag = \"h2\", children, icon, iconProps, ...props },\r\n        ref\r\n    ) {\r\n        const { getTriggerProps } = useAccordionItemContext();\r\n\r\n        return (\r\n            <HeadingTag>\r\n                <dreamy.button {...(getTriggerProps(props, ref) as any)}>\r\n                    {children}\r\n                    {icon ?? <AccordionIcon {...iconProps} />}\r\n                </dreamy.button>\r\n            </HeadingTag>\r\n        );\r\n    }),\r\n    \"trigger\"\r\n);\r\n\r\nexport interface AccordionIconProps extends HTMLDreamyProps<\"svg\"> {}\r\n\r\n/**\r\n * @internal\r\n */\r\nconst AccordionIcon = withContext(\r\n    forwardRef<SVGSVGElement, AccordionIconProps>(function AccordionIcon(props, ref) {\r\n        return (\r\n            <dreamy.svg\r\n                ref={ref}\r\n                asChild\r\n                aria-hidden=\"true\"\r\n                {...props}\r\n            >\r\n                <svg\r\n                    aria-hidden=\"true\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"2\"\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                >\r\n                    <path d=\"m6 9 6 6 6-6\" />\r\n                </svg>\r\n            </dreamy.svg>\r\n        );\r\n    }),\r\n    \"icon\"\r\n);\r\n"
  },
  "component": "Accordion",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "accordion"
  ]
}