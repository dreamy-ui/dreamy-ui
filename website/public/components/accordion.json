{
  "type": "component",
  "fileDependencies": [
    "./box",
    "./factory",
    "./icon",
    "./style-context",
    "./transitions"
  ],
  "id": "accordion",
  "file": {
    "name": "accordion.tsx",
    "content": "\"use client\";\n\nimport {\n    type UseAccordionItemProps,\n    type UseAccordionItemReturn,\n    type UseAccordionProps,\n    type UseAccordionReturn,\n    createContext,\n    createDescendantContext,\n    objectToDeps,\n    useAccordion,\n    useAccordionItem\n} from \"@dreamy-ui/react\";\nimport { forwardRef, useMemo } from \"react\";\nimport type { AccordionVariantProps } from \"styled-system/recipes\";\nimport { accordion } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\nimport type { IconProps } from \"./icon\";\nimport { createStyleContext } from \"./style-context\";\nimport { Collapse, type CollapseProps } from \"./transitions\";\n\ninterface AccordionContext extends Omit<UseAccordionReturn, \"htmlProps\" | \"descendants\"> {\n    reduceMotion: boolean;\n}\n\nexport const [AccordionProvider, useAccordionContext] = createContext<AccordionContext>({\n    name: \"AccordionContext\",\n    hookName: \"useAccordionContext\",\n    providerName: \"Accordion\"\n});\n\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">;\n\nexport const [AccordionItemProvider, useAccordionItemContext] = createContext<AccordionItemContext>(\n    {\n        name: \"AccordionItemContext\",\n        hookName: \"useAccordionItemContext\",\n        providerName: \"<AccordionItem />\"\n    }\n);\n\nexport const [\n    AccordionDescendantsProvider,\n    useAccordionDescendantsContext,\n    useAccordionDescendants,\n    useAccordionDescendant\n] = createDescendantContext<HTMLButtonElement>();\n\nconst { withProvider, withContext } = createStyleContext(accordion);\n\nexport interface AccordionProps\n    extends UseAccordionProps,\n        Omit<HTMLDreamyProps<\"div\">, keyof UseAccordionProps>,\n        AccordionVariantProps {\n    /**\n     * If `true`, height animation and transitions will be disabled.\n     *\n     * @default false\n     */\n    reduceMotion?: boolean;\n}\n\n/**\n * Accordion component\n *\n * @See Docs https://dreamy-ui.com/docs/components/accordion\n */\nexport const Accordion = withProvider(\n    forwardRef<HTMLDivElement, AccordionProps>(function AccordionRoot(ownProps, ref) {\n        const { htmlProps, descendants, ...context } = useAccordion(ownProps);\n\n        // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n        const ctx = useMemo(\n            () => ({ ...context, reduceMotion: !!ownProps.reduceMotion }),\n            [...objectToDeps(context), ownProps.reduceMotion]\n        );\n\n        return (\n            <AccordionDescendantsProvider value={descendants}>\n                <AccordionProvider value={ctx}>\n                    <Box\n                        ref={ref}\n                        {...htmlProps}\n                    />\n                </AccordionProvider>\n            </AccordionDescendantsProvider>\n        );\n    }),\n    \"root\"\n);\n\nexport interface AccordionItemProps\n    extends Omit<HTMLDreamyProps<\"div\">, keyof UseAccordionItemProps | \"children\">,\n        UseAccordionItemProps {\n    children?:\n        | React.ReactNode\n        | ((props: {\n              isExpanded: boolean;\n              isDisabled: boolean;\n          }) => React.ReactNode);\n}\n\nexport const AccordionItem = withContext(\n    forwardRef<HTMLDivElement, AccordionItemProps>(function AccordionItem(props, ref) {\n        const { children } = props;\n        const { htmlProps, ...ctx } = useAccordionItem(props);\n\n        return (\n            <AccordionItemProvider value={ctx}>\n                <Box\n                    ref={ref}\n                    {...htmlProps}\n                >\n                    {typeof children === \"function\"\n                        ? children({\n                              isExpanded: !!ctx.isOpen,\n                              isDisabled: !!ctx.isDisabled\n                          })\n                        : children}\n                </Box>\n            </AccordionItemProvider>\n        );\n    }),\n    \"item\"\n);\n\nexport interface AccordionContentProps extends HTMLDreamyProps<\"div\"> {\n    /**\n     * The properties passed to the underlying `Collapse` component.\n     */\n    collapseProps?: CollapseProps;\n}\n\nexport const AccordionContent = withContext(\n    forwardRef<HTMLDivElement, AccordionContentProps>(function AccordionContent(props, ref) {\n        const { collapseProps, ...rest } = props;\n\n        const { reduceMotion } = useAccordionContext();\n        const { getContentProps, isOpen } = useAccordionItemContext();\n\n        const panelProps = getContentProps(rest, ref) as any;\n\n        if (!reduceMotion) {\n            panelProps.hidden = undefined;\n        }\n\n        const child = <Box {...panelProps} />;\n\n        if (!reduceMotion) {\n            return (\n                <Collapse\n                    in={isOpen}\n                    {...collapseProps}\n                >\n                    {child}\n                </Collapse>\n            );\n        }\n\n        return child;\n    }),\n    \"content\"\n);\n\nexport interface AccordionTriggerProps extends HTMLDreamyProps<\"button\"> {\n    /**\n     * The heading tag to use for the wrapper of the trigger.\n     * @default \"h2\"\n     */\n    headingTag?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n    /**\n     * Removes default icon and allows for custom icon to be passed in.\n     */\n    icon?: React.ReactNode;\n    /**\n     * Props to pass to the default icon.\n     */\n    iconProps?: IconProps;\n}\n\nexport const AccordionTrigger = withContext(\n    forwardRef<HTMLButtonElement, AccordionTriggerProps>(function AccordionTrigger(\n        { headingTag: HeadingTag = \"h2\", children, icon, iconProps, ...props },\n        ref\n    ) {\n        const { getTriggerProps } = useAccordionItemContext();\n\n        return (\n            <HeadingTag>\n                <dreamy.button {...(getTriggerProps(props, ref) as any)}>\n                    {children}\n                    {icon ?? <AccordionIcon {...iconProps} />}\n                </dreamy.button>\n            </HeadingTag>\n        );\n    }),\n    \"trigger\"\n);\n\nexport interface AccordionIconProps extends HTMLDreamyProps<\"svg\"> {}\n\n/**\n * @internal\n */\nconst AccordionIcon = withContext(\n    forwardRef<SVGSVGElement, AccordionIconProps>(function AccordionIcon(props, ref) {\n        return (\n            <dreamy.svg\n                ref={ref}\n                asChild\n                aria-hidden=\"true\"\n                {...props}\n            >\n                <svg\n                    aria-hidden=\"true\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                >\n                    <path d=\"m6 9 6 6 6-6\" />\n                </svg>\n            </dreamy.svg>\n        );\n    }),\n    \"icon\"\n);\n"
  },
  "component": "Accordion",
  "hasRecipe": true,
  "hasPattern": false,
  "recipeIds": [
    "accordion"
  ]
}