{
  "type": "component",
  "fileDependencies": [
    "./factory"
  ],
  "id": "group",
  "file": {
    "name": "group.tsx",
    "content": "import { dataAttr, splitProps } from \"@dreamy-ui/react\";\nimport { Children, cloneElement, forwardRef, isValidElement, useMemo } from \"react\";\nimport { type FlexProperties, flex } from \"styled-system/patterns\";\nimport { type GroupVariantProps, group } from \"styled-system/recipes\";\nimport { type HTMLDreamyProps, dreamy } from \"./factory\";\n\nconst StyledGroup = dreamy(\"div\", group);\n\nexport interface GroupProps\n    extends Omit<HTMLDreamyProps<\"div\">, keyof FlexProperties>,\n        GroupVariantProps,\n        Omit<FlexProperties, \"grow\"> {\n    /**\n     * A function that determines if a child should be skipped\n     */\n    skip?: (child: React.ReactElement) => boolean;\n}\n\nexport const Group = forwardRef<HTMLDivElement, GroupProps>(({ children, skip, ...props }, ref) => {\n    const [patternProps, restProps] = splitProps(props, [\n        \"align\",\n        \"justify\",\n        \"direction\",\n        \"wrap\",\n        \"basis\",\n        \"shrink\"\n    ]);\n\n    const styles = flex.raw(patternProps);\n\n    const _children = useMemo(() => {\n        const childArray = Children.toArray(children).filter(isValidElement);\n        if (childArray.length === 1) return childArray;\n\n        const validChildArray = childArray.filter((child) => !skip?.(child));\n        const validChildCount = validChildArray.length;\n        if (validChildArray.length === 1) return childArray;\n\n        return childArray.map((child) => {\n            const childProps = child.props as any;\n            if (skip?.(child)) return child;\n            const index = validChildArray.indexOf(child);\n            return cloneElement(child, {\n                ...childProps,\n                \"data-group-item\": \"\",\n                \"data-first\": dataAttr(index === 0),\n                \"data-last\": dataAttr(index === validChildCount - 1),\n                \"data-between\": dataAttr(index > 0 && index < validChildCount - 1),\n                style: {\n                    \"--group-count\": validChildCount,\n                    \"--group-index\": index,\n                    ...(childProps?.style ?? {})\n                }\n            } as any);\n        });\n    }, [children, skip]);\n\n    return (\n        <StyledGroup\n            ref={ref}\n            {...styles}\n            {...restProps}\n        >\n            {_children}\n        </StyledGroup>\n    );\n});\n\nGroup.displayName = \"Group\";\n"
  },
  "component": "Group",
  "hasRecipe": true,
  "hasPattern": true,
  "recipeIds": [
    "group"
  ],
  "patternIds": [
    "flex"
  ]
}