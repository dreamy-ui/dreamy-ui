{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./factory",
    "./kbd",
    "./popover",
    "./style-context"
  ],
  "id": "menu",
  "file": {
    "name": "menu.tsx",
    "content": "import {\n\tMenuDescendantsProvider,\n\tMenuProvider,\n\tPopoverContent,\n\trunIfFn,\n\tuseActionKey,\n\tuseMenu,\n\tuseMenuContext,\n\tuseMenuItem,\n\tUseMenuItemProps,\n\tUseMenuProps\n} from \"@dreamy-ui/react\";\nimport { Children, cloneElement, forwardRef, ReactNode } from \"react\";\nimport { menu } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { dreamy, HTMLDreamyProps } from \"./factory\";\nimport { Kbd } from \"./kbd\";\nimport {\n\tPopover,\n\tPopoverContentProps,\n\tPopoverProps,\n\tPopoverTrigger\n} from \"./popover\";\nimport { createStyleContext } from \"./style-context\";\n\nconst { withProvider, withContext } = createStyleContext(menu);\n\nexport interface MenuProps extends UseMenuProps {\n\t/**\n\t * The placement of the menu.\n\t * @default \"bottom\"\n\t */\n\tplacement?: PopoverProps[\"placement\"];\n\tchildren?: ReactNode;\n\tclassName?: string;\n}\n\n/**\n * Menu component\n *\n * @See Docs https://dreamy-ui.com/docs/components/menu\n */\nexport const Menu = withProvider(function MenuRoot({\n\tchildren,\n\tclassName,\n\tplacement,\n\t...props\n}: MenuProps) {\n\tconst { rest, ...ctx } = useMenu(props);\n\n\treturn (\n\t\t<MenuProvider value={ctx as any}>\n\t\t\t<Box {...ctx.getRootProps({ className })}>\n\t\t\t\t<Popover\n\t\t\t\t\tplacement={placement ?? \"bottom\"}\n\t\t\t\t\tisOpen={ctx.isOpen}\n\t\t\t\t\tonOpen={ctx.onOpen}\n\t\t\t\t\tonClose={ctx.onClose}\n\t\t\t\t\thasArrow={false}\n\t\t\t\t\tinitialFocusRef={ctx.triggerRef}\n\t\t\t\t\tlazyBehavior=\"keepMounted\"\n\t\t\t\t\treduceMotion={ctx.reduceMotion}\n\t\t\t\t\t{...props.popoverProps}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</Popover>\n\t\t\t</Box>\n\t\t</MenuProvider>\n\t);\n},\n\"root\");\n\nexport interface MenuContentProps extends PopoverContentProps {}\n\nexport const MenuContent = withContext(\n\tforwardRef<HTMLDivElement, MenuContentProps>(function MenuContent(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { children, ...rest } = props;\n\n\t\tconst { getContentProps, descendants } = useMenuContext();\n\n\t\treturn (\n\t\t\t<PopoverContent {...getContentProps(rest, ref)}>\n\t\t\t\t<MenuDescendantsProvider value={descendants}>\n\t\t\t\t\t{children}\n\t\t\t\t</MenuDescendantsProvider>\n\t\t\t</PopoverContent>\n\t\t);\n\t}),\n\t\"content\"\n);\n\nexport interface MenuButtonProps extends UseMenuItemProps {\n\t/**\n\t * Icon to display on the left side of the menu item\n\t */\n\ticon?: React.ReactNode | React.ElementType;\n\t/**\n\t * Command to display on the right side of the menu item\n\t */\n\tcommand?: string;\n\t/**\n\t * The content to display on the right side of the menu item\n\t */\n\trightContent?: React.ReactNode | React.ElementType;\n}\n\nexport const MenuItem = withContext(\n\tforwardRef<HTMLDivElement, MenuButtonProps>(function MenuButton(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { icon, command, rightContent, ...rest } = props;\n\t\tconsole.log(\"menu button\");\n\t\tconst buttonProps = useMenuItem(rest, ref);\n\n\t\tconst actionKey = useActionKey();\n\n\t\treturn (\n\t\t\t<dreamy.button {...(buttonProps as any)}>\n\t\t\t\t<span>\n\t\t\t\t\t{runIfFn(icon as any)}\n\t\t\t\t\t{buttonProps.children}\n\t\t\t\t</span>\n\t\t\t\t{command && (\n\t\t\t\t\t<Kbd size={\"sm\"}>\n\t\t\t\t\t\t{command.replaceAll(\"{actionKey}\", actionKey)}\n\t\t\t\t\t</Kbd>\n\t\t\t\t)}\n\t\t\t\t{rightContent && runIfFn(rightContent as any)}\n\t\t\t</dreamy.button>\n\t\t);\n\t}),\n\t\"item\"\n);\n\nexport interface MenuTriggerProps extends HTMLDreamyProps<\"button\"> {\n\tplaceholder?: string;\n}\n\nexport const MenuTriggerBase = forwardRef<HTMLButtonElement, MenuTriggerProps>(\n\tfunction MenuTrigger({ children, placeholder, ...rest }, ref) {\n\t\tconst { getTriggerProps } = useMenuContext();\n\n\t\tconst child = Children.only(children) as any;\n\t\tconst trigger = cloneElement(child, getTriggerProps(rest, ref));\n\n\t\treturn <PopoverTrigger {...rest}>{trigger}</PopoverTrigger>;\n\t}\n);\n"
  },
  "component": "Menu"
}