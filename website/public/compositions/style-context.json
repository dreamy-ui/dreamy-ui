{
  "type": "composition",
  "fileDependencies": [],
  "id": "style-context",
  "file": {
    "name": "style-context.tsx",
    "content": "import {\n\ttype ComponentProps,\n\ttype ElementType,\n\ttype JSX,\n\tcreateContext,\n\tcreateElement,\n\tforwardRef,\n\tuseContext,\n\tuseMemo\n} from \"react\";\nimport { cx } from \"styled-system/css\";\n\ntype GenericProps = Record<string, unknown>;\ntype StyleRecipe = {\n\t(props?: GenericProps): Record<string, string>;\n\tsplitVariantProps: (props: GenericProps) => any;\n};\ntype StyleSlot<R extends StyleRecipe> = keyof ReturnType<R>;\ntype StyleSlotRecipe<R extends StyleRecipe> = Record<StyleSlot<R>, string>;\ntype StyleVariantProps<R extends StyleRecipe> = Parameters<R>[0];\ntype CombineProps<T, U> = Omit<T, keyof U> & U;\n\nexport type ComponentVariants<T extends ElementType, R extends StyleRecipe> = (\n\tprops: CombineProps<ComponentProps<T>, StyleVariantProps<R>>\n) => JSX.Element;\n\nexport const createStyleContext = <R extends StyleRecipe>(\n\trecipe: R,\n\tshouldForwardVariantProp?: (prop: string) => boolean\n) => {\n\tconst StyleContext = createContext<StyleSlotRecipe<R> | null>(null);\n\n\tconst withProvider = <T extends ElementType>(\n\t\tComponent: T,\n\t\tslot?: StyleSlot<R>\n\t): ComponentVariants<T, R> => {\n\t\tconst StyledComponent = forwardRef((props: any, ref) => {\n\t\t\tconst [variantProps, otherProps] = recipe.splitVariantProps(props);\n\t\t\tconst slotStyles = recipe(variantProps) as StyleSlotRecipe<R>;\n\t\t\tconst forwardedVariantProps = useMemo(() => {\n\t\t\t\tconst variantKeys = Object.keys(variantProps);\n\t\t\t\treturn variantKeys.reduce((acc, key) => {\n\t\t\t\t\tif (shouldForwardVariantProp?.(key)) {\n\t\t\t\t\t\tacc[key] = variantProps[key];\n\t\t\t\t\t}\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {} as any);\n\t\t\t}, [shouldForwardVariantProp, variantProps]);\n\n\t\t\treturn (\n\t\t\t\t<StyleContext.Provider value={slotStyles}>\n\t\t\t\t\t<Component\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...otherProps}\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\tslotStyles[slot ?? \"\"],\n\t\t\t\t\t\t\totherProps.className\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{...forwardedVariantProps}\n\t\t\t\t\t/>\n\t\t\t\t</StyleContext.Provider>\n\t\t\t);\n\t\t});\n\t\treturn StyledComponent as unknown as ComponentVariants<T, R>;\n\t};\n\n\tconst withContext = <T extends ElementType>(\n\t\tComponent: T,\n\t\tslot?: StyleSlot<R>\n\t): T => {\n\t\tif (!slot) return Component;\n\t\tconst StyledComponent = forwardRef((props: any, ref) => {\n\t\t\tconst slotStyles = useContext(StyleContext);\n\t\t\treturn createElement(Component, {\n\t\t\t\t...props,\n\t\t\t\tclassName: cx(slotStyles?.[slot ?? \"\"], props.className),\n\t\t\t\tref\n\t\t\t});\n\t\t});\n\t\treturn StyledComponent as unknown as T;\n\t};\n\n\treturn {\n\t\twithProvider,\n\t\twithContext\n\t};\n};\n"
  },
  "component": "StyleContext"
}