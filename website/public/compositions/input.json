{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./factory",
    "./flex"
  ],
  "id": "input",
  "file": {
    "name": "input.tsx",
    "content": "\"use client\";\n\nimport {\n\tcallAllHandlers,\n\tcopyObjectWithoutKeys,\n\tInputGroupProvider,\n\tuseField,\n\tuseInputGroup\n} from \"@dreamy-ui/react\";\nimport type React from \"react\";\nimport { forwardRef, useMemo } from \"react\";\nimport { splitCssProps } from \"styled-system/jsx\";\nimport { type InputVariantProps, input } from \"styled-system/recipes\";\nimport { Box, BoxProps } from \"./box\";\nimport { dreamy, HTMLDreamyProps } from \"./factory\";\nimport { Flex, FlexProps } from \"./flex\";\n\nexport interface UserFeedbackProps {\n\t/**\n\t * If `true`, the form control will be required. This has 2 side effects:\n\t * - The `FormLabel` will show a required indicator\n\t * - The form element (e.g, Input) will have `aria-required` set to `true`\n\t *\n\t * @default false\n\t */\n\tisRequired?: boolean;\n\t/**\n\t * If `true`, the form control will be disabled. This has 2 side effects:\n\t * - The `FormLabel` will have `data-disabled` attribute\n\t * - The form element (e.g, Input) will be disabled\n\t *\n\t * @default false\n\t */\n\tisDisabled?: boolean;\n\t/**\n\t * If `true`, the form control will be invalid. This has 2 side effects:\n\t * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n\t * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n\t *\n\t * @default false\n\t */\n\tisInvalid?: boolean;\n\t/**\n\t * If `true`, the form control will be readonly\n\t *\n\t * @default false\n\t */\n\tisReadOnly?: boolean;\n}\n\nexport interface InputProps\n\textends HTMLDreamyProps<\"input\">,\n\t\tInputVariantProps,\n\t\tUserFeedbackProps {\n\t/**\n\t * The callback function that is called when the input value changes.\n\t */\n\tonChangeValue?: (value: string) => void;\n}\n\nconst StyledInput = dreamy(\"input\", input);\n\n/**\n * Input component\n *\n * @See Docs https://dreamy-ui.com/docs/components/input\n */\nexport const Input = forwardRef<HTMLInputElement, InputProps>((props, ref) => {\n\tconst inputGroup = useInputGroup();\n\tconst field = useField(\n\t\tuseMemo(() => {\n\t\t\treturn {\n\t\t\t\t...inputGroup,\n\t\t\t\t...props\n\t\t\t};\n\t\t}, [inputGroup, props])\n\t);\n\n\treturn (\n\t\t<StyledInput\n\t\t\tref={ref}\n\t\t\t{...field}\n\t\t\tonChange={callAllHandlers(\n\t\t\t\tprops.onChange,\n\t\t\t\t(e: React.ChangeEvent<HTMLInputElement>) =>\n\t\t\t\t\tprops.onChangeValue?.(e.target.value)\n\t\t\t)}\n\t\t/>\n\t);\n});\n\ninterface InputGroupProviderContext\n\textends InputVariantProps,\n\t\tUserFeedbackProps {}\n\nexport interface InputGroupProps extends InputGroupProviderContext, BoxProps {}\n\nexport const InputGroup = forwardRef<HTMLDivElement, InputGroupProps>(\n\tfunction InputGroup(props, ref) {\n\t\tconst [cssProps, rest] = splitCssProps(props);\n\n\t\treturn (\n\t\t\t<InputGroupProvider\n\t\t\t\tvalue={copyObjectWithoutKeys(rest, [\"children\"])}\n\t\t\t>\n\t\t\t\t<Box data-input-group={\"true\"} ref={ref} {...cssProps}>\n\t\t\t\t\t{props.children}\n\t\t\t\t</Box>\n\t\t\t</InputGroupProvider>\n\t\t);\n\t}\n);\n\nexport interface InputAddonProps extends FlexProps {}\n\nconst InputAddon = forwardRef<HTMLDivElement, InputAddonProps>(\n\tfunction InputAddon(props, ref) {\n\t\treturn (\n\t\t\t<Flex\n\t\t\t\tref={ref}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\ttop: \"50%\",\n\t\t\t\t\ttransform: \"translateY(-50%)\",\n\t\t\t\t\tflex: \"0 0 auto\",\n\t\t\t\t\twidth: \"2.5rem\",\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\twhiteSpace: \"nowrap\"\n\t\t\t\t}}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t);\n\t}\n);\n\nexport const InputLeftAddon = forwardRef<HTMLDivElement, InputAddonProps>(\n\tfunction InputLeftAddon(props, ref) {\n\t\treturn <InputAddon ref={ref} left={0} {...props} />;\n\t}\n);\n\nexport const InputRightAddon = forwardRef<HTMLDivElement, InputAddonProps>(\n\tfunction InputRightAddon(props, ref) {\n\t\treturn <InputAddon ref={ref} right={0} {...props} />;\n\t}\n);\n"
  },
  "component": "Input"
}