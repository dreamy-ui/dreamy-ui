{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./factory"
  ],
  "id": "progress",
  "file": {
    "name": "progress.tsx",
    "content": "import { forwardRef, useMemo } from \"react\";\nimport { type ProgressVariantProps, progress } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { dreamy, HTMLDreamyProps } from \"./factory\";\n\ninterface ProgressFilledTrackProps\n\textends HTMLDreamyProps<\"div\">,\n\t\tGetProgressPropsOptions {}\n\nconst ProgressFilledTrack = forwardRef<\n\tHTMLDivElement,\n\tProgressFilledTrackProps\n>((props, ref) => {\n\tconst { min, max, value, isIndeterminate, role, ...rest } = props;\n\tconst progress = useMemo(\n\t\t() => getProgressProps({ value, min, max, isIndeterminate, role }),\n\t\t[value, min, max, isIndeterminate, role]\n\t);\n\n\treturn (\n\t\t<Box\n\t\t\tdata-part=\"filled-track\"\n\t\t\tref={ref}\n\t\t\t{...rest}\n\t\t\tstyle={{ width: `${progress.percent}%`, ...rest.style }}\n\t\t\t{...progress.bind}\n\t\t/>\n\t);\n});\n\ninterface ProgressOptions {\n\t/**\n\t * The `value` of the progress indicator.\n\t * If `undefined` the progress bar will be in `indeterminate` state\n\t */\n\tvalue?: number;\n\t/**\n\t * The minimum value of the progress\n\t * @default 0\n\t */\n\tmin?: number;\n\t/**\n\t * The maximum value of the progress\n\t * @default 100\n\t */\n\tmax?: number;\n\t/**\n\t * The speed of indeterminate progress\n\t * @default 1s\n\t */\n\tspeed?: string;\n}\n\nexport interface ProgressProps\n\textends ProgressOptions,\n\t\tProgressVariantProps,\n\t\tHTMLDreamyProps<\"div\"> {\n\t\"aria-label\": string;\n}\n\nconst StyledProgress = dreamy(\"div\", progress);\n\n/**\n * Progress component\n *\n * @See Docs https://dreamy-ui.com/docs/components/progress\n */\nexport const Progress = forwardRef<HTMLDivElement, ProgressProps>(\n\t(props, ref) => {\n\t\tconst {\n\t\t\tvalue,\n\t\t\tmin = 0,\n\t\t\tmax = 100,\n\t\t\tchildren,\n\t\t\t\"aria-label\": ariaLabel,\n\t\t\t\"aria-labelledby\": ariaLabelledBy,\n\t\t\t\"aria-valuetext\": ariaValueText,\n\t\t\ttitle,\n\t\t\trole,\n\t\t\tstyle,\n\t\t\tspeed = \"1s\",\n\t\t\t...rest\n\t\t} = props;\n\n\t\treturn (\n\t\t\t<StyledProgress\n\t\t\t\tref={ref}\n\t\t\t\t{...rest}\n\t\t\t\tdata-speed={speed}\n\t\t\t\tstyle={{\n\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\t\"--speed\": speed,\n\t\t\t\t\t...style\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<ProgressFilledTrack\n\t\t\t\t\taria-label={ariaLabel}\n\t\t\t\t\taria-labelledby={ariaLabelledBy}\n\t\t\t\t\taria-valuetext={ariaValueText}\n\t\t\t\t\tmin={min}\n\t\t\t\t\tmax={max}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\ttitle={title}\n\t\t\t\t\trole={role}\n\t\t\t\t/>\n\t\t\t\t{children}\n\t\t\t</StyledProgress>\n\t\t);\n\t}\n);\n\nProgress.displayName = \"Progress\";\n\nfunction valueToPercent(value: number, min: number, max: number) {\n\treturn ((value - min) * 100) / (max - min);\n}\n\ninterface GetProgressPropsOptions {\n\tvalue?: number;\n\tmin: number;\n\tmax: number;\n\tvalueText?: string;\n\tgetValueText?(value: number, percent: number): string;\n\tisIndeterminate?: boolean;\n\trole?: React.AriaRole;\n}\n\nfunction getProgressProps(options: GetProgressPropsOptions) {\n\tconst {\n\t\tvalue = 0,\n\t\tmin,\n\t\tmax,\n\t\tvalueText,\n\t\tgetValueText,\n\t\tisIndeterminate,\n\t\trole = \"progressbar\"\n\t} = options;\n\n\tconst percent = valueToPercent(value, min, max);\n\n\tconst getAriaValueText = () => {\n\t\tif (value == null) return undefined;\n\t\treturn typeof getValueText === \"function\"\n\t\t\t? getValueText(value, percent)\n\t\t\t: valueText;\n\t};\n\n\treturn {\n\t\tbind: {\n\t\t\t\"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n\t\t\t\"aria-valuemax\": max,\n\t\t\t\"aria-valuemin\": min,\n\t\t\t\"aria-valuenow\": isIndeterminate ? undefined : value,\n\t\t\t\"aria-valuetext\": getAriaValueText(),\n\t\t\trole\n\t\t},\n\t\tpercent,\n\t\tvalue\n\t};\n}\n"
  },
  "component": "Progress"
}