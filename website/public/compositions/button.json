{
  "type": "composition",
  "fileDependencies": [],
  "id": "button",
  "file": {
    "name": "button.tsx",
    "content": "\"use client\";\r\n\r\nimport { type HTMLDreamProps, Ripple, dataAttr, nextTick, useRipple } from \"@dreamy-ui/react\";\r\nimport { dreamy } from \"@dreamy-ui/react/rsc\";\r\nimport { Box } from \"compositions/box\";\r\nimport { Spinner } from \"compositions/spinner\";\r\nimport { cloneElement, forwardRef, isValidElement, useCallback, useMemo } from \"react\";\r\nimport { css, cx } from \"styled-system/css\";\r\nimport { type ButtonVariantProps, button } from \"styled-system/recipes\";\r\n\r\nexport interface UniversalButtonProps extends ButtonSpinnerOptions {\r\n    /**\r\n     * Disables the whole button\r\n     */\r\n    isDisabled?: boolean;\r\n    /**\r\n     * Transforms the button into a loading state and disables the button\r\n     */\r\n    isLoading?: boolean;\r\n    /**\r\n     * Disables the ripple effect\r\n     */\r\n    disableRipple?: boolean;\r\n    /**\r\n     * The spinner to be displayed instead of the default spinner\r\n     */\r\n    spinner?: React.ReactNode;\r\n}\r\n\r\ninterface Props extends UniversalButtonProps {\r\n    /**\r\n     * The icon to be displayed on the right side of the button\r\n     */\r\n    rightIcon?: React.ReactNode;\r\n    /**\r\n     * The icon to be displayed on the left side of the button\r\n     */\r\n    leftIcon?: React.ReactNode;\r\n    /**\r\n     * The loading text to be displayed\r\n     */\r\n    loadingText?: React.ReactNode;\r\n}\r\n\r\nexport interface ButtonProps extends HTMLDreamProps<\"button\">, ButtonVariantProps, Props {}\r\n\r\nconst StyledButton = dreamy(\"button\", button);\r\n\r\n/**\r\n * Button component\r\n *\r\n * @See Docs https://dreamy-ui.com/docs/components/button\r\n */\r\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\r\n    (\r\n        {\r\n            isLoading,\r\n            loadingText,\r\n            isDisabled,\r\n            rightIcon,\r\n            leftIcon,\r\n            children,\r\n            disableRipple,\r\n            spinner,\r\n            spinnerPlacement = \"start\",\r\n            ...rest\r\n        },\r\n        ref\r\n    ) => {\r\n        const {\r\n            onClick: onRippleClickHandler,\r\n            onClear: onClearRipple,\r\n            ripples,\r\n            currentRipple,\r\n            onPointerDown: onPointerDownRipple,\r\n            isDisabled: isDisabledRipple\r\n        } = useRipple();\r\n\r\n        const handleClick = useCallback(\r\n            (e: React.MouseEvent<HTMLButtonElement>) => {\r\n                rest.onClick?.(e);\r\n                if (disableRipple || isDisabled || isDisabledRipple) return;\r\n\r\n                if (isLoading) return;\r\n                if (isMobile()) {\r\n                    onPointerDownRipple(e);\r\n                    nextTick(() => {\r\n                        nextTick(() => {\r\n                            onRippleClickHandler(e);\r\n                        });\r\n                    });\r\n                } else {\r\n                    onRippleClickHandler(e);\r\n                }\r\n            },\r\n            [\r\n                disableRipple,\r\n                isDisabled,\r\n                onRippleClickHandler,\r\n                isDisabledRipple,\r\n                rest.onClick,\r\n                onPointerDownRipple,\r\n                isLoading\r\n            ]\r\n        );\r\n\r\n        const onPointerDown = useCallback(\r\n            (e: React.PointerEvent<HTMLButtonElement>) => {\r\n                rest.onPointerDown?.(e);\r\n                if (disableRipple || isDisabled || isDisabledRipple || isMobile() || isLoading)\r\n                    return;\r\n                onPointerDownRipple(e);\r\n            },\r\n            [\r\n                disableRipple,\r\n                isDisabled,\r\n                onPointerDownRipple,\r\n                isDisabledRipple,\r\n                rest.onPointerDown,\r\n                isLoading\r\n            ]\r\n        );\r\n\r\n        const LeftIcon = useMemo(\r\n            () => (leftIcon ? <ButtonIcon data-part=\"icon-left\">{leftIcon}</ButtonIcon> : null),\r\n            [leftIcon]\r\n        );\r\n        const RightIcon = useMemo(\r\n            () => (rightIcon ? <ButtonIcon data-part=\"icon-right\">{rightIcon}</ButtonIcon> : null),\r\n            [rightIcon]\r\n        );\r\n\r\n        return (\r\n            <StyledButton\r\n                ref={ref}\r\n                data-loading={dataAttr(isLoading)}\r\n                data-disabled={dataAttr(isDisabled)}\r\n                disabled={isDisabled || isLoading}\r\n                {...rest}\r\n                type={rest.type || \"button\"}\r\n                onClick={handleClick}\r\n                onPointerDown={onPointerDown}\r\n            >\r\n                {leftIcon &&\r\n                    (isLoading ? <span style={{ opacity: 0 }}>{LeftIcon}</span> : LeftIcon)}\r\n\r\n                {isLoading && spinnerPlacement === \"start\" && (\r\n                    <ButtonSpinner\r\n                        loadingText={loadingText}\r\n                        spinnerPlacement={\"start\"}\r\n                    >\r\n                        {spinner}\r\n                    </ButtonSpinner>\r\n                )}\r\n\r\n                {isLoading\r\n                    ? loadingText || <span style={{ opacity: 0 }}>{children}</span>\r\n                    : children}\r\n\r\n                {isLoading && spinnerPlacement === \"end\" && (\r\n                    <ButtonSpinner\r\n                        loadingText={loadingText}\r\n                        spinnerPlacement={\"end\"}\r\n                    >\r\n                        {spinner}\r\n                    </ButtonSpinner>\r\n                )}\r\n                {rightIcon &&\r\n                    (isLoading ? <span style={{ opacity: 0 }}>{RightIcon}</span> : RightIcon)}\r\n\r\n                {!disableRipple && !isDisabled && (\r\n                    <div data-part=\"ripple-container\">\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                height: \"100%\",\r\n                                position: \"relative\"\r\n                            }}\r\n                        >\r\n                            <Ripple\r\n                                onClear={onClearRipple}\r\n                                currentRipple={currentRipple}\r\n                                ripples={ripples}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </StyledButton>\r\n        );\r\n    }\r\n);\r\n\r\nfunction isMobile() {\r\n    const result = navigator.userAgent.match(\r\n        /(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i\r\n    );\r\n\r\n    return result !== null;\r\n}\r\n\r\nexport interface ButtonSpinnerOptions {\r\n    loadingText?: React.ReactNode;\r\n    spinnerPlacement?: \"start\" | \"end\";\r\n}\r\n\r\ninterface ButtonSpinnerProps extends HTMLDreamProps<\"div\">, ButtonSpinnerOptions {}\r\n\r\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\r\n    const {\r\n        loadingText,\r\n        spinnerPlacement = \"start\",\r\n        children = (\r\n            <Spinner\r\n                color=\"currentColor\"\r\n                width=\"1em\"\r\n                height=\"1em\"\r\n                size={\"sm\"}\r\n            />\r\n        ),\r\n        ...rest\r\n    } = props;\r\n\r\n    return (\r\n        <Box\r\n            {...rest}\r\n            data-part={\r\n                spinnerPlacement === \"start\"\r\n                    ? \"icon-left\"\r\n                    : spinnerPlacement === \"end\"\r\n                      ? \"icon-right\"\r\n                      : undefined\r\n            }\r\n            className={cx(\r\n                css({\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    position: loadingText ? \"relative\" : \"absolute\",\r\n                    lineHeight: \"normal\"\r\n                }),\r\n                rest.className\r\n            )}\r\n        >\r\n            {children}\r\n        </Box>\r\n    );\r\n}\r\n\r\nButtonSpinner.displayName = \"ButtonSpinner\";\r\n\r\ninterface ButtonIconProps extends HTMLDreamProps<\"span\"> {}\r\n\r\nexport function ButtonIcon(props: ButtonIconProps) {\r\n    const { children, className, ...rest } = props;\r\n\r\n    const _children = isValidElement(children)\r\n        ? cloneElement<any>(children, {\r\n              \"aria-hidden\": true,\r\n              focusable: false\r\n          })\r\n        : children;\r\n\r\n    return (\r\n        <Box\r\n            as={\"span\"}\r\n            {...rest}\r\n        >\r\n            {_children}\r\n        </Box>\r\n    );\r\n}\r\n\r\nButtonIcon.displayName = \"ButtonIcon\";\r\n"
  },
  "component": "Button"
}