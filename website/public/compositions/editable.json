{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./factory",
    "./style-context"
  ],
  "id": "editable",
  "file": {
    "name": "editable.tsx",
    "content": "import {\n\tEditableProvider,\n\trunIfFn,\n\tuseEditable,\n\tuseEditableContext,\n\tUseEditableProps,\n\tUseEditableReturn\n} from \"@dreamy-ui/react\";\nimport { forwardRef } from \"react\";\nimport { editable } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { dreamy, HTMLDreamyProps } from \"./factory\";\nimport { createStyleContext } from \"./style-context\";\n\ntype RenderProps = Pick<\n\tUseEditableReturn,\n\t\"isEditing\" | \"onSubmit\" | \"onCancel\" | \"onEdit\"\n>;\n\ntype MaybeRenderProp<P> = React.ReactNode | ((props: P) => React.ReactNode);\n\ninterface BaseEditableProps\n\textends Omit<\n\t\tHTMLDreamyProps<\"div\">,\n\t\t\"onChange\" | \"value\" | \"defaultValue\" | \"onSubmit\" | \"onBlur\"\n\t> {}\n\nexport interface EditableProps\n\textends UseEditableProps,\n\t\tOmit<BaseEditableProps, \"children\"> {\n\tchildren?: MaybeRenderProp<RenderProps>;\n}\n\nconst { withProvider, withContext } = createStyleContext(editable);\n\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n *\n * @see Docs https://dreamy-ui.com/docs/components/editable\n */\nexport const Editable = withProvider(\n\tforwardRef<HTMLDivElement, EditableProps>(function Editable(props, ref) {\n\t\tconst context = useEditable(props);\n\n\t\tconst { isEditing, onSubmit, onCancel, onEdit } = context;\n\n\t\tconst children = runIfFn(props.children, {\n\t\t\tisEditing,\n\t\t\tonSubmit,\n\t\t\tonCancel,\n\t\t\tonEdit\n\t\t});\n\n\t\treturn (\n\t\t\t<EditableProvider value={context}>\n\t\t\t\t<Box {...context.getRootProps({}, ref)}>{children}</Box>\n\t\t\t</EditableProvider>\n\t\t);\n\t}),\n\t\"root\"\n);\n\nexport interface EditablePreviewProps extends HTMLDreamyProps<\"div\"> {}\n\n/**\n * EditablePreview\n *\n * The `span` used to display the final value, in the `preview` mode\n */\nexport const EditablePreview = withContext(\n\tforwardRef<HTMLSpanElement, EditablePreviewProps>(function EditablePreview(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { getPreviewProps } = useEditableContext();\n\n\t\treturn (\n\t\t\t<Box\n\t\t\t\t{...getPreviewProps(props, ref)}\n\t\t\t\tstyle={{\n\t\t\t\t\tcursor: \"text\",\n\t\t\t\t\tdisplay: \"inline-block\",\n\t\t\t\t\t...props.style\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}),\n\t\"preview\"\n);\n\nexport interface EditableInputProps extends HTMLDreamyProps<\"input\"> {}\n\n/**\n * EditableInput\n *\n * The input used in the `edit` mode\n */\nexport const EditableInput = withContext(\n\tforwardRef<HTMLInputElement, EditableInputProps>(function EditableInput(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { getInputProps } = useEditableContext();\n\n\t\treturn (\n\t\t\t<dreamy.input\n\t\t\t\t{...getInputProps(props, ref)}\n\t\t\t\tstyle={{\n\t\t\t\t\toutline: 0,\n\t\t\t\t\tborderRadius: \"4px\",\n\t\t\t\t\t...props.style\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}),\n\t\"input\"\n);\n\nexport interface EditableEditButtonProps extends HTMLDreamyProps<\"button\"> {}\n\nexport const EditableEditButton = withContext(\n\tforwardRef<HTMLButtonElement, EditableEditButtonProps>(\n\t\tfunction EditableEditButton(props, ref) {\n\t\t\tconst { getEditButtonProps } = useEditableContext();\n\n\t\t\treturn <dreamy.button {...getEditButtonProps(props, ref)} />;\n\t\t}\n\t),\n\t\"editButton\"\n);\n\ninterface EditableSubmitButtonProps extends HTMLDreamyProps<\"button\"> {}\n\nexport const EditableSubmitButton = withContext(\n\tforwardRef<HTMLButtonElement, EditableSubmitButtonProps>(\n\t\tfunction EditableSubmitButton(props, ref) {\n\t\t\tconst { getSubmitButtonProps } = useEditableContext();\n\n\t\t\treturn <dreamy.button {...getSubmitButtonProps(props, ref)} />;\n\t\t}\n\t),\n\t\"submitButton\"\n);\n\ninterface EditableCancelButtonProps extends HTMLDreamyProps<\"button\"> {}\n\nexport const EditableCancelButton = withContext(\n\tforwardRef<HTMLButtonElement, EditableCancelButtonProps>(\n\t\tfunction EditableCancelButton(props, ref) {\n\t\t\tconst { getCancelButtonProps } = useEditableContext();\n\n\t\t\treturn <dreamy.button {...getCancelButtonProps(props, ref)} />;\n\t\t}\n\t),\n\t\"cancelButton\"\n);\n"
  },
  "component": "Editable"
}