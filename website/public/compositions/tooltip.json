{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./factory"
  ],
  "id": "tooltip",
  "file": {
    "name": "tooltip.tsx",
    "content": "import {\n\tomit,\n\tpick,\n\tPortal,\n\tPortalProps,\n\tuseMotionVariants,\n\tuseTooltip,\n\tUseTooltipProps\n} from \"@dreamy-ui/react\";\nimport {\n\tAnimatePresence,\n\ttype HTMLMotionProps,\n\tisValidMotionProp,\n\tm\n} from \"motion/react\";\nimport { Children, cloneElement, forwardRef, Fragment, useMemo } from \"react\";\nimport { isCssProperty, styled } from \"styled-system/jsx\";\nimport { tooltip } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { HTMLDreamyProps } from \"./factory\";\n\nexport interface TooltipProps\n\textends Omit<HTMLDreamyProps<\"div\">, \"direction\" | \"offset\" | \"content\">,\n\t\tPartial<UseTooltipProps> {\n\t/**\n\t * The React component to use as the\n\t * trigger for the tooltip\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * The label of the tooltip\n\t */\n\tcontent?: React.ReactNode;\n\t/**\n\t * The accessible, human friendly label to use for\n\t * screen readers.\n\t *\n\t * If passed, tooltip will show the content `label`\n\t * but expose only `aria-label` to assistive technologies\n\t */\n\t\"aria-label\"?: string;\n\t/**\n\t * If `true`, the tooltip will wrap its children\n\t * in a `<span/>` with `tabIndex=0`\n\t * @default false\n\t */\n\tshouldWrapChildren?: boolean;\n\t/**\n\t * If `true`, the tooltip will show an arrow tip\n\t * @default false\n\t */\n\thasArrow?: boolean;\n\t/**\n\t * Props to be forwarded to the portal component\n\t */\n\tportalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">;\n\t/**\n\t * If `true`, the tooltip will not be rendered inside a portal\n\t * @default false\n\t */\n\tdisablePortal?: boolean;\n\t/**\n\t * Props to be forwarded to the motion component\n\t */\n\tmotionProps?: HTMLMotionProps<\"div\">;\n}\n\nconst StyledTooltip = styled(m.div, tooltip, {\n\tshouldForwardProp: (prop, variantKeys) =>\n\t\tisValidMotionProp(prop) ||\n\t\t(!variantKeys.includes(prop) && !isCssProperty(prop))\n});\n\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs https://dreamy-ui.com/docs/components/tooltip\n */\nexport const Tooltip = forwardRef<HTMLDivElement, TooltipProps>(\n\t(props, ref) => {\n\t\tconst {\n\t\t\tchildren,\n\t\t\tcontent,\n\t\t\tshouldWrapChildren,\n\t\t\t\"aria-label\": ariaLabel,\n\t\t\thasArrow = true,\n\t\t\tisDisabled,\n\t\t\tportalProps,\n\t\t\tdirection,\n\t\t\tmotionProps,\n\t\t\tdisablePortal = false,\n\t\t\t...rest\n\t\t} = props;\n\n\t\tconst tooltip = useTooltip({ ...rest, direction: direction ?? \"ltr\" });\n\n\t\tconst shouldWrap = shouldWrapChildren || typeof children === \"string\";\n\n\t\tconst trigger = useMemo(() => {\n\t\t\tif (shouldWrap) {\n\t\t\t\treturn (\n\t\t\t\t\t<Box\n\t\t\t\t\t\tas={\"span\"}\n\t\t\t\t\t\tdisplay=\"inline-block\"\n\t\t\t\t\t\ttabIndex={0}\n\t\t\t\t\t\t{...tooltip.getTriggerProps()}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</Box>\n\t\t\t\t);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Ensure tooltip has only one child node\n\t\t\t */\n\t\t\tconst child = Children.only(children) as React.ReactElement & {\n\t\t\t\tref?: React.Ref<any>;\n\t\t\t};\n\t\t\treturn cloneElement(\n\t\t\t\tchild,\n\t\t\t\ttooltip.getTriggerProps(child.props as object, child.ref)\n\t\t\t);\n\t\t}, [shouldWrap, children, tooltip.getTriggerProps]);\n\n\t\tconst hasAriaLabel = !!ariaLabel;\n\n\t\tconst _tooltipProps = useMemo(\n\t\t\t() => tooltip.getTooltipProps(undefined, ref),\n\t\t\t[tooltip.getTooltipProps, ref]\n\t\t);\n\n\t\tconst tooltipProps = useMemo(\n\t\t\t() =>\n\t\t\t\thasAriaLabel\n\t\t\t\t\t? omit(_tooltipProps, [\"role\", \"id\"])\n\t\t\t\t\t: _tooltipProps,\n\t\t\t[hasAriaLabel, _tooltipProps]\n\t\t);\n\n\t\tconst srOnlyProps = useMemo(\n\t\t\t() => pick(_tooltipProps, [\"role\", \"id\"]),\n\t\t\t[_tooltipProps]\n\t\t);\n\n\t\tconst {\n\t\t\ttooltip: { default: variants }\n\t\t} = useMotionVariants();\n\n\t\tconst PortalComponent = useMemo(\n\t\t\t() => (disablePortal ? Fragment : Portal),\n\t\t\t[disablePortal]\n\t\t);\n\n\t\t/**\n\t\t * If the `label` is empty, there's no point showing the tooltip.\n\t\t * Let's simply return the children\n\t\t */\n\t\tif (!content) {\n\t\t\treturn <>{children}</>;\n\t\t}\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{trigger}\n\t\t\t\t<AnimatePresence>\n\t\t\t\t\t{tooltip.isOpen && !isDisabled && (\n\t\t\t\t\t\t<PortalComponent\n\t\t\t\t\t\t\t{...(disablePortal ? {} : (portalProps as any))}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Box {...tooltip.getTooltipPositionerProps()}>\n\t\t\t\t\t\t\t\t<StyledTooltip\n\t\t\t\t\t\t\t\t\tvariants={variants}\n\t\t\t\t\t\t\t\t\tinitial=\"exit\"\n\t\t\t\t\t\t\t\t\tanimate=\"initial\"\n\t\t\t\t\t\t\t\t\texit=\"exit\"\n\t\t\t\t\t\t\t\t\t{...motionProps}\n\t\t\t\t\t\t\t\t\t{...(tooltipProps as any)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{content}\n\t\t\t\t\t\t\t\t\t{hasAriaLabel && (\n\t\t\t\t\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\t\t\t\t\tas={\"span\"}\n\t\t\t\t\t\t\t\t\t\t\tsrOnly\n\t\t\t\t\t\t\t\t\t\t\t{...srOnlyProps}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{ariaLabel}\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{hasArrow && (\n\t\t\t\t\t\t\t\t\t\t<Box data-popper-arrow>\n\t\t\t\t\t\t\t\t\t\t\t<Box data-popper-arrow-inner />\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</StyledTooltip>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</PortalComponent>\n\t\t\t\t\t)}\n\t\t\t\t</AnimatePresence>\n\t\t\t</>\n\t\t);\n\t}\n);\n\nTooltip.displayName = \"Tooltip\";\n"
  },
  "component": "Tooltip"
}