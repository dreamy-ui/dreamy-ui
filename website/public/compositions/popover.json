{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./close-button",
    "./factory",
    "./heading",
    "./motion",
    "./style-context"
  ],
  "id": "popover",
  "file": {
    "name": "popover.tsx",
    "content": "import {\n\tcallAll,\n\tcallAllHandlers,\n\tMaybeRenderProp,\n\tPopoverProvider,\n\trunIfFn,\n\ttransformReducedMotion,\n\tuseMotionVariants,\n\tusePopover,\n\tusePopoverContext,\n\tUsePopoverProps\n} from \"@dreamy-ui/react\";\nimport { HTMLMotionProps } from \"motion/react\";\nimport { Children, cloneElement, forwardRef } from \"react\";\nimport { popover } from \"styled-system/recipes\";\nimport { Box, BoxProps } from \"./box\";\nimport { CloseButton, CloseButtonProps } from \"./close-button\";\nimport { HTMLDreamyProps } from \"./factory\";\nimport { Heading } from \"./heading\";\nimport { MotionBox } from \"./motion\";\nimport { createStyleContext } from \"./style-context\";\n\nconst { withProvider, withContext } = createStyleContext(popover);\n\nexport interface PopoverProps extends UsePopoverProps {\n\t/**\n\t * The content of the popover. It is usually the `PopoverTrigger`,\n\t * and `PopoverContent`\n\t */\n\tchildren?: MaybeRenderProp<{\n\t\tisOpen: boolean;\n\t\tonClose: () => void;\n\t\tforceUpdate: (() => void) | undefined;\n\t}>;\n\t/**\n\t * If `true`, the popover will have an arrow pointing to the trigger\n\t * @default true\n\t */\n\thasArrow?: boolean;\n}\n\n/**\n * Popover component\n *\n * @See Docs https://dreamy-ui.com/docs/components/popover\n */\nexport const Popover = withProvider(function PopoverRoot(props: PopoverProps) {\n\tconst { children, direction, hasArrow, ...rest } = props;\n\n\tconst context = usePopover({ ...rest, direction: direction ?? \"ltr\" });\n\n\treturn (\n\t\t<PopoverProvider\n\t\t\tvalue={{\n\t\t\t\t...context,\n\t\t\t\thasArrow: hasArrow ?? false\n\t\t\t}}\n\t\t>\n\t\t\t{runIfFn(children, {\n\t\t\t\tisOpen: context.isOpen,\n\t\t\t\tonClose: context.onClose,\n\t\t\t\tforceUpdate: context.forceUpdate\n\t\t\t})}\n\t\t</PopoverProvider>\n\t);\n});\n\nexport interface PopoverArrowProps extends HTMLDreamyProps<\"div\"> {}\n\nexport function PopoverArrow(props: PopoverArrowProps) {\n\treturn (\n\t\t<Box\n\t\t\tdata-popper-arrow\n\t\t\tstyle={{\n\t\t\t\tbackgroundColor: \"transparent\"\n\t\t\t}}\n\t\t>\n\t\t\t<Box data-popper-arrow-inner {...props} />\n\t\t</Box>\n\t);\n}\n\ntype HTMLMotionDreamProps<T extends keyof HTMLElementTagNameMap> = Omit<\n\tHTMLDreamyProps<T>,\n\tkeyof HTMLMotionProps<T>\n> & {\n\tchildren?: React.ReactNode;\n} & Omit<\n\t\tHTMLMotionProps<T>,\n\t\t| \"style\"\n\t\t| \"onDrag\"\n\t\t| \"onDragEnd\"\n\t\t| \"onDragStart\"\n\t\t| \"onAnimationStart\"\n\t\t| \"variants\"\n\t\t| \"transition\"\n\t\t| \"children\"\n\t>;\n\nexport interface PopoverTransitionProps\n\textends HTMLMotionDreamProps<\"section\"> {\n\t/**\n\t * Props to be forwarded to the arrow component\n\t */\n\tarrowProps?: PopoverArrowProps;\n}\n\nconst PopoverTransition = forwardRef(function PopoverTransition(\n\tprops: PopoverTransitionProps,\n\tref: React.Ref<any>\n) {\n\tconst { children, arrowProps, ...rest } = props;\n\n\tconst { isOpen, hasArrow, reduceMotion } = usePopoverContext();\n\tconst { popover } = useMotionVariants();\n\n\treturn (\n\t\t<MotionBox\n\t\t\tref={ref as any}\n\t\t\tvariants={transformReducedMotion(popover.default, reduceMotion)}\n\t\t\tinitial={false}\n\t\t\tanimate={isOpen ? \"initial\" : \"exit\"}\n\t\t\t{...rest}\n\t\t>\n\t\t\t{hasArrow && <PopoverArrow {...arrowProps} />}\n\t\t\t{children}\n\t\t</MotionBox>\n\t);\n});\n\nexport interface PopoverContentProps extends PopoverTransitionProps {\n\trootProps?: HTMLDreamyProps<\"div\">;\n\tmotionProps?: Omit<HTMLMotionProps<\"section\">, \"children\">;\n}\n\nexport const PopoverContent = withContext(\n\tforwardRef<HTMLElement, PopoverContentProps>(function PopoverContent(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { rootProps, motionProps, ...contentProps } = props;\n\n\t\tconst {\n\t\t\tgetPopoverProps,\n\t\t\tgetPopoverPositionerProps,\n\t\t\tonAnimationComplete\n\t\t} = usePopoverContext();\n\n\t\tif (typeof document === \"undefined\") return null;\n\n\t\treturn (\n\t\t\t<div {...getPopoverPositionerProps(rootProps)}>\n\t\t\t\t<PopoverTransition\n\t\t\t\t\t{...(motionProps as any)}\n\t\t\t\t\t{...getPopoverProps(contentProps, ref)}\n\t\t\t\t\tonAnimationComplete={callAll(\n\t\t\t\t\t\tonAnimationComplete,\n\t\t\t\t\t\tcontentProps.onAnimationComplete\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}),\n\t\"content\"\n);\n\nexport interface PopoverHeaderProps extends HTMLDreamyProps<\"header\"> {}\n\nexport const PopoverHeader = withContext(\n\tforwardRef<HTMLDivElement, PopoverHeaderProps>(function PopoverHeader(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { children, ...rest } = props;\n\t\tconst { getHeaderProps } = usePopoverContext();\n\n\t\treturn (\n\t\t\t<Box as={\"header\"} {...getHeaderProps(rest, ref)}>\n\t\t\t\t{typeof children === \"string\" ? (\n\t\t\t\t\t<Heading variant={\"heading\"} size=\"md\">\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</Heading>\n\t\t\t\t) : (\n\t\t\t\t\tchildren\n\t\t\t\t)}\n\t\t\t</Box>\n\t\t);\n\t}),\n\t\"header\"\n);\n\nexport interface PopoverBodyProps extends HTMLDreamyProps<\"div\"> {}\n\nexport const PopoverBody = withContext(\n\tforwardRef<HTMLDivElement, PopoverBodyProps>(function PopoverHeader(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { getBodyProps } = usePopoverContext();\n\n\t\treturn <Box {...getBodyProps(props, ref)} />;\n\t}),\n\t\"body\"\n);\n\nexport interface PopoverFooterProps extends BoxProps {}\n\nexport const PopoverFooter = withContext(\n\tforwardRef<HTMLDivElement, PopoverFooterProps>(function PopoverFooter(\n\t\tprops,\n\t\tref\n\t) {\n\t\treturn <Box as={\"footer\"} {...props} ref={ref} />;\n\t}),\n\t\"footer\"\n);\n\nexport interface PopoverCloseButtonProps extends CloseButtonProps {}\n\nexport const PopoverCloseButton = withContext(\n\tforwardRef<HTMLButtonElement, PopoverCloseButtonProps>(\n\t\tfunction PopoverCloseButton(props, ref) {\n\t\t\tconst { onClose } = usePopoverContext();\n\n\t\t\treturn (\n\t\t\t\t<CloseButton\n\t\t\t\t\t{...props}\n\t\t\t\t\tsize={\"sm\"}\n\t\t\t\t\tonClick={callAllHandlers(props.onClick, onClose)}\n\t\t\t\t\tref={ref}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t),\n\t\"close\"\n);\n\n/**\n * PopoverAnchor is element that is used as the positioning reference\n * for the popover.\n */\nexport function PopoverAnchor(props: React.PropsWithChildren<{}>) {\n\tconst child: any = Children.only(props.children);\n\tconst { getAnchorProps } = usePopoverContext();\n\n\treturn <>{cloneElement(child, getAnchorProps(child.props, child.ref))}</>;\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport function PopoverTrigger(props: { children: React.ReactNode }) {\n\tconst child: any = Children.only(props.children);\n\tconst { getTriggerProps } = usePopoverContext();\n\n\treturn <>{cloneElement(child, getTriggerProps(child.props, child.ref))}</>;\n}\n"
  },
  "component": "Popover"
}