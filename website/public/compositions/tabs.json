{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./button",
    "./factory",
    "./flex",
    "./motion",
    "./style-context"
  ],
  "id": "tabs",
  "file": {
    "name": "tabs.tsx",
    "content": "\"use client\";\n\nimport {\n\tButtonProps,\n\tTabsDescendantsProvider,\n\tTabsProvider,\n\tuseCanUseDOM,\n\tuseDefaultTransition,\n\tuseTab,\n\tuseTabList,\n\tUseTabListProps,\n\tUseTabOptions,\n\tuseTabPanel,\n\tuseTabPanels,\n\tuseTabs,\n\tuseTabsContext,\n\tUseTabsProps\n} from \"@dreamy-ui/react\";\nimport { forwardRef } from \"react\";\nimport { tabs } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { Button } from \"./button\";\nimport { HTMLDreamyProps } from \"./factory\";\nimport { Flex, FlexProps } from \"./flex\";\nimport { MotionFlex, MotionFlexProps } from \"./motion\";\nimport { createStyleContext } from \"./style-context\";\n\nconst { withProvider, withContext } = createStyleContext(\n\ttabs,\n\t(prop) => prop === \"orientation\"\n);\n\nexport interface TabsProps\n\textends UseTabsProps,\n\t\tOmit<HTMLDreamyProps<\"div\">, \"onChange\" | \"direction\"> {\n\tchildren: React.ReactNode;\n}\n\n/**\n * Tabs component.\n *\n * @See Docs https://dreamy-ui.com/docs/components/tabs\n */\nexport const Tabs = withProvider(\n\tforwardRef<HTMLDivElement, TabsProps>(function Tabs(props, ref) {\n\t\tconst { children, ...rest } = props;\n\n\t\tconst { htmlProps, descendants, ...ctx } = useTabs(rest);\n\n\t\treturn (\n\t\t\t<TabsDescendantsProvider value={descendants}>\n\t\t\t\t<TabsProvider value={ctx}>\n\t\t\t\t\t<Box ref={ref} {...htmlProps}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</Box>\n\t\t\t\t</TabsProvider>\n\t\t\t</TabsDescendantsProvider>\n\t\t);\n\t}),\n\t\"root\"\n);\n\nexport interface TabListProps\n\textends UseTabListProps,\n\t\tOmit<FlexProps, \"onKeyDown\" | \"ref\"> {}\n\nexport const TabList = withContext(\n\tforwardRef<HTMLDivElement, TabListProps>(function TabList(props, ref) {\n\t\tconst tablistProps = useTabList({ ...props, ref });\n\n\t\treturn <Flex {...tablistProps} />;\n\t}),\n\t\"tabList\"\n);\n\nexport interface TabProps extends UseTabOptions, ButtonProps {}\n\nexport const Tab = withContext(\n\tforwardRef<HTMLButtonElement, TabProps>(function Tab(props, ref) {\n\t\tconst { children, ...rest } = props;\n\n\t\tconst { isSelected, props: tabProps } = useTab({ ...rest, ref });\n\n\t\treturn (\n\t\t\t<Button size={\"sm\"} variant={\"ghost\"} disableRipple {...tabProps}>\n\t\t\t\t{children}\n\t\t\t\t{isSelected && <TabIndicator />}\n\t\t\t</Button>\n\t\t);\n\t}),\n\t\"tab\"\n);\n\nexport interface TabPanelsProps extends FlexProps {}\n\nexport const TabPanels = withContext(\n\tforwardRef<HTMLDivElement, TabPanelsProps>(function TabPanels(props, ref) {\n\t\tconst panelsProps = useTabPanels(props);\n\n\t\treturn <Flex {...panelsProps} ref={ref} />;\n\t}),\n\t\"tabPanels\"\n);\n\nexport interface TabPanelProps extends HTMLDreamyProps<\"div\"> {}\n\nexport const TabPanel = withContext(\n\tforwardRef<HTMLDivElement, TabPanelProps>(function TabPanel(props, ref) {\n\t\tconst panelProps = useTabPanel({ ...props, ref });\n\n\t\treturn <Flex {...panelProps} ref={ref} />;\n\t}),\n\t\"tabPanel\"\n);\n\nexport interface TabIndicatorProps extends MotionFlexProps {}\n\n/**\n * Used inside Tab components\n * @internal\n */\nconst TabIndicator = withContext(\n\tforwardRef<HTMLDivElement, TabIndicatorProps>(function TabIndicator(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { id } = useTabsContext();\n\t\tconst transition = useDefaultTransition();\n\t\tconst domAvailable = useCanUseDOM();\n\n\t\treturn (\n\t\t\t<MotionFlex\n\t\t\t\tref={ref}\n\t\t\t\t{...props}\n\t\t\t\t// as={\"span\"}\n\t\t\t\tlayout\n\t\t\t\tlayoutId={`${id}-indicator`}\n\t\t\t\tlayoutDependency={false}\n\t\t\t\ttransition={{\n\t\t\t\t\t...transition,\n\t\t\t\t\t// @ts-ignore - again stupid\n\t\t\t\t\tduration: (transition?.duration ?? 0.2) * 1.5\n\t\t\t\t}}\n\t\t\t\t// animating indicator enter on hydration\n\t\t\t\tinitial={\n\t\t\t\t\t!domAvailable ? { opacity: 0, scale: 0.95 } : undefined\n\t\t\t\t}\n\t\t\t\tanimate={{ opacity: 1, scale: 1 }}\n\t\t\t\trounded={\"inherit\"}\n\t\t\t/>\n\t\t);\n\t}),\n\t\"tabIndicator\"\n);\n"
  },
  "component": "Tabs"
}