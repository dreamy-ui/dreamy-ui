{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./factory",
    "./icon",
    "./style-context",
    "./transitions"
  ],
  "id": "accordion",
  "file": {
    "name": "accordion.tsx",
    "content": "\"use client\";\n\nimport {\n\tUseAccordionItemProps,\n\tUseAccordionItemReturn,\n\tUseAccordionProps,\n\tUseAccordionReturn,\n\tcreateContext,\n\tcreateDescendantContext,\n\tobjectToDeps,\n\tuseAccordion,\n\tuseAccordionItem\n} from \"@dreamy-ui/react\";\nimport { forwardRef, useMemo } from \"react\";\nimport type { AccordionVariantProps } from \"styled-system/recipes\";\nimport { accordion } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { HTMLDreamyProps, dreamy } from \"./factory\";\nimport { IconProps } from \"./icon\";\nimport { createStyleContext } from \"./style-context\";\nimport { Collapse, CollapseProps } from \"./transitions\";\n\ninterface AccordionContext\n\textends Omit<UseAccordionReturn, \"htmlProps\" | \"descendants\"> {\n\treduceMotion: boolean;\n}\n\nexport const [AccordionProvider, useAccordionContext] =\n\tcreateContext<AccordionContext>({\n\t\tname: \"AccordionContext\",\n\t\thookName: \"useAccordionContext\",\n\t\tproviderName: \"Accordion\"\n\t});\n\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">;\n\nexport const [AccordionItemProvider, useAccordionItemContext] =\n\tcreateContext<AccordionItemContext>({\n\t\tname: \"AccordionItemContext\",\n\t\thookName: \"useAccordionItemContext\",\n\t\tproviderName: \"<AccordionItem />\"\n\t});\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n\tAccordionDescendantsProvider,\n\tuseAccordionDescendantsContext,\n\tuseAccordionDescendants,\n\tuseAccordionDescendant\n] = createDescendantContext<HTMLButtonElement>();\n\nconst { withProvider, withContext } = createStyleContext(accordion);\n\nexport interface AccordionProps\n\textends UseAccordionProps,\n\t\tOmit<HTMLDreamyProps<\"div\">, keyof UseAccordionProps>,\n\t\tAccordionVariantProps {\n\t/**\n\t * If `true`, height animation and transitions will be disabled.\n\t *\n\t * @default false\n\t */\n\treduceMotion?: boolean;\n}\n\n/**\n * Accordion component\n *\n * @See Docs https://dreamy-ui.com/docs/components/accordion\n */\nexport const Accordion = withProvider(\n\tforwardRef<HTMLDivElement, AccordionProps>(function AccordionRoot(\n\t\townProps,\n\t\tref\n\t) {\n\t\tconst { htmlProps, descendants, ...context } = useAccordion(ownProps);\n\n\t\t// biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n\t\tconst ctx = useMemo(\n\t\t\t() => ({ ...context, reduceMotion: !!ownProps.reduceMotion }),\n\t\t\t[...objectToDeps(context), ownProps.reduceMotion]\n\t\t);\n\n\t\treturn (\n\t\t\t<AccordionDescendantsProvider value={descendants}>\n\t\t\t\t<AccordionProvider value={ctx}>\n\t\t\t\t\t<Box ref={ref} {...htmlProps} />\n\t\t\t\t</AccordionProvider>\n\t\t\t</AccordionDescendantsProvider>\n\t\t);\n\t}),\n\t\"root\"\n);\n\nexport interface AccordionItemProps\n\textends Omit<\n\t\t\tHTMLDreamyProps<\"div\">,\n\t\t\tkeyof UseAccordionItemProps | \"children\"\n\t\t>,\n\t\tUseAccordionItemProps {\n\tchildren?:\n\t\t| React.ReactNode\n\t\t| ((props: {\n\t\t\t\tisExpanded: boolean;\n\t\t\t\tisDisabled: boolean;\n\t\t  }) => React.ReactNode);\n}\n\nexport const AccordionItem = withContext(\n\tforwardRef<HTMLDivElement, AccordionItemProps>(function AccordionItem(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { children } = props;\n\t\tconst { htmlProps, ...ctx } = useAccordionItem(props);\n\n\t\treturn (\n\t\t\t<AccordionItemProvider value={ctx}>\n\t\t\t\t<Box ref={ref} {...htmlProps}>\n\t\t\t\t\t{typeof children === \"function\"\n\t\t\t\t\t\t? children({\n\t\t\t\t\t\t\t\tisExpanded: !!ctx.isOpen,\n\t\t\t\t\t\t\t\tisDisabled: !!ctx.isDisabled\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t: children}\n\t\t\t\t</Box>\n\t\t\t</AccordionItemProvider>\n\t\t);\n\t}),\n\t\"item\"\n);\n\nexport interface AccordionContentProps extends HTMLDreamyProps<\"div\"> {\n\t/**\n\t * The properties passed to the underlying `Collapse` component.\n\t */\n\tcollapseProps?: CollapseProps;\n}\n\nexport const AccordionContent = withContext(\n\tforwardRef<HTMLDivElement, AccordionContentProps>(function AccordionContent(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { collapseProps, ...rest } = props;\n\n\t\tconst { reduceMotion } = useAccordionContext();\n\t\tconst { getContentProps, isOpen } = useAccordionItemContext();\n\n\t\t// remove `hidden` prop, 'coz we're using height animation\n\t\tconst panelProps = getContentProps(rest, ref) as any;\n\n\t\tif (!reduceMotion) {\n\t\t\t// biome-ignore lint/performance/noDelete: <explanation>\n\t\t\tdelete panelProps.hidden;\n\t\t}\n\n\t\tconst child = <Box {...panelProps} />;\n\n\t\tif (!reduceMotion) {\n\t\t\treturn (\n\t\t\t\t<Collapse in={isOpen} {...collapseProps}>\n\t\t\t\t\t{child}\n\t\t\t\t</Collapse>\n\t\t\t);\n\t\t}\n\n\t\treturn child;\n\t}),\n\t\"content\"\n);\n\nexport interface AccordionTriggerProps extends HTMLDreamyProps<\"button\"> {\n\t/**\n\t * The heading tag to use for the wrapper of the trigger.\n\t * @default \"h2\"\n\t */\n\theadingTag?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n\t/**\n\t * Removes default icon and allows for custom icon to be passed in.\n\t */\n\ticon?: React.ReactNode;\n\t/**\n\t * Props to pass to the default icon.\n\t */\n\ticonProps?: IconProps;\n}\n\nexport const AccordionTrigger = withContext(\n\tforwardRef<HTMLButtonElement, AccordionTriggerProps>(\n\t\tfunction AccordionTrigger(\n\t\t\t{\n\t\t\t\theadingTag: HeadingTag = \"h2\",\n\t\t\t\tchildren,\n\t\t\t\ticon,\n\t\t\t\ticonProps,\n\t\t\t\t...props\n\t\t\t},\n\t\t\tref\n\t\t) {\n\t\t\tconst { getTriggerProps } = useAccordionItemContext();\n\n\t\t\treturn (\n\t\t\t\t<HeadingTag>\n\t\t\t\t\t<dreamy.button {...(getTriggerProps(props, ref) as any)}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t\t{icon ?? <AccordionIcon {...iconProps} />}\n\t\t\t\t\t</dreamy.button>\n\t\t\t\t</HeadingTag>\n\t\t\t);\n\t\t}\n\t),\n\t\"trigger\"\n);\n\nexport interface AccordionIconProps extends HTMLDreamyProps<\"svg\"> {}\n\n/**\n * @internal\n */\nconst AccordionIcon = withContext(\n\tforwardRef<SVGSVGElement, AccordionIconProps>(function AccordionIcon(\n\t\tprops,\n\t\tref\n\t) {\n\t\treturn (\n\t\t\t<dreamy.svg ref={ref} asChild {...props}>\n\t\t\t\t<svg\n\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path d=\"m6 9 6 6 6-6\" />\n\t\t\t\t</svg>\n\t\t\t</dreamy.svg>\n\t\t);\n\t}),\n\t\"icon\"\n);\n"
  },
  "component": "Accordion"
}