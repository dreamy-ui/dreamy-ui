{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./factory"
  ],
  "id": "image",
  "file": {
    "name": "image.tsx",
    "content": "\"use client\";\n\nimport {\n\tariaAttr,\n\tcallAllHandlers,\n\tobjectToDeps,\n\tomit\n} from \"@dreamy-ui/react\";\nimport { cloneElement, forwardRef, useMemo, useRef } from \"react\";\nimport { image } from \"styled-system/recipes\";\nimport type { SystemProperties } from \"styled-system/types\";\nimport { Box } from \"./box\";\nimport { dreamy, HTMLDreamyProps } from \"./factory\";\n\nexport interface ImageProps extends HTMLDreamyProps<\"img\">, SystemProperties {\n\t/**\n\t * Fallback image `src` to show if image fails.\n\t */\n\tfallbackSrc?: string;\n\t/**\n\t * If `true`, image will zoom in on hover\n\t *\n\t * @default false\n\t */\n\tzoomOnHover?: boolean;\n\t/**\n\t * If `true`, 2nd image will be placed behind with a blur effect\n\t *\n\t * @default false\n\t */\n\tblurShadow?: boolean;\n}\n\nconst StyledImage = dreamy(\"img\", image);\n\n/**\n * Native image with useful helpers.\n *\n * @See Docs https://dreamy-ui.com/docs/components/image\n */\nexport const Image = forwardRef<HTMLImageElement, ImageProps>(function Image(\n\tprops,\n\tref\n) {\n\tconst {\n\t\tfallbackSrc,\n\t\tsrc,\n\t\tsrcSet,\n\t\tloading,\n\t\tcrossOrigin,\n\t\treferrerPolicy,\n\t\tzoomOnHover,\n\t\tblurShadow,\n\t\t...rest\n\t} = props;\n\n\tconst hasErrored = useRef(false);\n\n\t// biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n\tconst shared = useMemo(() => {\n\t\treturn {\n\t\t\tref,\n\t\t\t\"data-zoomed\": zoomOnHover,\n\t\t\t...omit(rest, [\"onError\", \"onLoad\"])\n\t\t};\n\t}, [zoomOnHover, ref, ...objectToDeps(rest)]);\n\n\tconst img = useMemo(\n\t\t() => (\n\t\t\t<StyledImage\n\t\t\t\tsrc={src}\n\t\t\t\tsrcSet={srcSet}\n\t\t\t\tcrossOrigin={crossOrigin}\n\t\t\t\tloading={loading}\n\t\t\t\treferrerPolicy={referrerPolicy}\n\t\t\t\t{...shared}\n\t\t\t\tonError={callAllHandlers((e: any) => {\n\t\t\t\t\tif (fallbackSrc && !hasErrored.current) {\n\t\t\t\t\t\thasErrored.current = true;\n\t\t\t\t\t\te.target.src = fallbackSrc;\n\t\t\t\t\t}\n\t\t\t\t}, rest.onError)}\n\t\t\t/>\n\t\t),\n\t\t[\n\t\t\tshared,\n\t\t\tsrc,\n\t\t\tsrcSet,\n\t\t\tcrossOrigin,\n\t\t\tloading,\n\t\t\treferrerPolicy,\n\t\t\trest.onError,\n\t\t\tfallbackSrc\n\t\t]\n\t);\n\n\tconst zoomed = useMemo(() => {\n\t\tif (!zoomOnHover) return null;\n\n\t\treturn (\n\t\t\t<Box as={\"div\"} data-part={\"wrapper-zoomed\"} {...shared}>\n\t\t\t\t{img}\n\t\t\t</Box>\n\t\t);\n\t}, [img, zoomOnHover, shared]);\n\n\tif (blurShadow || zoomOnHover) {\n\t\treturn (\n\t\t\t<Box as={\"div\"} data-part={\"wrapper\"}>\n\t\t\t\t{zoomOnHover ? zoomed : img}\n\t\t\t\t{blurShadow &&\n\t\t\t\t\tcloneElement(img, {\n\t\t\t\t\t\t\"data-part\": \"blurred\",\n\t\t\t\t\t\tclassName: shared.className?.replace(\n\t\t\t\t\t\t\t\"dreamy-image\",\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t),\n\t\t\t\t\t\t\"aria-hidden\": ariaAttr(true)\n\t\t\t\t\t})}\n\t\t\t</Box>\n\t\t);\n\t}\n\n\treturn img;\n});\n"
  },
  "component": "Image"
}