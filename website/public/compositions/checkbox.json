{
  "type": "composition",
  "fileDependencies": [
    "./factory",
    "./flex",
    "./visually-hidden"
  ],
  "id": "checkbox",
  "file": {
    "name": "checkbox.tsx",
    "content": "import {\n\tTRANSITION_EASINGS,\n\tUseCheckboxGroupProps,\n\tUseCheckboxGroupReturn,\n\tUseCheckboxProps,\n\tUseCheckboxReturn,\n\tcreateContext,\n\tuseCheckbox,\n\tuseCheckboxGroup,\n\tuseMotionVariants\n} from \"@dreamy-ui/react\";\nimport { type SVGMotionProps, m } from \"motion/react\";\nimport { type ReactElement, cloneElement, forwardRef, useMemo } from \"react\";\nimport { cx } from \"styled-system/css\";\nimport { type CheckboxVariantProps, checkbox } from \"styled-system/recipes\";\nimport { dreamy } from \"./factory\";\nimport { Flex, FlexProps } from \"./flex\";\nimport { VisuallyHiddenInput } from \"./visually-hidden\";\n\nexport interface CheckboxProps extends UseCheckboxProps, CheckboxVariantProps {}\n\nconst StyledCheckbox = dreamy(\"div\", checkbox);\n\n/**\n * Checkbox component\n *\n * @See Docs https://dreamy-ui.com/docs/components/checkbox\n */\nexport const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(\n\t(props, ref) => {\n\t\tconst {\n\t\t\tchildren,\n\t\t\ticon = <CheckboxIcon />,\n\t\t\tgetRootProps,\n\t\t\tgetWrapperProps,\n\t\t\tgetInputProps,\n\t\t\tgetIconProps,\n\t\t\tgetLabelProps\n\t\t} = useCheckbox({ ...props, ref });\n\n\t\tconst clonedIcon = useMemo(() => {\n\t\t\treturn typeof icon === \"function\"\n\t\t\t\t? icon(getIconProps() as any)\n\t\t\t\t: cloneElement(icon as ReactElement, getIconProps());\n\t\t}, [getIconProps, icon]);\n\n\t\treturn (\n\t\t\t<StyledCheckbox {...(getRootProps() as any)}>\n\t\t\t\t<VisuallyHiddenInput {...(getInputProps() as any)} />\n\t\t\t\t<span {...getWrapperProps()}>{clonedIcon}</span>\n\t\t\t\t{children && <span {...getLabelProps()}>{children}</span>}\n\t\t\t</StyledCheckbox>\n\t\t);\n\t}\n);\n\nCheckbox.displayName = \"Checkbox\";\n\nexport interface IconCustomProps {\n\t/**\n\t * Animation time in milliseconds.\n\t * @default 200\n\t */\n\tanimationTime?: number;\n\t/**\n\t * Props to pass to the animated path\n\t */\n\tpathProps?: SVGMotionProps<SVGPathElement>;\n}\n\ntype CheckboxIconProps = Partial<\n\tReturnType<UseCheckboxReturn[\"getIconProps\"]> & IconCustomProps\n>;\n\nfunction CheckIcon(props: CheckboxIconProps) {\n\tconst {\n\t\tisChecked,\n\t\tactive,\n\t\treduceMotion,\n\t\tanimationTime = 200,\n\t\tpathProps,\n\t\t...otherProps\n\t} = props;\n\n\tconst variants = useMotionVariants();\n\n\treturn (\n\t\t<svg\n\t\t\taria-hidden=\"true\"\n\t\t\twidth=\"16\"\n\t\t\theight=\"16\"\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"2\"\n\t\t\tstrokeLinecap=\"round\"\n\t\t\tstrokeLinejoin=\"round\"\n\t\t\t{...otherProps}\n\t\t>\n\t\t\t<m.path\n\t\t\t\td=\"M20 6 9 17l-5-5\"\n\t\t\t\tinitial={false}\n\t\t\t\tanimate={\"animate\"}\n\t\t\t\tcustom={{ isChecked, active, animationTime }}\n\t\t\t\tvariants={variants.checkboxCheckIcon.default}\n\t\t\t\t{...pathProps}\n\t\t\t/>\n\t\t</svg>\n\t);\n}\n\nfunction IndeterminateIcon(props: CheckboxIconProps) {\n\tconst {\n\t\tisChecked,\n\t\treduceMotion,\n\t\tanimationTime = 0.2,\n\t\t...otherProps\n\t} = props;\n\n\treturn (\n\t\t<svg\n\t\t\taria-hidden=\"true\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth={2}\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t{...otherProps}\n\t\t>\n\t\t\t<m.line\n\t\t\t\tx1=\"21\"\n\t\t\t\tx2=\"3\"\n\t\t\t\ty1=\"12\"\n\t\t\t\ty2=\"12\"\n\t\t\t\tinitial={{\n\t\t\t\t\tpathOffset: 1,\n\t\t\t\t\tpathLength: 1\n\t\t\t\t}}\n\t\t\t\tanimate={{ pathOffset: 0, pathLength: 1 }}\n\t\t\t\texit={{\n\t\t\t\t\tpathOffset: 1,\n\t\t\t\t\tpathLength: 1\n\t\t\t\t}}\n\t\t\t\ttransition={{\n\t\t\t\t\tduration: !reduceMotion ? animationTime / 1000 : 0,\n\t\t\t\t\tease: TRANSITION_EASINGS.easeInOut\n\t\t\t\t}}\n\t\t\t/>\n\t\t</svg>\n\t);\n}\n\n/**\n * CheckboxIcon is used to visually indicate the checked or indeterminate\n * state of a checkbox.\n */\nexport function CheckboxIcon(props: CheckboxIconProps) {\n\tconst { isIndeterminate, ...otherProps } = props;\n\tconst BaseIcon = useMemo(\n\t\t() => (isIndeterminate ? IndeterminateIcon : CheckIcon),\n\t\t[isIndeterminate]\n\t);\n\n\treturn <BaseIcon {...otherProps} />;\n}\n\nexport interface CheckboxGroupContext\n\textends Pick<\n\t\t\tUseCheckboxGroupReturn,\n\t\t\t| \"onChange\"\n\t\t\t| \"value\"\n\t\t\t| \"isDisabled\"\n\t\t\t| \"isInvalid\"\n\t\t\t| \"isRequired\"\n\t\t\t| \"isReadOnly\"\n\t\t>,\n\t\tCheckboxVariantProps {\n\t/**\n\t * Should reduce motion\n\t */\n\treduceMotion?: boolean;\n}\n\nexport const [CheckboxGroupProvider, useCheckboxGroupContext] =\n\tcreateContext<CheckboxGroupContext>({\n\t\tname: \"CheckboxGroupContext\",\n\t\tstrict: false\n\t});\n\nexport interface CheckboxGroupProps\n\textends UseCheckboxGroupProps,\n\t\tCheckboxVariantProps,\n\t\tOmit<FlexProps, \"defaultValue\" | \"onChange\"> {}\n\n/**\n * CheckboxGroup component. Useful for grouping multiple checkboxes together.\n *\n * @See Docs https://dreamy-ui.com/docs/components/checkbox-group\n */\nexport function CheckboxGroup(props: CheckboxGroupProps) {\n\tconst {\n\t\tscheme,\n\t\tsize,\n\t\tvariant,\n\t\tchildren,\n\t\tisDisabled,\n\t\tisRequired,\n\t\tisReadOnly,\n\t\tisInvalid,\n\t\treduceMotion,\n\t\tonChange: onChangeProp,\n\t\tdefaultValue,\n\t\t...rest\n\t} = props;\n\tconst { value, onChange } = useCheckboxGroup({\n\t\tonChange: onChangeProp,\n\t\tdefaultValue,\n\t\t...props\n\t});\n\n\tconst group = useMemo(\n\t\t() => ({\n\t\t\tsize,\n\t\t\tscheme,\n\t\t\tvariant,\n\t\t\tvalue,\n\t\t\tonChange,\n\t\t\tisDisabled,\n\t\t\tisRequired,\n\t\t\tisReadOnly,\n\t\t\tisInvalid,\n\t\t\treduceMotion\n\t\t}),\n\t\t[\n\t\t\tsize,\n\t\t\tonChange,\n\t\t\tscheme,\n\t\t\tvalue,\n\t\t\tvariant,\n\t\t\tisDisabled,\n\t\t\tisRequired,\n\t\t\tisReadOnly,\n\t\t\tisInvalid,\n\t\t\treduceMotion\n\t\t]\n\t);\n\n\treturn (\n\t\t<CheckboxGroupProvider value={group}>\n\t\t\t<Flex\n\t\t\t\t{...rest}\n\t\t\t\tclassName={cx(\"dreamy-checkbox-group\", rest.className)}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</Flex>\n\t\t</CheckboxGroupProvider>\n\t);\n}\n\nCheckboxGroup.displayName = \"CheckboxGroup\";\n"
  },
  "component": "Checkbox"
}