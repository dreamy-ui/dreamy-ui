{
  "type": "composition",
  "fileDependencies": [
    "./motion"
  ],
  "id": "transitions",
  "file": {
    "name": "transitions.tsx",
    "content": "import { useMotionVariants, WithTransitionConfig } from \"@dreamy-ui/react\";\nimport {\n\tAnimatePresence,\n\ttype Variants as _Variants,\n\ttype AnimatePresenceProps\n} from \"motion/react\";\nimport { forwardRef, useMemo } from \"react\";\nimport { css, cx } from \"styled-system/css\";\nimport { MotionBox, MotionBoxProps } from \"./motion\";\n\nexport interface CollapseOptions {\n\t/**\n\t * If `true`, the opacity of the content will be animated\n\t * @default true\n\t */\n\tanimateOpacity?: boolean;\n\t/**\n\t * The height you want the content in its collapsed state.\n\t * @default 0\n\t */\n\tstartingHeight?: number | string;\n\t/**\n\t * The height you want the content in its expanded state.\n\t * @default \"auto\"\n\t */\n\tendingHeight?: number | string;\n\t/**\n\t * Props to pass to the AnimatePresence component\n\t */\n\tanimatePresenceProps?: AnimatePresenceProps;\n}\n\nexport type ICollapse = CollapseProps;\n\nexport interface CollapseProps\n\textends WithTransitionConfig<MotionBoxProps>,\n\t\tCollapseOptions {}\n\n/**\n * Collapse component.\n *\n * @See Docs https://dreamy-ui.com/docs/components/transitions\n */\nexport const Collapse = forwardRef<HTMLDivElement, CollapseProps>(\n\t(props, ref) => {\n\t\tconst {\n\t\t\tin: isOpen,\n\t\t\tunmountOnExit,\n\t\t\tanimateOpacity = true,\n\t\t\tstartingHeight = 0,\n\t\t\tendingHeight = \"auto\",\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\ttransition,\n\t\t\ttransitionEnd,\n\t\t\tanimatePresenceProps,\n\t\t\t...rest\n\t\t} = props;\n\n\t\tconst custom = useMemo(\n\t\t\t() => ({\n\t\t\t\tstartingHeight,\n\t\t\t\tendingHeight,\n\t\t\t\tanimateOpacity,\n\t\t\t\ttransition,\n\t\t\t\ttransitionEnd: {\n\t\t\t\t\tenter: transitionEnd?.enter,\n\t\t\t\t\texit: unmountOnExit\n\t\t\t\t\t\t? transitionEnd?.exit\n\t\t\t\t\t\t: transitionEnd?.exit\n\t\t\t\t}\n\t\t\t}),\n\t\t\t[\n\t\t\t\tstartingHeight,\n\t\t\t\tendingHeight,\n\t\t\t\tanimateOpacity,\n\t\t\t\ttransition,\n\t\t\t\ttransitionEnd,\n\t\t\t\tunmountOnExit\n\t\t\t]\n\t\t);\n\n\t\tconst {\n\t\t\tcollapse: { default: variants }\n\t\t} = useMotionVariants();\n\n\t\tconst show = useMemo(\n\t\t\t() => (unmountOnExit ? isOpen : true),\n\t\t\t[unmountOnExit, isOpen]\n\t\t);\n\t\tconst animate = useMemo(\n\t\t\t() => (isOpen || unmountOnExit ? \"initial\" : \"exit\"),\n\t\t\t[isOpen, unmountOnExit]\n\t\t);\n\n\t\treturn (\n\t\t\t<AnimatePresence\n\t\t\t\tinitial={false}\n\t\t\t\tcustom={custom}\n\t\t\t\t{...animatePresenceProps}\n\t\t\t>\n\t\t\t\t{show && (\n\t\t\t\t\t<MotionBox\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\tcustom={custom}\n\t\t\t\t\t\tvariants={variants as _Variants}\n\t\t\t\t\t\tinitial={unmountOnExit ? \"exit\" : false}\n\t\t\t\t\t\tanimate={animate}\n\t\t\t\t\t\texit=\"exit\"\n\t\t\t\t\t\t{...rest}\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\tcss({\n\t\t\t\t\t\t\t\toverflow: \"hidden\",\n\t\t\t\t\t\t\t\tdisplay: \"block\"\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tclassName\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t);\n\t}\n);\n\nCollapse.displayName = \"Collapse\";\n"
  },
  "component": "Transitions"
}