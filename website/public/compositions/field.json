{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./factory",
    "./icon"
  ],
  "id": "field",
  "file": {
    "name": "field.tsx",
    "content": "\"use client\";\n\nimport {\n\tFieldProvider,\n\tuseFieldContext,\n\tuseFieldProvider,\n\tUserFeedbackProps\n} from \"@dreamy-ui/react\";\nimport { forwardRef } from \"react\";\nimport { field, FieldVariantProps } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { dreamy, HTMLDreamyProps } from \"./factory\";\nimport { Icon, IconProps } from \"./icon\";\n\nexport interface FieldLabelProps extends HTMLDreamyProps<\"label\"> {\n\t/**\n\t * @type React.ReactNode\n\t */\n\trequiredIndicator?: React.ReactNode;\n\t/**\n\t * @type React.ReactNode\n\t */\n\toptionalIndicator?: React.ReactNode;\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FieldLabel = forwardRef<HTMLLabelElement, FieldLabelProps>(\n\tfunction FieldLabel(props, ref) {\n\t\tconst {\n\t\t\tchildren,\n\t\t\trequiredIndicator = <RequiredIndicator />,\n\t\t\toptionalIndicator = null,\n\t\t\t...rest\n\t\t} = props;\n\n\t\tconst field = useFieldContext();\n\t\tconst ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest };\n\n\t\treturn (\n\t\t\t<Box as={\"label\"} data-part=\"label\" {...ownProps}>\n\t\t\t\t{children}\n\t\t\t\t{field?.isRequired ? requiredIndicator : optionalIndicator}\n\t\t\t</Box>\n\t\t);\n\t}\n);\n\nexport interface RequiredIndicatorProps extends HTMLDreamyProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nconst RequiredIndicator = forwardRef<HTMLSpanElement, RequiredIndicatorProps>(\n\tfunction RequiredIndicator(props, ref) {\n\t\tconst field = useFieldContext();\n\n\t\tif (!field?.isRequired) return null;\n\n\t\treturn (\n\t\t\t<Box\n\t\t\t\tas={\"span\"}\n\t\t\t\tdata-part=\"requiredIndicator\"\n\t\t\t\t{...field?.getRequiredIndicatorProps(props, ref)}\n\t\t\t/>\n\t\t);\n\t}\n);\n\nexport interface FieldErrorProps extends HTMLDreamyProps<\"label\"> {}\n\nexport const FieldError = forwardRef<HTMLLabelElement, FieldErrorProps>(\n\tfunction FieldError(props, ref) {\n\t\tconst field = useFieldContext();\n\n\t\tif (!field?.isInvalid) return null;\n\n\t\treturn (\n\t\t\t<Box\n\t\t\t\tdata-part=\"error\"\n\t\t\t\t{...field?.getErrorMessageProps(props, ref)}\n\t\t\t/>\n\t\t);\n\t}\n);\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FieldErrorIcon = forwardRef<SVGSVGElement, IconProps>(\n\t(props, ref) => {\n\t\tconst field = useFieldContext();\n\n\t\tif (!field?.isInvalid) return null;\n\n\t\treturn (\n\t\t\t<Icon\n\t\t\t\tref={ref}\n\t\t\t\taria-hidden\n\t\t\t\tsize={\"sm\"}\n\t\t\t\tdata-part=\"errorIcon\"\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\trole=\"img\"\n\t\t\t\t\taria-label=\"Error\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\td=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</Icon>\n\t\t);\n\t}\n);\n\nexport interface FieldHelpTextProps extends HTMLDreamyProps<\"div\"> {}\n\n/**\n * FieldHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FieldHelpText = forwardRef<HTMLDivElement, FieldHelpTextProps>(\n\tfunction FieldHelpText(props, ref) {\n\t\tconst field = useFieldContext();\n\n\t\tif (field?.isInvalid) return null;\n\n\t\treturn (\n\t\t\t<Box\n\t\t\t\tdata-part=\"helpText\"\n\t\t\t\t{...field?.getHelpTextProps(props, ref)}\n\t\t\t/>\n\t\t);\n\t}\n);\n\ninterface FieldContext extends UserFeedbackProps {\n\t/**\n\t * The label text used to inform users as to what information is\n\t * requested for a text field.\n\t */\n\tlabel?: string;\n\t/**\n\t * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n\t * - The form element (e.g. Input) gets the `id`\n\t * - The form label id: `form-label-${id}`\n\t * - The form error text id: `form-error-text-${id}`\n\t * - The form helper text id: `form-helper-text-${id}`\n\t */\n\tid?: string;\n}\n\nexport interface FieldProps\n\textends HTMLDreamyProps<\"div\">,\n\t\tFieldContext,\n\t\tFieldVariantProps {\n\thelpText?: string;\n\terror?: string;\n}\n\nconst StyledField = dreamy(\"div\", field);\n\n/**\n * Field component\n *\n * @See Docs https://dreamy-ui.com/docs/components/field\n */\nexport const Field = forwardRef<HTMLDivElement, FieldProps>(function Field(\n\t{ children, label, helpText, error, ...props },\n\tref\n) {\n\tconst { getRootProps, htmlProps: _, ...context } = useFieldProvider(props);\n\n\treturn (\n\t\t<FieldProvider value={context}>\n\t\t\t<StyledField {...getRootProps({}, ref)}>\n\t\t\t\t``\n\t\t\t\t<>\n\t\t\t\t\t{label ? <FieldLabel>{label}</FieldLabel> : null}\n\t\t\t\t\t{children}\n\t\t\t\t</>\n\t\t\t\t{helpText && <FieldHelpText>{helpText}</FieldHelpText>}\n\t\t\t\t{error && <FieldError>{error}</FieldError>}\n\t\t\t</StyledField>\n\t\t</FieldProvider>\n\t);\n});\n"
  },
  "component": "Field"
}