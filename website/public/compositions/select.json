{
  "type": "composition",
  "fileDependencies": [
    "./box",
    "./style-context",
    "./factory",
    "./popover",
    "./visually-hidden"
  ],
  "id": "select",
  "file": {
    "name": "select.tsx",
    "content": "\"use client\";\n\nimport {\n\tHTMLDreamProps,\n\tSelectDescendantsProvider,\n\tSelectProvider,\n\tuseHiddenSelect,\n\tuseSafeLayoutEffect,\n\tuseSelect,\n\tuseSelectContext,\n\tuseSelectItem,\n\tUseSelectItemProps,\n\tUseSelectProps\n} from \"@dreamy-ui/react\";\nimport type React from \"react\";\nimport { forwardRef, ReactNode, RefObject, SVGProps, useState } from \"react\";\nimport { select } from \"styled-system/recipes\";\nimport { Box } from \"./box\";\nimport { createStyleContext } from \"./style-context\";\n\nimport { splitCssProps } from \"styled-system/jsx\";\nimport { dreamy, FocusableElement, HTMLDreamyProps } from \"./factory\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverContentProps,\n\tPopoverTrigger\n} from \"./popover\";\nimport { VisuallyHidden } from \"./visually-hidden\";\nconst { withProvider, withContext } = createStyleContext(select);\n\nexport interface HiddenSelectProps {\n\tplaceholder: string;\n\tmultiple: boolean;\n\tautoComplete: string;\n\ttriggerRef: RefObject<FocusableElement>;\n\tdomRef: RefObject<HTMLSelectElement>;\n\tonChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n\tonChangeValue: (value: string | string[]) => void;\n}\n\nfunction HiddenSelect(props: HiddenSelectProps) {\n\tconst { domRef, placeholder } = props;\n\n\tconst { containerProps, selectProps, descendants, id, selectedKeys } =\n\t\tuseHiddenSelect({\n\t\t\t...props,\n\t\t\tdomRef\n\t\t});\n\n\tconst [, forceUpdate] = useState({});\n\n\tuseSafeLayoutEffect(() => {\n\t\tforceUpdate({});\n\t}, []);\n\n\tconst items = Array.from(descendants.values());\n\n\treturn (\n\t\t<VisuallyHidden {...containerProps}>\n\t\t\t<label>\n\t\t\t\t{placeholder}\n\t\t\t\t<select {...selectProps} ref={domRef}>\n\t\t\t\t\t<option />\n\t\t\t\t\t{items.map((item: any) => {\n\t\t\t\t\t\tconst isSelected = selectProps.multiple\n\t\t\t\t\t\t\t? selectedKeys.includes(item.node.value)\n\t\t\t\t\t\t\t: undefined;\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<option\n\t\t\t\t\t\t\t\tkey={`${id}-${item.node.value}`}\n\t\t\t\t\t\t\t\tvalue={item.node.value}\n\t\t\t\t\t\t\t\tselected={isSelected}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{item.textValue}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</select>\n\t\t\t</label>\n\t\t</VisuallyHidden>\n\t);\n}\n\nexport interface SelectProps<T extends boolean>\n\textends UseSelectProps<T>,\n\t\tOmit<HTMLDreamProps<\"div\">, keyof UseSelectProps<T>> {\n\tchildren?: ReactNode;\n}\n\n/**\n * Select component\n *\n * @See Docs https://dreamy-ui.com/docs/components/select\n */\nexport const Select: <T extends boolean = false>(\n\tprops: SelectProps<T>\n) => React.JSX.Element = withProvider(function SelectRoot<\n\tT extends boolean = false\n>({ children, ...props }: SelectProps<T>) {\n\tconst [cssProps, restProps] = splitCssProps(props);\n\tconst ctx = useSelect<T>(restProps);\n\n\treturn (\n\t\t<SelectProvider value={ctx as any}>\n\t\t\t<Box\n\t\t\t\t{...ctx.getRootProps({\n\t\t\t\t\t...cssProps,\n\t\t\t\t\tclassName: restProps.className\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<HiddenSelect {...(ctx.getHiddenSelectProps() as any)} />\n\t\t\t\t<Popover\n\t\t\t\t\tplacement=\"bottom\"\n\t\t\t\t\tisOpen={ctx.isOpen}\n\t\t\t\t\tonOpen={ctx.onOpen}\n\t\t\t\t\tonClose={ctx.onClose}\n\t\t\t\t\thasArrow={false}\n\t\t\t\t\tinitialFocusRef={ctx.triggerRef}\n\t\t\t\t\tlazyBehavior=\"keepMounted\"\n\t\t\t\t\treduceMotion={ctx.reduceMotion}\n\t\t\t\t\t{...props.popoverProps}\n\t\t\t\t>\n\t\t\t\t\t<SelectDescendantsProvider value={ctx.descendants}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</SelectDescendantsProvider>\n\t\t\t\t</Popover>\n\t\t\t</Box>\n\t\t</SelectProvider>\n\t);\n},\n\"root\") as any;\n\nexport interface SelectTriggerProps extends HTMLDreamyProps<\"button\"> {\n\t/**\n\t * Icon to show in the trigger.\n\t */\n\ticon?: React.ReactNode;\n\t/**\n\t * Placeholder text to show when no item is selected.\n\t */\n\tplaceholder?: string;\n\t/**\n\t * Text to show when multiple items are selected.\n\t */\n\tmultipleSelectedText?: (selectedKeys: string[]) => string;\n}\n\nexport const SelectTrigger = withContext(\n\tforwardRef<HTMLButtonElement, SelectTriggerProps>(function SelectTrigger(\n\t\t{\n\t\t\tchildren,\n\t\t\tplaceholder,\n\t\t\ticon,\n\t\t\tmultipleSelectedText = (selectedKeys) =>\n\t\t\t\t`${selectedKeys.length} Selected`,\n\t\t\t...rest\n\t\t},\n\t\tref\n\t) {\n\t\tconst { getTriggerProps, selectedKeys, descendants, isClearable } =\n\t\t\tuseSelectContext();\n\n\t\tconst selectedNames = selectedKeys.map((key) => {\n\t\t\tconst item: any = Array.from(descendants.values()).find(\n\t\t\t\t(node: any) => {\n\t\t\t\t\treturn node.node.value === key;\n\t\t\t\t}\n\t\t\t);\n\t\t\treturn item?.textValue;\n\t\t});\n\n\t\tconst [, forceUpdate] = useState({});\n\n\t\tuseSafeLayoutEffect(() => {\n\t\t\tforceUpdate({});\n\t\t}, []);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<PopoverTrigger>\n\t\t\t\t\t<dreamy.button {...(getTriggerProps(rest, ref) as any)}>\n\t\t\t\t\t\t{icon && icon}\n\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{selectedNames.length === 1\n\t\t\t\t\t\t\t\t? selectedNames[0]\n\t\t\t\t\t\t\t\t: selectedNames.length > 1\n\t\t\t\t\t\t\t\t? multipleSelectedText(selectedNames)\n\t\t\t\t\t\t\t\t: placeholder}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<SelectIndicatorGroup>\n\t\t\t\t\t\t\t{isClearable && selectedKeys.length > 0 && (\n\t\t\t\t\t\t\t\t<SelectClearButton />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<SelectIndicator />\n\t\t\t\t\t\t</SelectIndicatorGroup>\n\t\t\t\t\t</dreamy.button>\n\t\t\t\t</PopoverTrigger>\n\t\t\t</>\n\t\t);\n\t}),\n\t\"trigger\"\n);\n\nexport interface SelectContentProps extends PopoverContentProps {}\n\nexport const SelectContent = withContext(\n\tforwardRef<HTMLDivElement, SelectContentProps>(function SelectContent(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { children, ...rest } = props;\n\n\t\tconst { getContentProps } = useSelectContext();\n\n\t\treturn (\n\t\t\t<PopoverContent {...getContentProps(rest, ref)}>\n\t\t\t\t{children}\n\t\t\t</PopoverContent>\n\t\t);\n\t}),\n\t\"content\"\n);\n\nexport interface SelectItemProps extends UseSelectItemProps {}\n\nexport const SelectItem = withContext(\n\tforwardRef<HTMLDivElement, SelectItemProps>(function SelectItem(\n\t\tprops,\n\t\tref\n\t) {\n\t\tconst { selectedStrategy, selectedKeys } = useSelectContext();\n\t\tconst itemProps = useSelectItem(props, ref);\n\n\t\treturn (\n\t\t\t<dreamy.button {...(itemProps as any)}>\n\t\t\t\t{itemProps.children}\n\n\t\t\t\t{(selectedStrategy === \"checkmark\" ||\n\t\t\t\t\tselectedStrategy === \"both\") &&\n\t\t\t\t\tselectedKeys.includes(itemProps.value) && (\n\t\t\t\t\t\t<SelectItemIndicator />\n\t\t\t\t\t)}\n\t\t\t</dreamy.button>\n\t\t);\n\t}),\n\t\"item\"\n);\n\n/**\n * @internal\n */\nconst SelectIndicatorGroup = withContext(Box, \"indicatorGroup\");\n\nconst CheckIcon = forwardRef<SVGSVGElement, SVGProps<SVGSVGElement>>(\n\tfunction CheckIcon(props, ref) {\n\t\treturn (\n\t\t\t<svg\n\t\t\t\taria-hidden=\"true\"\n\t\t\t\twidth=\"16\"\n\t\t\t\theight=\"16\"\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t<path d=\"M20 6 9 17l-5-5\" />\n\t\t\t</svg>\n\t\t);\n\t}\n);\n\nconst SelectIndicator = withContext(CheckIcon, \"indicator\");\n\nexport interface SelectClearButtonProps extends HTMLDreamyProps<\"button\"> {}\n\nconst SelectClearButton = withContext(\n\tforwardRef<HTMLButtonElement, SelectClearButtonProps>(\n\t\tfunction SelectClearButton(props, ref) {\n\t\t\tconst { getClearButtonProps } = useSelectContext();\n\n\t\t\treturn (\n\t\t\t\t<dreamy.button {...getClearButtonProps(props, ref)}>\n\t\t\t\t\t<dreamy.svg asChild>\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path d=\"M18 6 6 18\" />\n\t\t\t\t\t\t\t<path d=\"m6 6 12 12\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</dreamy.svg>\n\t\t\t\t</dreamy.button>\n\t\t\t);\n\t\t}\n\t),\n\t\"clearButton\"\n);\nconst SelectItemIndicator = withContext(CheckIcon, \"itemIndicator\");\n"
  },
  "component": "Select"
}